<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Generated scenario starts
const int P = 1;
const uint8_t MAXTIME = 10;
const int MAXP = 133;
const int NONE = -1;
const int MAXL = 6;
const int MAXSO = 1;
const int MAXDO = 2;
const int MAXTP = 60;
const int MAXPRE = 1;
const int MAXSUC = 1;
const double SCALE = 100.0;
const int THRESHOLD = 200;
const double TIMESTEPSIZE = 0.1;

typedef int[-1,65535] id_t;

typedef struct {
    int32_t x;
    int32_t y;
}ST_DPOINT;

typedef struct {
    double x;
    double y;
}ST_CPOINT;

typedef struct {
    ST_DPOINT ends[2];
}ST_DLINE;

typedef struct {
    ST_DPOINT points[MAXP];
    bool dashLine;
}ST_BOUND;

typedef struct {
    id_t ID;
    ST_BOUND left;
    ST_BOUND right;
    id_t predecessor[MAXPRE];
    id_t successor[MAXSUC];
    id_t adjLeft;
    bool dirLeft;
    id_t adjRight;
    bool dirRight;
}ST_LANE;

typedef struct {
    bool collide; // collision
    bool outside; // outside road
    bool reach;   // reach the goal
}ST_DETECTION;

typedef struct {
    ST_CPOINT position;
    double velocity;
    double orientation;
    double acceleration;
    double yawRate;
}ST_CSTATE;

typedef struct {
    ST_DPOINT position;
    int16_t velocity;
    int16_t orientation;
    int16_t acceleration;
    int16_t yawRate;
    ST_DETECTION detection;
}ST_DSTATE;

typedef struct {
    hybrid clock x;
    hybrid clock y;
    hybrid clock velocity;
    hybrid clock orientation;
    hybrid clock acceleration;
    hybrid clock yawRate;
}ST_VARIABLES;

typedef struct {
    ST_DPOINT center;
    int16_t width;
    int16_t length;
    int16_t orientation;
}ST_RECTANGLE;

typedef struct {
    int maxVelocity;
    int minVelocity;
    int maxOrientation;
    int minOrientation;
}ST_RULES;

typedef struct {
    ST_DPOINT goal;
}ST_PLANNING;

typedef struct {
    int32_t time;
    ST_CSTATE cState;
}ST_PAIR;
const ST_BOUND leftLane1 = {{{-3414, 557}, {-2865, 554}, {-2836, 554}, {-2819, 553}, {-2463, 535}, {-2424, 532}, {-1388, 518}, {-1357, 518}, {-1344, 517}, {-989, 498}, {-950, 496}, {22, 492}, {51, 492}, {67, 491}, {423, 473}, {463, 470}, {1486, 445}, {1515, 444}, {1519, 444}, {1529, 443}, {1881, 424}, {1920, 422}, {2912, 415}, {2942, 414}, {2957, 414}, {3313, 395}, {3352, 393}, {4324, 372}, {4374, 371}, {4709, 364}, {4758, 363}, {5764, 341}, {5813, 340}, {6149, 333}, {6191, 332}, {6193, 332}, {6197, 332}, {7231, 299}, {7277, 297}, {7612, 291}, {7662, 290}, {8677, 268}, {8727, 267}, {9063, 261}, {9113, 260}, {10106, 241}, {10157, 240}, {10493, 233}, {10536, 232}, {10537, 232}, {10541, 232}, {11552, 201}, {11598, 199}, {11934, 193}, {11982, 192}, {11984, 192}, {11984, 192}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane1 = {{{-3422, 218}, {-2867, 215}, {-2845, 214}, {-2829, 213}, {-2481, 194}, {-2429, 193}, {-1393, 179}, {-1368, 177}, {-1355, 177}, {-1007, 158}, {-952, 157}, {20, 153}, {41, 152}, {58, 151}, {405, 132}, {454, 131}, {1478, 105}, {1496, 104}, {1506, 103}, {1516, 103}, {1863, 84}, {1918, 83}, {2910, 76}, {2932, 75}, {2947, 74}, {3295, 55}, {3345, 53}, {4316, 32}, {4367, 31}, {4702, 25}, {4750, 24}, {5756, 1}, {5807, 0}, {6142, -6}, {6180, -7}, {6184, -7}, {6188, -7}, {7220, -40}, {7270, -41}, {7606, -48}, {7655, -49}, {8670, -70}, {8721, -71}, {9056, -78}, {9107, -79}, {10100, -98}, {10150, -99}, {10486, -106}, {10525, -107}, {10529, -107}, {10532, -107}, {11541, -138}, {11592, -139}, {11927, -146}, {11973, -147}, {11976, -147}, {11976, -147}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane1 = {534, leftLane1, rightLane1, {NONE}, {NONE}, NONE, false, 536, true};

const ST_BOUND leftLane2 = {{{-3422, 218}, {-2867, 215}, {-2837, 213}, {-2481, 194}, {-2465, 194}, {-1422, 179}, {-1400, 179}, {-1394, 178}, {-1024, 159}, {-1007, 158}, {20, 153}, {35, 152}, {405, 132}, {1457, 105}, {1472, 105}, {1477, 105}, {1852, 84}, {1863, 84}, {2910, 76}, {2931, 75}, {3295, 55}, {4316, 32}, {4353, 32}, {4702, 25}, {4740, 24}, {5749, 1}, {5762, 1}, {5767, 1}, {5771, 1}, {6142, -6}, {6161, -6}, {7219, -40}, {7227, -41}, {7606, -48}, {7614, -48}, {8653, -70}, {8670, -70}, {9038, -78}, {9056, -78}, {10100, -98}, {10114, -98}, {10486, -106}, {10504, -106}, {11541, -138}, {11923, -146}, {11976, -147}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane2 = {{{-3429, -105}, {-2876, -119}, {-2855, -120}, {-2500, -139}, {-2467, -140}, {-1427, -148}, {-1418, -148}, {-1411, -148}, {-1041, -169}, {-1015, -169}, {12, -193}, {16, -193}, {386, -214}, {1449, -212}, {1455, -212}, {1460, -212}, {1834, -233}, {1857, -233}, {2903, -254}, {2913, -255}, {3277, -275}, {4311, -292}, {4347, -293}, {4696, -300}, {4733, -300}, {5741, -334}, {5755, -334}, {5758, -334}, {5764, -334}, {6135, -342}, {6150, -342}, {7208, -378}, {7221, -379}, {7599, -386}, {7607, -386}, {8646, -401}, {8664, -401}, {9032, -409}, {9052, -409}, {10096, -421}, {10108, -421}, {10479, -428}, {10494, -429}, {11531, -459}, {11917, -467}, {11968, -469}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane2 = {536, leftLane2, rightLane2, {NONE}, {NONE}, 534, true, 538, true};

const ST_BOUND leftLane3 = {{{-3429, -105}, {-3244, -109}, {-3235, -110}, {-3225, -110}, {-2855, -120}, {-2470, -141}, {-2197, -143}, {-1828, -145}, {-1814, -145}, {-1427, -148}, {-1041, -169}, {-763, -175}, {-388, -184}, {-378, -184}, {16, -193}, {402, -215}, {654, -214}, {1031, -213}, {1045, -213}, {1449, -212}, {1834, -233}, {2114, -239}, {2488, -246}, {2496, -246}, {2913, -255}, {3298, -276}, {3534, -280}, {3539, -280}, {3543, -280}, {3929, -286}, {4344, -293}, {4345, -293}, {4733, -300}, {4965, -308}, {5350, -321}, {5764, -334}, {6150, -342}, {6396, -351}, {6782, -364}, {7221, -379}, {7607, -386}, {8643, -401}, {8645, -401}, {9032, -409}, {9282, -411}, {9669, -416}, {10092, -421}, {10484, -428}, {10488, -429}, {10685, -434}, {11071, -446}, {11529, -459}, {11908, -467}, {11916, -467}, {11918, -467}, {11968, -469}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane3 = {{{-3436, -438}, {-3253, -448}, {-3243, -448}, {-3228, -449}, {-2857, -451}, {-2472, -454}, {-2199, -455}, {-1846, -475}, {-1825, -475}, {-1430, -480}, {-1044, -484}, {-771, -487}, {-406, -507}, {-382, -508}, {12, -513}, {398, -518}, {655, -522}, {1013, -541}, {1034, -542}, {1445, -546}, {1832, -550}, {2108, -552}, {2471, -572}, {2480, -572}, {2902, -586}, {3287, -599}, {3529, -607}, {3530, -607}, {3534, -607}, {3923, -615}, {4338, -624}, {4340, -624}, {4726, -632}, {4954, -636}, {5340, -644}, {5757, -654}, {6143, -663}, {6386, -669}, {6772, -676}, {7215, -684}, {7601, -692}, {8639, -711}, {8640, -711}, {9026, -718}, {9278, -722}, {9663, -730}, {10089, -745}, {10477, -759}, {10480, -759}, {10675, -766}, {11061, -773}, {11519, -788}, {11902, -801}, {11906, -801}, {11907, -801}, {11960, -803}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane3 = {538, leftLane3, rightLane3, {NONE}, {NONE}, 536, true, 540, true};

const ST_BOUND leftLane4 = {{{-3436, -438}, {-3352, -443}, {-3234, -449}, {-3014, -450}, {-2998, -450}, {-2982, -451}, {-2552, -453}, {-2232, -455}, {-2226, -455}, {-2214, -455}, {-2154, -458}, {-2150, -458}, {-1814, -476}, {-1242, -482}, {-868, -486}, {-853, -486}, {-771, -487}, {-753, -488}, {-385, -508}, {150, -515}, {522, -520}, {533, -520}, {665, -522}, {676, -522}, {1051, -543}, {1576, -547}, {1949, -551}, {1962, -551}, {2108, -552}, {2122, -553}, {2493, -573}, {3009, -590}, {3395, -603}, {3539, -607}, {3923, -615}, {4417, -625}, {4804, -633}, {4946, -636}, {5331, -644}, {5922, -658}, {5925, -658}, {6311, -667}, {6386, -669}, {6772, -676}, {7323, -686}, {7709, -693}, {8700, -712}, {8704, -712}, {9090, -719}, {9282, -722}, {9582, -728}, {9668, -730}, {9973, -741}, {10672, -766}, {10675, -766}, {11053, -773}, {11061, -773}, {11960, -803}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane4 = {{{-3443, -755}, {-3369, -756}, {-3252, -762}, {-3015, -775}, {-3000, -775}, {-2975, -776}, {-2554, -767}, {-2250, -783}, {-2234, -784}, {-2221, -785}, {-2168, -788}, {-2158, -788}, {-1821, -796}, {-1250, -809}, {-886, -828}, {-865, -829}, {-775, -830}, {-772, -830}, {-387, -832}, {146, -834}, {503, -854}, {519, -854}, {658, -857}, {659, -857}, {1045, -864}, {1570, -874}, {1930, -894}, {1949, -894}, {2102, -897}, {2103, -897}, {2489, -902}, {2999, -909}, {3385, -917}, {3532, -921}, {3917, -930}, {4410, -941}, {4797, -949}, {4935, -953}, {5324, -967}, {5911, -986}, {5919, -987}, {6304, -994}, {6382, -995}, {6768, -1000}, {7317, -1006}, {7702, -1013}, {8689, -1045}, {8695, -1045}, {9084, -1053}, {9285, -1052}, {9575, -1050}, {9662, -1051}, {9961, -1057}, {10661, -1081}, {10669, -1081}, {11047, -1089}, {11051, -1089}, {11953, -1118}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane4 = {540, leftLane4, rightLane4, {NONE}, {NONE}, 538, true, 542, true};

const ST_BOUND leftLane5 = {{{-3443, -755}, {-3369, -756}, {-3154, -768}, {-3060, -773}, {-2984, -777}, {-2771, -772}, {-2696, -770}, {-2595, -768}, {-2579, -768}, {-2559, -768}, {-2547, -768}, {-2272, -782}, {-2270, -782}, {-2176, -787}, {-2168, -788}, {-1839, -795}, {-1756, -797}, {-1748, -797}, {-1741, -797}, {-1397, -805}, {-1317, -807}, {-1310, -807}, {-1302, -807}, {-1241, -809}, {-1229, -810}, {-939, -825}, {-856, -830}, {-72, -833}, {1, -833}, {15, -833}, {25, -833}, {146, -834}, {162, -835}, {379, -847}, {473, -852}, {531, -855}, {809, -860}, {885, -862}, {894, -862}, {1268, -868}, {1349, -870}, {1577, -874}, {1726, -882}, {1821, -887}, {1962, -895}, {2167, -898}, {2241, -899}, {2251, -899}, {2258, -899}, {2596, -904}, {2675, -905}, {2686, -905}, {2693, -905}, {2993, -909}, {2996, -909}, {3048, -910}, {3144, -912}, {3385, -917}, {3505, -920}, {3585, -922}, {3922, -930}, {4022, -932}, {4029, -932}, {4037, -932}, {4381, -940}, {4396, -941}, {4457, -942}, {4466, -942}, {4472, -942}, {4795, -949}, {4799, -949}, {4841, -950}, {4935, -953}, {5258, -964}, {5345, -967}, {5349, -967}, {5352, -968}, {5711, -980}, {5806, -983}, {5918, -987}, {6143, -991}, {6221, -993}, {6285, -994}, {6568, -997}, {6664, -998}, {6676, -999}, {6685, -999}, {7036, -1003}, {7111, -1003}, {7123, -1004}, {7135, -1004}, {7317, -1006}, {7479, -1009}, {7556, -1011}, {7564, -1011}, {7573, -1011}, {7703, -1013}, {7924, -1021}, {8018, -1024}, {8599, -1042}, {8693, -1045}, {8698, -1045}, {9057, -1052}, {9111, -1053}, {9126, -1053}, {9138, -1053}, {9507, -1050}, {9541, -1050}, {9543, -1050}, {9593, -1050}, {9605, -1050}, {9611, -1050}, {9614, -1051}, {9961, -1057}, {9987, -1058}, {10081, -1062}, {10425, -1073}, {10520, -1076}, {10661, -1081}, {10885, -1086}, {10963, -1087}, {10971, -1087}, {10977, -1088}, {11047, -1089}, {11343, -1098}, {11429, -1101}, {11433, -1101}, {11437, -1102}, {11811, -1114}, {11897, -1116}, {11901, -1116}, {11905, -1117}, {11953, -1118}}, false};
const ST_BOUND rightLane5 = {{{-3451, -1112}, {-3370, -1112}, {-3173, -1113}, {-3079, -1117}, {-2988, -1118}, {-2762, -1122}, {-2687, -1124}, {-2606, -1127}, {-2586, -1128}, {-2565, -1129}, {-2558, -1129}, {-2290, -1137}, {-2286, -1137}, {-2195, -1141}, {-2179, -1141}, {-1847, -1151}, {-1764, -1155}, {-1758, -1155}, {-1746, -1155}, {-1405, -1160}, {-1325, -1164}, {-1321, -1164}, {-1309, -1164}, {-1248, -1165}, {-1247, -1165}, {-958, -1170}, {-871, -1174}, {-80, -1194}, {0, -1198}, {4, -1198}, {14, -1198}, {140, -1200}, {142, -1200}, {360, -1203}, {454, -1207}, {530, -1207}, {803, -1208}, {879, -1211}, {880, -1211}, {1257, -1223}, {1343, -1227}, {1564, -1235}, {1707, -1240}, {1801, -1244}, {1960, -1245}, {2163, -1246}, {2236, -1249}, {2239, -1249}, {2246, -1250}, {2591, -1258}, {2670, -1261}, {2674, -1261}, {2681, -1261}, {2984, -1269}, {2990, -1269}, {3041, -1270}, {3137, -1274}, {3389, -1271}, {3497, -1270}, {3576, -1273}, {3913, -1291}, {4013, -1295}, {4019, -1295}, {4031, -1296}, {4373, -1301}, {4380, -1301}, {4450, -1304}, {4452, -1304}, {4458, -1305}, {4785, -1313}, {4787, -1313}, {4829, -1315}, {4923, -1319}, {5246, -1322}, {5333, -1326}, {5338, -1326}, {5344, -1326}, {5699, -1334}, {5794, -1339}, {5924, -1336}, {6136, -1333}, {6214, -1336}, {6269, -1339}, {6563, -1353}, {6660, -1357}, {6664, -1357}, {6674, -1358}, {7032, -1364}, {7107, -1367}, {7113, -1367}, {7125, -1368}, {7313, -1370}, {7472, -1371}, {7548, -1375}, {7555, -1375}, {7569, -1375}, {7699, -1377}, {7912, -1379}, {8007, -1383}, {8588, -1392}, {8682, -1396}, {8698, -1396}, {9050, -1397}, {9111, -1399}, {9115, -1399}, {9127, -1400}, {9504, -1404}, {9528, -1405}, {9543, -1405}, {9589, -1407}, {9591, -1407}, {9597, -1407}, {9607, -1408}, {9952, -1417}, {9975, -1418}, {10069, -1422}, {10413, -1427}, {10508, -1431}, {10658, -1432}, {10878, -1434}, {10956, -1437}, {10958, -1438}, {10965, -1438}, {11038, -1440}, {11331, -1447}, {11417, -1450}, {11420, -1451}, {11426, -1451}, {11799, -1463}, {11886, -1467}, {11889, -1467}, {11895, -1467}, {11945, -1468}}, false};
const ST_LANE lane5 = {542, leftLane5, rightLane5, {NONE}, {NONE}, 540, true, 544, true};

const ST_BOUND leftLane6 = {{{-3451, -1112}, {-3173, -1113}, {-3079, -1117}, {-2735, -1122}, {-2640, -1126}, {-2290, -1137}, {-2195, -1141}, {-1843, -1151}, {-1749, -1155}, {-1405, -1160}, {-1310, -1164}, {-1220, -1166}, {-958, -1170}, {-863, -1174}, {-515, -1184}, {-421, -1188}, {-65, -1195}, {28, -1199}, {360, -1203}, {454, -1207}, {795, -1208}, {809, -1209}, {897, -1212}, {1267, -1224}, {1361, -1228}, {1707, -1240}, {1801, -1244}, {2163, -1246}, {2257, -1250}, {2597, -1258}, {2692, -1262}, {3042, -1270}, {3130, -1274}, {3137, -1274}, {3484, -1270}, {3503, -1270}, {3591, -1274}, {3934, -1292}, {4028, -1296}, {4373, -1301}, {4467, -1305}, {4829, -1315}, {4923, -1319}, {5246, -1322}, {5340, -1326}, {5699, -1334}, {5794, -1339}, {6122, -1333}, {6142, -1334}, {6231, -1337}, {6589, -1354}, {6683, -1358}, {6765, -1360}, {7036, -1364}, {7131, -1368}, {7472, -1371}, {7566, -1375}, {7912, -1379}, {8007, -1383}, {8588, -1392}, {8682, -1396}, {9050, -1397}, {9145, -1401}, {9515, -1404}, {9609, -1408}, {9975, -1418}, {10069, -1422}, {10413, -1427}, {10508, -1431}, {10832, -1434}, {10957, -1438}, {10962, -1438}, {11012, -1439}, {11029, -1439}, {11331, -1447}, {11426, -1451}, {11799, -1463}, {11894, -1467}, {11945, -1468}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane6 = {{{-3459, -1485}, {-3182, -1491}, {-3087, -1493}, {-2743, -1501}, {-2649, -1503}, {-2298, -1511}, {-2204, -1513}, {-1851, -1521}, {-1757, -1523}, {-1413, -1531}, {-1319, -1533}, {-1226, -1535}, {-966, -1542}, {-872, -1544}, {-524, -1552}, {-430, -1554}, {-74, -1563}, {19, -1565}, {351, -1573}, {445, -1575}, {786, -1584}, {794, -1584}, {888, -1586}, {1258, -1595}, {1352, -1597}, {1698, -1606}, {1792, -1608}, {2154, -1617}, {2248, -1619}, {2589, -1627}, {2683, -1629}, {3033, -1638}, {3114, -1640}, {3129, -1640}, {3476, -1647}, {3488, -1648}, {3583, -1650}, {3926, -1657}, {4021, -1659}, {4365, -1667}, {4459, -1669}, {4821, -1677}, {4915, -1679}, {5238, -1686}, {5332, -1688}, {5691, -1695}, {5786, -1698}, {6114, -1705}, {6128, -1705}, {6223, -1707}, {6581, -1715}, {6676, -1717}, {6760, -1719}, {7028, -1725}, {7123, -1727}, {7464, -1734}, {7558, -1736}, {7904, -1744}, {7999, -1746}, {8579, -1759}, {8674, -1761}, {9042, -1769}, {9136, -1771}, {9506, -1779}, {9601, -1781}, {9967, -1790}, {10061, -1792}, {10405, -1799}, {10500, -1801}, {10829, -1809}, {10935, -1816}, {10945, -1817}, {11002, -1821}, {11015, -1821}, {11318, -1832}, {11413, -1835}, {11786, -1848}, {11881, -1851}, {11935, -1853}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane6 = {544, leftLane6, rightLane6, {NONE}, {NONE}, 542, true, NONE, false};

const ST_LANE laneNet[MAXL] = {lane1, lane2, lane3, lane4, lane5, lane6};

const bool staticObsExists = false;
const ST_RECTANGLE staticObs[MAXSO] = {{{NONE, NONE}, NONE, NONE, NONE}};

const ST_PLANNING planning = {{4281, 206}};


// Generated scenario ends

broadcast chan chooseEgo, chooseObs, begin, update;

ST_DSTATE dStateEgo;       // discrete variables
ST_VARIABLES varsEgo;      // continuous variables
ST_RECTANGLE shapeEgo;     // shape of ego vehicle
hybrid clock D;            /// "cost" of distance used in strategy optimization
clock time;                // global time

double i2d(const int32_t i) {
    double v = i/SCALE;
    return v;
}

int32_t d2i(const double i) {
    int32_t v = fint(i*SCALE);
    return v;
}

double mTimeStep(const double value) {
    return value*TIMESTEPSIZE;
}

int32_t getDisP2P(const ST_DPOINT &amp;p1, const ST_DPOINT &amp;p2) {
    double distance = 0.0;
    double rx1 = i2d(p1.x), ry1 = i2d(p1.y);
    double rx2 = i2d(p2.x), ry2 = i2d(p2.y);
    distance = sqrt(pow(rx1 - rx2, 2) + pow(ry1 - ry2, 2));

    return d2i(distance);
}

// Function to calculate the corner points of a rectangle
void calculateCornerPoints(ST_RECTANGLE veh_state, ST_DPOINT &amp;corners[4]) {
    double halfLength = i2d(veh_state.length)/2.0;
    double halfWidth = i2d(veh_state.width)/2.0;
    double angle = i2d(veh_state.orientation);

    // Calculate the coordinates of each corner point based on the center, length, width, and orientation
    corners[0].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) - halfWidth*sin(angle));
    corners[0].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) + halfWidth*cos(angle));

    corners[1].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) + halfWidth*sin(angle));
    corners[1].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) - halfWidth*cos(angle));

    corners[2].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) + halfWidth*sin(angle));
    corners[2].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) - halfWidth*cos(angle));

    corners[3].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) - halfWidth*sin(angle));
    corners[3].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) + halfWidth*cos(angle));
}

// Function to check if all elements in the vector (size=4) have the same sign
bool same_sign(int32_t vec[4]) {
    int i = 0;
    int sign = (vec[0] &gt;= 0) ? 1 : -1; // Get the sign of the first element
    for (i = 1; i &lt; 4; i++) {
        if ((vec[i] &gt;= 0) != (sign &gt;= 0)) {
            return false; // Different signs found
        }
    }
    return true; // All elements have the same sign
}

// check if pt1 is on the same line defined by pt2-pt3
bool check_online(ST_DPOINT pt1, ST_DPOINT pt2, ST_DPOINT pt3) {
    double dis12, dis13, dis23;

    dis12 = sqrt(pow(pt1.x - pt2.x, 2) + pow(pt1.y - pt2.y, 2));
    dis13 = sqrt(pow(pt1.x - pt3.x, 2) + pow(pt1.y - pt3.y, 2));
    dis23 = sqrt(pow(pt2.x - pt3.x, 2) + pow(pt2.y - pt3.y, 2));
    if (dis12 + dis13 == dis23)
        return true;
    else
        return false; 
}

// Check if any corner of box2 is outside box1
int check_coverage(ST_DPOINT box1[4], ST_DPOINT box2[4]) {
    int i = 0, j = 0;
    int32_t abx = 0, aby = 0, apx = 0, apy = 0;
    int32_t cross_prod[4];
    int inside_sum = 0;
    int is_online = 0;
    // Check if all corners of box2 fall outside the bounding box of box1   
    for (i = 0; i &lt; 4; i++) {
        // get the x y coordinate of the test points
        for (j = 0; j &lt; 4; j++) {
            abx = box1[(j+1)%4].x - box1[j].x; // when j+1=4, back to the first one
            aby = box1[(j+1)%4].y - box1[j].y;
            apx = box2[i].x - box1[j].x;
            apy = box2[i].y - box1[j].y;
            // cross product of ab and ap
            cross_prod[j] = abx*apy - apx*aby;
            // check if on the line
            if (check_online(box2[i], box1[j], box1[(j+1)%4]) == 1)
                is_online = 1;
        }
        // if all the cross production have the same sign, then the test point is within the box1
        if (same_sign(cross_prod) || is_online == 1)
            inside_sum++;
    }
    return inside_sum;
}

// Function to count non-zero elements in a 2D array
int check_pts_num(ST_DPOINT lane_pts[MAXP]) {
    uint16_t count = 0;
    // NONE or 0?
    while (count &lt; MAXP &amp;&amp; (lane_pts[count].x != NONE || lane_pts[count].y != NONE)){
        count++;
    }
    return count;
}

// check if veh_state are not covered by laneNet, or if vehicle rectangle touches laneNet
// can this function call check_inlane_lane_single?
bool check_inlane_laneNet(ST_RECTANGLE veh_state, int &amp;lane, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t i_lane = 0;
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;
    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];

    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);
    for(i_lane = 0; i_lane &lt; MAXL; i_lane++){
        // check the number of points in each lane
        num_box = check_pts_num(laneNet[i_lane].left.points) - 1;
        for (i_box = 0; i_box &lt; num_box; i_box++){
            // define the corner of the road box
            box_corners[0] = laneNet[i_lane].right.points[i_box];
            box_corners[1] = laneNet[i_lane].right.points[i_box + 1];
            box_corners[2] = laneNet[i_lane].left.points[i_box + 1];
            box_corners[3] = laneNet[i_lane].left.points[i_box];
            // check if the inlane status of the vehicle box to the current box
            inlane_pts_num += check_coverage(box_corners, veh_corners);    
        }
    }
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

// check if veh_state are not covered by a single lane, or if vehicle rectangle touches the edge of the lane
bool check_inlane_lane_single(const ST_LANE lane, ST_RECTANGLE veh_state, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;

    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];
    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);

    // check the number of points in the lane
    num_box = check_pts_num(lane.left.points) - 1;
    for (i_box = 0; i_box &lt; num_box; i_box++){
        // define the corner of the road box
        box_corners[0] = lane.right.points[i_box];
        box_corners[1] = lane.right.points[i_box + 1];
        box_corners[2] = lane.left.points[i_box + 1];
        box_corners[3] = lane.left.points[i_box];
        // check if the inlane status of the vehicle box to the current box
        inlane_pts_num += check_coverage(box_corners, veh_corners);         
    }
    
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

int32_t compute_approximating_circle_radius(int ego_length, int ego_width) {
    double length = i2d(ego_length);
    double width = i2d(ego_width);
    double square_length, diagonal_square, approx_radius;

    if (length &lt;= 0 || width &lt;= 0) {
        return -1;
    }

    if (fabs(length) &lt; 1e-6 &amp;&amp; fabs(width) &lt; 1e-6) {
        return 0;
    }
    // Divide rectangle into 3 smaller rectangles
    square_length = length/3.0;
    // Calculate minimum radius
    diagonal_square = sqrt(pow(square_length/2.0, 2) + pow(width/2.0, 2));
    // Round up value
    approx_radius = round(diagonal_square*10.0) / 10.0 + 0.1;

    return d2i(approx_radius);
}

void compute_centers_of_approximation_circles(ST_RECTANGLE veh_rect, ST_DPOINT &amp;centers[2]) {
    double disc_radius, distance_centers, veh_cent_x_double, veh_cent_y_double;

    disc_radius = i2d(compute_approximating_circle_radius(veh_rect.length, veh_rect.width));
    distance_centers = disc_radius/2.0;

    // Compute the center position of first circle (front)
    veh_cent_x_double = i2d(veh_rect.center.x);
    veh_cent_y_double = i2d(veh_rect.center.y);
    centers[0].x = d2i(veh_cent_x_double + (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[0].y = d2i(veh_cent_y_double + (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));

    // Compute the center position of second circle (rear)
    centers[1].x = d2i(veh_cent_x_double - (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[1].y = d2i(veh_cent_y_double - (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));
}



bool check_collision(ST_RECTANGLE veh_st_rect1, ST_RECTANGLE veh_st_rect2, int dis_thres) {    
    // define two vehicles' circle tuple (front and rear)
    ST_DPOINT veh_circle_tuple1[2] = {{0, 0}, {0, 0}};
    ST_DPOINT veh_circle_tuple2[2] = {{0, 0}, {0, 0}};
    double min_dis = FLT_MAX, dis = 0;
    int i, j;    
    //int32_t temp[2][2];
    
    // calculate the centers of the vehicles' circles
    compute_centers_of_approximation_circles(veh_st_rect1, veh_circle_tuple1);
    compute_centers_of_approximation_circles(veh_st_rect2, veh_circle_tuple2);

    for (i = 0; i &lt; 2; ++i) {
        for (j = 0; j &lt; 2; ++j) {
            dis = sqrt(pow(veh_circle_tuple1[i].x - veh_circle_tuple2[j].x, 2) + pow(veh_circle_tuple1[i].y - veh_circle_tuple2[j].y, 2));
            //temp[i][j] = d2i(dis);
            min_dis = fmin(min_dis, dis);
        }
    }
    if (dis_thres &gt; min_dis)
        return true;
    else
        return false;
}
   
</declaration>
	<template>
		<name x="5" y="5">MovingObs</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_PAIR &amp;trajectory[MAXTP]</parameter>
		<declaration>ST_VARIABLES vars;  // continuous variables
ST_DSTATE dState;   // discrete state
uint8_t pc = 0;     // policy counter
uint8_t tc = 0;     // time counter
ST_RECTANGLE self;

void decisionMaking() {
    if(pc &lt; MAXTP &amp;&amp; tc == trajectory[pc].time) {
        // predefined trajectory starts
        vars.x = trajectory[pc].cState.position.x;
        vars.y = trajectory[pc].cState.position.y;
        vars.velocity = mTimeStep(trajectory[pc].cState.velocity);

        vars.acceleration = mTimeStep(trajectory[pc].cState.acceleration);
        vars.yawRate = mTimeStep(trajectory[pc].cState.yawRate);

        dState.acceleration = d2i(mTimeStep(trajectory[pc].cState.acceleration));
        dState.yawRate = d2i(mTimeStep(trajectory[pc].cState.yawRate));
        pc++;
    }
    else if(pc &lt; MAXTP) {
        tc++;
    }
    else if(pc &gt;= MAXTP - 1) {
        vars.velocity = 0;
        vars.acceleration = 0;
        vars.yawRate = 0;
        dState.velocity = 0;
        dState.acceleration = 0;
        dState.yawRate = 0;
    }
}

void initCon(ST_VARIABLES &amp;vars, const ST_CSTATE &amp;initCS) {
    vars.x = initCS.position.x;
    vars.y = initCS.position.y;
    vars.velocity = mTimeStep(initCS.velocity);
    vars.orientation = initCS.orientation;
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);
    time = 0;  
}

void initDis(ST_DSTATE &amp;dState, const ST_CSTATE &amp;initCS) {
    dState.position.x = d2i(initCS.position.x);
    dState.position.y = d2i(initCS.position.y);
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.orientation = d2i(initCS.orientation);
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;

    dStateEgo.detection.collide |= check_collision(shapeEgo, shape, THRESHOLD);
    dState.detection.collide = dStateEgo.detection.collide;
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}

void initialize() {
    pc = 0;
    tc = 0;
    initCon(vars,initCS);
    initDis(dState,initCS);
    self = shape;
}









</declaration>
		<location id="id0" x="-102" y="-34">
			<name x="-76" y="-34">Move</name>
			<label kind="invariant" x="-255" y="-17">vars.x' == vars.velocity*cos(vars.orientation) &amp;&amp;
vars.y' == vars.velocity*sin(vars.orientation) &amp;&amp;
vars.velocity' == vars.acceleration &amp;&amp;
vars.orientation' == vars.yawRate &amp;&amp;
vars.yawRate' == 0 &amp;&amp;
vars.acceleration' == 0</label>
		</location>
		<init ref="id0"/>
		<transition id="id1" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-161" y="-119">update?</label>
			<label kind="assignment" x="-161" y="-102">updateDis(dState,self)</label>
			<nail x="-136" y="-102"/>
			<nail x="-68" y="-102"/>
		</transition>
		<transition id="id2" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-246" y="-68">begin?</label>
			<label kind="assignment" x="-246" y="-51">initialize()</label>
			<nail x="-170" y="-68"/>
			<nail x="-170" y="-34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-34" y="-68">chooseObs?</label>
			<label kind="assignment" x="-42" y="-51">decisionMaking()</label>
			<nail x="-34" y="-34"/>
			<nail x="-34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_RULES &amp;rules</parameter>
		<declaration>typedef int[0,0] BRAKE_t;    // 1 gear of brake force
typedef int[0,0] PUSH_t;     // 1 gear of push force
typedef int[0,1] TURN_t;     // 2 speeds of turning 

const int8_t Brake[3] = {d2i(-0.1), d2i(-0.2), d2i(-0.3)};
const int8_t Push[3] = {d2i(0.1), d2i(0.2), d2i(0.3)};
const int8_t Turn[2] = {d2i(0.1), d2i(-0.1)};
const bool CONSTANTSPEED = true;

void opConst() {
    dStateEgo.acceleration = 0;
    varsEgo.acceleration = 0;
}

void opAcc(int gear) {
    dStateEgo.acceleration = Push[gear];
    varsEgo.acceleration = i2d(Push[gear]);
}

void opBrake(int gear) {
    dStateEgo.acceleration = Brake[gear];
    varsEgo.acceleration = i2d(Brake[gear]);
}

void opTurn(int dir) {
    int nr = Turn[dir];
    int no = dStateEgo.orientation;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(no);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int nx = shapeEgo.center.x + d2i(vx) * P;
    int ny = shapeEgo.center.y + d2i(vy) * P;

    dStateEgo.yawRate = Turn[dir];
    varsEgo.yawRate = i2d(Turn[dir]);
}

void keep() {
    dStateEgo.yawRate = 0;
    varsEgo.yawRate = 0.0;
}

bool canAcc(int gear) {
    int nextAcc = Push[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextAcc &lt;= rules.maxVelocity) 
        return true;
    return false;
}

bool canDec(int gear) {
    int nextDec = Brake[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextDec &gt;= rules.minVelocity) 
        return true;
    return false;
}

bool canTurn(int dir) {
    int nextRate = Turn[dir];
    int nextOrientation = dStateEgo.orientation + P*nextRate;
    ST_RECTANGLE nextShape = shape;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(nextOrientation);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    bool outroad = false;

    nextShape.center.x = shapeEgo.center.x + d2i(vx) * P;
    nextShape.center.y = shapeEgo.center.y + d2i(vy) * P;
    nextShape.orientation = nextOrientation;
    outroad = !check_inlane_laneNet(nextShape, lane, veh_corners, box_corners);

    if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation &amp;&amp; !outroad) 
    //if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation)
        return true;
    return false;
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    uint8_t inlane_pts_num = 0;

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;
    dState.detection.outside = !check_inlane_laneNet(shape, lane, veh_corners, box_corners);
    dState.detection.reach = (getDisP2P(shape.center, planning.goal) &lt;= THRESHOLD);
    if(staticObsExists) {
        for(i = 0; i &lt; MAXSO; i++) {
            dState.detection.collide |= check_collision(shape, staticObs[i], THRESHOLD);
        }
    }
}

void initDis(ST_DSTATE &amp;dState) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    if(initCS.position.x == NONE || initCS.position.y == NONE) {
        dState.position = middleDStart;
        dState.orientation = d2i(angle);
    } else {
        dState.position.x = d2i(initCS.position.x);
        dState.position.y = d2i(initCS.position.y);
        dState.orientation = d2i(initCS.orientation);
    }
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));

    dState.detection.collide = false;
    dState.detection.outside = false;
    dState.detection.reach = false;
}

void initialize() {
    initDis(dStateEgo);
    shapeEgo = shape;
    shapeEgo.center = dStateEgo.position;
}









</declaration>
		<location id="id4" x="-340" y="-136">
			<name x="-433" y="-161">Turn_Const</name>
			<label kind="comments" x="-34" y="-51">One cannot turn and 
acc or brake 
simutaneously.</label>
		</location>
		<location id="id5" x="-68" y="136">
			<name x="-187" y="136">Straight_Dec</name>
		</location>
		<location id="id6" x="-68" y="-136">
			<name x="-51" y="-170">Straight_Acc</name>
		</location>
		<location id="id7" x="-204" y="0">
			<name x="-289" y="-17">Choose</name>
			<committed/>
		</location>
		<location id="id8" x="-340" y="136">
			<name x="-476" y="161">Straight_Const</name>
		</location>
		<init ref="id8"/>
		<transition id="id9" controllable="false">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-280" y="187">begin?</label>
			<label kind="assignment" x="-195" y="187">initialize()</label>
			<nail x="-68" y="204"/>
			<nail x="-340" y="204"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-424" y="-221">begin?</label>
			<label kind="assignment" x="-424" y="-204">initialize()</label>
			<nail x="-68" y="-204"/>
			<nail x="-442" y="-204"/>
			<nail x="-442" y="0"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id4"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-433" y="-34">begin?</label>
			<label kind="assignment" x="-433" y="-17">initialize()</label>
			<nail x="-408" y="-136"/>
			<nail x="-408" y="0"/>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-306" y="144">update?</label>
			<label kind="assignment" x="-306" y="161">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-331" y="170"/>
			<nail x="-306" y="170"/>
		</transition>
		<transition id="id13" controllable="false">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-25" y="93">update?</label>
			<label kind="assignment" x="-25" y="119">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="102"/>
			<nail x="-34" y="136"/>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-42" y="-144">update?</label>
			<label kind="assignment" x="-42" y="-127">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="-136"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-314" y="-187">update?</label>
			<label kind="assignment" x="-314" y="-170">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-306" y="-170"/>
			<nail x="-340" y="-170"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-357" y="-68">chooseEgo?</label>
			<label kind="assignment" x="-357" y="-51">keep()</label>
			<label kind="comments" x="-34" y="25">Keeps moving with 
this angle</label>
			<nail x="-340" y="-68"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-467" y="102">begin?</label>
			<label kind="assignment" x="-467" y="119">initialize()</label>
			<nail x="-374" y="102"/>
			<nail x="-374" y="127"/>
		</transition>
		<transition id="id18">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="select" x="-263" y="-93">d:TURN_t</label>
			<label kind="guard" x="-263" y="-76">canTurn(d)</label>
			<label kind="assignment" x="-263" y="-59">opTurn(d)</label>
			<nail x="-272" y="-136"/>
		</transition>
		<transition id="id19">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="102">chooseEgo?</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition id="id20">
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="select" x="-144" y="17">f:BRAKE_t</label>
			<label kind="guard" x="-144" y="34">canDec(f)</label>
			<label kind="assignment" x="-144" y="51">opBrake(f)</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition id="id21">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="-119">chooseEgo?</label>
			<nail x="-136" y="-136"/>
		</transition>
		<transition id="id22">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-136" y="-76">f:PUSH_t</label>
			<label kind="guard" x="-136" y="-59">canAcc(f)</label>
			<label kind="assignment" x="-136" y="-42">opAcc(f)</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition id="id23">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-340" y="51">opConst()</label>
			<nail x="-340" y="68"/>
		</transition>
		<transition id="id24">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-314" y="102">chooseEgo?</label>
			<nail x="-272" y="136"/>
		</transition>
	</template>
	<template>
		<name>Decisions</name>
		<declaration>clock timer;
int counter = 0;</declaration>
		<location id="id25" x="102" y="68">
			<name x="110" y="42">Idle</name>
			<label kind="invariant" x="85" y="85">timer&lt;=P</label>
		</location>
		<location id="id26" x="102" y="-34">
			<name x="92" y="-68">Done</name>
			<urgent/>
		</location>
		<location id="id27" x="-68" y="-34">
			<name x="-78" y="-68">ObsGo</name>
			<urgent/>
		</location>
		<location id="id28" x="-204" y="-34">
			<name x="-214" y="-68">EgoGo</name>
			<urgent/>
		</location>
		<location id="id29" x="-340" y="-34">
			<name x="-350" y="-68">Start</name>
			<urgent/>
		</location>
		<init ref="id29"/>
		<transition id="id30" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-348" y="51">counter==MAXTIME</label>
			<label kind="synchronisation" x="-348" y="68">begin!</label>
			<label kind="assignment" x="-348" y="85">timer=0,counter=0</label>
			<nail x="68" y="102"/>
			<nail x="-340" y="102"/>
			<nail x="-340" y="0"/>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-280" y="-59">begin!</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-170" y="0">timer==P&amp;&amp;
counter!=MAXTIME</label>
			<label kind="synchronisation" x="-170" y="42">update!</label>
			<label kind="assignment" x="-102" y="42">timer=0,counter++</label>
			<nail x="-204" y="68"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="59" y="-8">timer=0</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-34" y="-59">chooseObs!</label>
		</transition>
		<transition id="id35" controllable="false">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-170" y="-59">chooseEgo!</label>
		</transition>
	</template>
	<template>
		<name>Dynamics</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS</parameter>
		<declaration>void initCon(ST_VARIABLES &amp;vars) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    if(initCS.position.x == NONE || initCS.position.y == NONE) {
        vars.x = i2d(middleDStart.x);
        vars.y = i2d(middleDStart.y);
        vars.orientation = angle;
    } else {
        vars.x = initCS.position.x;
        vars.y = initCS.position.y;
        vars.orientation = initCS.orientation;
    }
    vars.velocity = mTimeStep(initCS.velocity);
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);

    time = 0;
    if(dStateEgo.detection.reach) 
        D = 0; // only reset the reward function when reaching the goal
    if(dStateEgo.detection.collide || dStateEgo.detection.outside)
        D = D + 100; // punish the ego when it collides or goes outside the road    
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}</declaration>
		<location id="id36" x="0" y="0">
			<name x="-59" y="-8">Move</name>
			<label kind="invariant" x="-161" y="17">varsEgo.x' == varsEgo.velocity*cos(varsEgo.orientation) &amp;&amp;
varsEgo.y' == varsEgo.velocity*sin(varsEgo.orientation) &amp;&amp;
varsEgo.velocity' == varsEgo.acceleration &amp;&amp;
varsEgo.orientation' == varsEgo.yawRate &amp;&amp;
varsEgo.yawRate' == 0 &amp;&amp;
varsEgo.acceleration' == 0 &amp;&amp;
D' == getDisP2P(dStateEgo.position, planning.goal) 
      - dStateEgo.detection.reach * 100 
      + dStateEgo.detection.collide * 50 
      + dStateEgo.detection.outside * 50</label>
		</location>
		<init ref="id36"/>
		<transition id="id37" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="68" y="-68">update?</label>
			<label kind="assignment" x="68" y="-51">updateCon(varsEgo)</label>
			<nail x="68" y="-68"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition id="id38" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-161" y="-68">begin?</label>
			<label kind="assignment" x="-161" y="-51">initCon(varsEgo)</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-68"/>
		</transition>
	</template>
	<system>// Generated moving obstacles starts
const ST_CSTATE initCS484 = {{8.746, 2.7962}, 15.7033, 0.00698, 0.32004, 0.0};
const ST_RECTANGLE shapeObs484 = {{874, 279}, 149, 518, 0};
const ST_PAIR PHOLDER = {NONE,{{NONE,NONE},NONE,NONE,NONE,NONE}};
const ST_PAIR trajectory484[MAXTP] = {{1, {{10.2588, 2.7785}, 15.7429, -0.00053, 0.89002, 0}}, {2, {{11.819, 2.7484}, 15.8069, -0.00117, 0.5273, 0}}, {3, {{13.3694, 2.7176}, 15.8984, 0.00195, 0.81991, 0}}, {4, {{14.8882, 2.6921}, 16.0782, 0.0129, 2.5268, 0}}, {5, {{16.4549, 2.683}, 16.4135, 0.0028, 3.4138, 0}}, {6, {{18.073, 2.6572}, 16.8615, -0.00278, 3.4138, 0}}, {7, {{19.7461, 2.6213}, 17.27, 0.0, 3.4138, 0}}, {8, {{21.4652, 2.5889}, 17.5382, 0.01314, 1.7922, 0}}, {9, {{23.192, 2.5793}, 17.6296, 0.01433, -0.03048, 0}}, {10, {{24.9172, 2.5717}, 17.5443, 0.00627, -1.6764, 0}}, {11, {{26.6341, 2.5503}, 17.3035, 0.00499, -3.1333, 0}}, {12, {{28.3106, 2.5273}, 16.9713, 0.01622, -3.4138, 0}}, {13, {{29.9431, 2.5232}, 16.6634, 0.02015, -2.7341, 0}}, {14, {{31.5285, 2.5255}, 16.508, 0.01759, -0.51206, 0}}, {15, {{33.117, 2.5237}, 16.5263, 0.01098, 1.1979, 0}}, {16, {{34.7356, 2.5111}, 16.6329, 0.01392, 1.2832, 0}}, {17, {{36.3775, 2.5033}, 16.7305, 0.01387, 0.6157, 0}}, {18, {{38.0105, 2.4953}, 16.8036, 0.0267, 0.56388, 0}}, {19, {{39.6361, 2.5083}, 16.8676, -0.01939, 0.80467, 0}}, {20, {{41.2883, 2.4453}, 16.889, -0.04805, 0.012192, 0}}, {21, {{42.9523, 2.3341}, 16.7853, -0.05143, -1.9568, 0}}, {22, {{44.5929, 2.2188}, 16.5232, -0.04242, -3.4138, 0}}, {23, {{46.1793, 2.1217}, 16.2154, -0.01845, -3.0815, 0}}, {24, {{47.7264, 2.0641}, 16.0355, 0.00972, -0.75286, 0}}, {25, {{49.2505, 2.0504}, 16.0569, -0.01165, 1.4356, 0}}, {26, {{50.8295, 2.0025}, 16.2306, -0.00963, 2.3866, 0}}, {27, {{52.4252, 1.9572}, 16.4562, -0.01245, 2.1062, 0}}, {28, {{54.0438, 1.9067}, 16.6238, -0.00954, 1.3503, 0}}, {29, {{55.685, 1.8603}, 16.7244, -0.0096, 0.65837, 0}}, {30, {{57.3175, 1.8141}, 16.767, -0.00946, 0.067056, 0}}, {31, {{58.9497, 1.7681}, 16.764, -0.00972, -0.15545, 0}}, {32, {{60.582, 1.7216}, 16.7549, -0.0096, -0.018288, 0}}, {33, {{62.2145, 1.6754}, 16.7853, -0.00952, 0.49073, 0}}, {34, {{63.8382, 1.6295}, 16.8798, -0.00666, 1.3564, 0}}, {35, {{65.4843, 1.5877}, 17.0505, -0.00944, 2.158, 0}}, {36, {{67.1534, 1.5407}, 17.2608, -0.01351, 2.1885, 0}}, {37, {{68.849, 1.4861}, 17.4224, -0.01147, 1.2314, 0}}, {38, {{70.5679, 1.4342}, 17.4681, 0.00489, -0.24384, 0}}, {39, {{72.277, 1.4105}, 17.3919, 0.02245, -1.4478, 0}}, {40, {{73.9673, 1.4168}, 17.2761, 0.03768, -1.2131, 0}}, {41, {{75.6324, 1.4484}, 17.2578, 0.03761, 0.56083, 0}}, {42, {{77.2887, 1.4797}, 17.4041, 0.01975, 2.5298, 0}}, {43, {{78.9967, 1.4814}, 17.6479, 0.00973, 2.8651, 0}}, {44, {{80.7418, 1.4657}, 17.8186, -0.00871, 0.88392, 0}}, {45, {{82.5128, 1.4172}, 17.7729, -0.01181, -1.8837, 0}}, {46, {{84.2448, 1.3643}, 17.5199, 0.0001, -3.4138, 0}}, {47, {{85.9299, 1.3329}, 17.1938, 0.00357, -3.2736, 0}}, {48, {{87.5763, 1.308}, 16.9377, -0.00383, -1.9141, 0}}, {49, {{89.2004, 1.2713}, 16.764, -0.00377, -1.2527, 0}}, {50, {{90.8417, 1.2344}, 16.5933, -0.01154, -1.8898, 0}}, {51, {{92.4602, 1.1854}, 16.3434, -0.00809, -3.1882, 0}}, {52, {{94.0404, 1.143}, 16.002, 0.00055, -3.4138, 0}}, {53, {{95.5771, 1.1151}, 15.6606, 0.00424, -3.1821, 0}}, {54, {{97.075, 1.0934}, 15.4107, -0.0039, -1.8806, 0}}, {55, {{98.5505, 1.06}, 15.2491, -0.00383, -1.1064, 0}}, {56, {{100.0434, 1.0264}, 15.1181, -0.0071, -1.2984, 0}}, {57, {{101.5138, 0.98841}, 14.9535, -0.00404, -2.0361, 0}}, {58, {{102.9612, 0.95546}, 14.731, -0.00417, -2.5146, 0}}, {59, {{104.3862, 0.92284}, 14.478, -0.00348, -2.5725, 0}}, {60, {{105.7812, 0.89187}, 14.2311, -0.00375, -2.4354, 0}}};
obs484 = MovingObs(484, initCS484, shapeObs484, trajectory484);
const ST_CSTATE initCS489 = {{-19.8438, 2.8895}, 16.764, 0.0002, 0.0, 0.0};
const ST_RECTANGLE shapeObs489 = {{-1984, 288}, 179, 548, 0};
const ST_PAIR trajectory489[MAXTP] = {{1, {{-18.2112, 2.8592}, 16.764, 0.0, 0.0, 0}}, {2, {{-16.5783, 2.8288}, 16.764, 0.0002, 0.0, 0}}, {3, {{-14.9457, 2.7985}, 16.764, 0.0, 0.0, 0}}, {4, {{-13.3128, 2.7681}, 16.764, 0.0002, 0.0, 0}}, {5, {{-11.6801, 2.7378}, 16.764, 0.0, 0.0, 0}}, {6, {{-10.0473, 2.7073}, 16.764, 0.0002, 0.0, 0}}, {7, {{-8.4146, 2.6771}, 16.764, 0.0, 0.0, 0}}, {8, {{-6.7817, 2.6466}, 16.764, 0.0, 0.0, 0}}, {9, {{-5.1493, 2.6162}, 16.764, 0.0, 0.0, 0}}, {10, {{-3.5164, 2.5857}, 16.764, 0.0, 0.0, 0}}, {11, {{-1.8836, 2.5553}, 16.7701, 0.0002, 0.0762, 0}}, {12, {{-0.25092, 2.525}, 16.7731, 0.0, 0.018288, 0}}, {13, {{1.3819, 2.4945}, 16.7427, 0.0, -0.49073, 0}}, {14, {{3.0234, 2.4639}, 16.6482, -0.00269, -1.3442, 0}}, {15, {{4.642, 2.4293}, 16.4836, -0.00015, -2.0787, 0}}, {16, {{6.2382, 2.3992}, 16.2855, 0.00339, -1.9964, 0}}, {17, {{7.8097, 2.3751}, 16.127, 0.0, -1.3167, 0}}, {18, {{9.3609, 2.346}, 16.002, 0.0003, -0.97841, 0}}, {19, {{10.9266, 2.3172}, 15.874, -0.00327, -1.4082, 0}}, {20, {{12.4723, 2.2832}, 15.7094, 0.00033, -1.9812, 0}}, {21, {{13.9932, 2.2552}, 15.5661, 0.00289, -1.2649, 0}}, {22, {{15.4815, 2.2316}, 15.56, 0.01131, 0.91745, 0}}, {23, {{16.9763, 2.2206}, 15.7551, 0.00723, 3.1913, 0}}, {24, {{18.522, 2.2028}, 16.1087, -0.0009, 3.4138, 0}}, {25, {{20.1172, 2.1715}, 16.4836, -0.0022, 3.4138, 0}}, {26, {{21.7517, 2.1373}, 16.7549, 0.01354, 1.9172, 0}}, {27, {{23.4084, 2.1287}, 16.8402, 0.01502, -0.16154, 0}}, {28, {{25.0635, 2.1226}, 16.7457, 0.00456, -1.8654, 0}}, {29, {{26.6941, 2.0995}, 16.5506, 0.01713, -2.3348, 0}}, {30, {{28.2812, 2.097}, 16.3312, 0.00805, -2.1123, 0}}, {31, {{29.8585, 2.0801}, 16.0904, -0.00654, -2.3927, 0}}, {32, {{31.4366, 2.0403}, 15.7825, -0.00628, -3.4138, 0}}, {33, {{32.9598, 2.0022}, 15.365, -0.00418, -3.4138, 0}}, {34, {{34.4384, 1.9683}, 14.8986, 0.01006, -3.4138, 0}}, {35, {{35.8526, 1.9561}, 14.5146, -0.00663, -3.1821, 0}}, {36, {{37.2277, 1.9212}, 14.2829, -0.03862, -1.3716, 0}}, {37, {{38.6093, 1.8419}, 14.1884, -0.0311, -0.2347, 0}}, {38, {{39.9887, 1.7731}, 14.1732, -0.03094, 0.0, 0}}, {39, {{41.3679, 1.7046}, 14.1762, -0.0311, -0.009144, 0}}, {40, {{42.7473, 1.6358}, 14.1762, -0.03109, 0.033528, 0}}, {41, {{44.1263, 1.5671}, 14.1732, -0.03161, -0.06096, 0}}, {42, {{45.5075, 1.4975}, 14.1488, -0.0311, -0.35052, 0}}, {43, {{46.8869, 1.4287}, 14.097, -0.02792, -0.71933, 0}}, {44, {{48.2573, 1.3647}, 14.0208, -0.02383, -0.89306, 0}}, {45, {{49.6159, 1.3069}, 13.9355, -0.02071, -0.84125, 0}}, {46, {{50.9657, 1.2537}, 13.8623, -0.01988, -0.59436, 0}}, {47, {{52.3142, 1.2016}, 13.8257, -0.02056, -0.18288, 0}}, {48, {{53.6642, 1.1485}, 13.8227, -0.02056, 0.1463, 0}}, {49, {{55.0142, 1.0955}, 13.841, -0.02056, 0.28956, 0}}, {50, {{56.3643, 1.0424}, 13.8623, -0.0271, 0.14935, 0}}, {51, {{57.7139, 0.98051}, 13.8714, -0.01122, 0.009144, 0}}, {52, {{59.0678, 0.93996}, 13.8806, 0.00992, 0.14935, 0}}, {53, {{60.4144, 0.92811}, 13.9111, 0.02248, 0.39929, 0}}, {54, {{61.7716, 0.93322}, 13.9568, 0.01126, 0.57912, 0}}, {55, {{63.1346, 0.92305}, 14.0056, -0.01482, 0.47244, 0}}, {56, {{64.5038, 0.87711}, 14.0391, -0.02818, 0.20726, 0}}, {57, {{65.8728, 0.81285}, 14.0543, -0.02154, 0.027432, 0}}, {58, {{67.2408, 0.75775}, 14.0574, -0.0217, 0.012192, 0}}, {59, {{68.609, 0.70243}, 14.0604, -0.02154, 0.064008, 0}}, {60, {{69.977, 0.64733}, 14.0543, -0.02323, -0.14021, 0}}};
obs489 = MovingObs(489, initCS489, shapeObs489, trajectory489);

// Generated moving obstacles ends

// position, velocity, orientation, acceleration, yawRate
const ST_CSTATE initEgo = {{NONE, NONE}, 30.0, 0.0, 0.0, 0.0}; 
const ST_RECTANGLE initShapeEgo = {{NONE, NONE}, 100, 450, 0};
const ST_RULES rules = {4000, 0, 314, -314}; 
const int[0,MAXL] initLane = 0;
egoController = Controller(1, initLane, initEgo, initShapeEgo, rules);
egoDynamics = Dynamics(1, initLane, initEgo);

// Generated model instances start
system Decisions, egoController, egoDynamics, obs484, obs489;

// Generated model instances end
</system>
	<queries>
		<option key="--total-runs" value="50"/>
		<option key="--max-iterations" value="3"/>
		<option key="--good-runs" value="20"/>
		<option key="--eval-runs" value="10"/>
		<option key="--runs-pr-state" value="10"/>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>E&lt;&gt; dStateEgo.detection.reach</formula>
			<comment/>
		</query>
		<query>
			<formula>E[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy safe = control:A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside
</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:34 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>strategy reachSafe = minE(D) [&lt;=MAXTIME] {egoController.location}-&gt;{dStateEgo.position.x, dStateEgo.position.y, dStateEgo.velocity, dStateEgo.orientation, dStateEgo.acceleration, dStateEgo.yawRate}: &lt;&gt; time&gt;=MAXTIME under safe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:38 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=MAXTIME] { varsEgo.x, varsEgo.y, varsEgo.orientation, varsEgo.velocity, varsEgo.acceleration } under reachSafe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:41 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="varsEgo.x" type="l" color="0xff0000" encoding="csv">0.0,0.0
10.000002,30.000006
					</series>
					<series title="varsEgo.y" type="l" color="0xccff00" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<series title="varsEgo.orientation" type="l" color="0x00ff66" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<series title="varsEgo.velocity" type="l" color="0x0066ff" encoding="csv">0.0,0.0
0.0,3.0
10.000002,3.0
					</series>
					<series title="varsEgo.acceleration" type="l" color="0xcc00ff" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
