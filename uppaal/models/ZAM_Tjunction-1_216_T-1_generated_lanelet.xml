<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Generated scenario starts
const int P = 1;
const uint8_t MAXTIME = 10;
const int MAXP = 23;
const int NONE = -1;
const int MAXL = 12;
const int MAXSO = 1;
const int MAXDO = 5;
const int MAXTP = 147;
const int MAXPRE = 2;
const int MAXSUC = 2;
const double SCALE = 100.0;
const int THRESHOLD = 200;
const double TIMESTEPSIZE = 0.1;

typedef int[-1,65535] id_t;

typedef struct {
    int32_t x;
    int32_t y;
}ST_DPOINT;

typedef struct {
    double x;
    double y;
}ST_CPOINT;

typedef struct {
    ST_DPOINT ends[2];
}ST_DLINE;

typedef struct {
    ST_DPOINT points[MAXP];
    bool dashLine;
}ST_BOUND;

typedef struct {
    id_t ID;
    ST_BOUND left;
    ST_BOUND right;
    id_t predecessor[MAXPRE];
    id_t successor[MAXSUC];
    id_t adjLeft;
    bool dirLeft;
    id_t adjRight;
    bool dirRight;
}ST_LANE;

typedef struct {
    bool collide; // collision
    bool outside; // outside road
    bool reach;   // reach the goal
}ST_DETECTION;

typedef struct {
    ST_CPOINT position;
    double velocity;
    double orientation;
    double acceleration;
    double yawRate;
}ST_CSTATE;

typedef struct {
    ST_DPOINT position;
    int16_t velocity;
    int16_t orientation;
    int16_t acceleration;
    int16_t yawRate;
    ST_DETECTION detection;
}ST_DSTATE;

typedef struct {
    hybrid clock x;
    hybrid clock y;
    hybrid clock velocity;
    hybrid clock orientation;
    hybrid clock acceleration;
    hybrid clock yawRate;
}ST_VARIABLES;

typedef struct {
    ST_DPOINT center;
    int16_t width;
    int16_t length;
    int16_t orientation;
}ST_RECTANGLE;

typedef struct {
    int maxVelocity;
    int minVelocity;
    int maxOrientation;
    int minOrientation;
}ST_RULES;

typedef struct {
    ST_DPOINT goal;
}ST_PLANNING;

typedef struct {
    int32_t time;
    ST_CSTATE cState;
}ST_PAIR;
const ST_BOUND leftLane1 = {{{-13141, -3504}, {-11442, -2731}, {-9650, -1910}, {-9580, -1880}, {-8905, -1589}, {-8225, -1334}, {-8117, -1294}, {-6705, -775}, {-6630, -750}, {-5919, -520}, {-5833, -496}, {-5194, -320}, {-5171, -313}, {-4696, -191}, {-4591, -164}, {-4184, -87}, {-4022, -57}, {-3281, 36}, {-2167, 154}, {-1130, 207}, {-1044, 205}, {210, 175}, {NONE, NONE}}, false};
const ST_BOUND rightLane1 = {{{-13030, -3824}, {-11317, -2987}, {-9519, -2216}, {-9448, -2185}, {-8774, -1908}, {-8103, -1632}, {-8007, -1592}, {-6599, -1050}, {-6541, -1027}, {-5830, -793}, {-5757, -769}, {-5119, -590}, {-5095, -583}, {-4629, -453}, {-4544, -438}, {-4132, -366}, {-3987, -348}, {-3244, -258}, {-2132, -178}, {-1112, -123}, {-1052, -119}, {178, -192}, {NONE, NONE}}, false};
const ST_LANE lane1 = {50195, leftLane1, rightLane1, {NONE, NONE}, {50209, 50211}, 50197, false, NONE, false};

const ST_BOUND leftLane2 = {{{210, 175}, {-1130, 207}, {-1167, 205}, {-2068, 160}, {-2153, 156}, {-3210, 44}, {-3246, 41}, {-4022, -57}, {-4206, -92}, {-4591, -164}, {-5113, -298}, {-5171, -313}, {-5919, -520}, {-6646, -755}, {-6705, -775}, {-8171, -1314}, {-8225, -1334}, {-8905, -1589}, {-8951, -1608}, {-9650, -1910}, {-9866, -2009}, {-11442, -2731}, {-13141, -3504}}, false};
const ST_BOUND rightLane2 = {{{57, 577}, {-1133, 570}, {-1185, 570}, {-2085, 500}, {-2193, 487}, {-3243, 360}, {-3294, 352}, {-4067, 233}, {-4262, 202}, {-4658, 104}, {-5183, -25}, {-5254, -47}, {-5995, -279}, {-6726, -508}, {-6792, -532}, {-8266, -1058}, {-8316, -1075}, {-9001, -1316}, {-9067, -1340}, {-9767, -1633}, {-9995, -1729}, {-11565, -2472}, {-13257, -3272}}, false};
const ST_LANE lane2 = {50197, leftLane2, rightLane2, {50207, 50213}, {NONE, NONE}, 50195, false, NONE, false};

const ST_BOUND leftLane3 = {{{2889, -121}, {4179, -389}, {5329, -628}, {5377, -638}, {6356, -848}, {7205, -971}, {7229, -972}, {8067, -1031}, {8931, -1032}, {9002, -1033}, {10039, -1007}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane3 = {{{2806, -524}, {4088, -827}, {5223, -1087}, {5278, -1100}, {6276, -1295}, {7155, -1396}, {7199, -1402}, {8054, -1430}, {8930, -1435}, {9020, -1431}, {10061, -1385}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane3 = {50199, leftLane3, rightLane3, {50211, 50217}, {NONE, NONE}, 50201, false, NONE, false};

const ST_BOUND leftLane4 = {{{10039, -1007}, {9002, -1033}, {8846, -1032}, {8067, -1031}, {7205, -971}, {6356, -848}, {5329, -628}, {2889, -121}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane4 = {{{10028, -649}, {8995, -669}, {8846, -672}, {8079, -649}, {7249, -561}, {6433, -415}, {5400, -230}, {2999, 251}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane4 = {50201, leftLane4, rightLane4, {NONE, NONE}, {50213, 50215}, 50199, false, NONE, false};

const ST_BOUND leftLane5 = {{{1687, 1123}, {1638, 1472}, {1539, 1859}, {1321, 2512}, {1164, 2976}, {1004, 3455}, {413, 5228}, {-14, 6569}, {-616, 8203}, {-1128, 9520}, {-1606, 10849}, {-2199, 12364}, {-2800, 13814}, {-3550, 15548}, {-4207, 17035}, {-4684, 18185}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane5 = {{{2020, 1207}, {1991, 1477}, {1877, 2051}, {1718, 2706}, {1437, 3585}, {829, 5464}, {393, 6727}, {-145, 8290}, {-711, 9736}, {-1253, 11071}, {-1896, 12616}, {-2490, 14146}, {-3267, 15822}, {-3847, 17200}, {-4112, 17824}, {-4365, 18415}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane5 = {50203, leftLane5, rightLane5, {50209, 50215}, {NONE, NONE}, 50205, false, NONE, false};

const ST_BOUND leftLane6 = {{{-4684, 18185}, {-4207, 17035}, {-3550, 15548}, {-2800, 13814}, {-2199, 12364}, {-1606, 10849}, {-1128, 9520}, {-616, 8203}, {-14, 6569}, {413, 5228}, {1004, 3455}, {1164, 2976}, {1321, 2512}, {1539, 1859}, {1638, 1472}, {1687, 1123}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane6 = {{{-5011, 18039}, {-4533, 16916}, {-3890, 15365}, {-3142, 13680}, {-2546, 12241}, {-1938, 10743}, {-1454, 9407}, {-972, 8094}, {-379, 6461}, {57, 5134}, {649, 3357}, {1053, 2324}, {1230, 1768}, {1267, 1593}, {1273, 1419}, {1240, 1180}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane6 = {50205, leftLane6, rightLane6, {NONE, NONE}, {50207, 50217}, 50203, false, NONE, false};

const ST_BOUND leftLane7 = {{{1687, 1123}, {1683, 1017}, {1677, 843}, {1675, 780}, {1667, 645}, {1648, 527}, {1626, 454}, {1586, 395}, {1500, 304}, {1420, 260}, {1325, 229}, {1212, 207}, {1114, 195}, {1026, 189}, {906, 185}, {731, 180}, {671, 178}, {518, 173}, {435, 170}, {290, 173}, {210, 175}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane7 = {{{1240, 1180}, {1183, 1035}, {1183, 1035}, {1183, 1035}, {1090, 895}, {1071, 865}, {1071, 865}, {1071, 865}, {1071, 865}, {1071, 865}, {935, 767}, {888, 733}, {888, 733}, {888, 733}, {888, 733}, {656, 642}, {653, 641}, {504, 616}, {369, 595}, {299, 584}, {57, 577}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane7 = {50207, leftLane7, rightLane7, {50205, NONE}, {50197, NONE}, 50209, false, NONE, false};

const ST_BOUND leftLane8 = {{{210, 175}, {435, 170}, {731, 180}, {825, 183}, {1006, 189}, {1114, 195}, {1212, 207}, {1325, 229}, {1420, 260}, {1500, 304}, {1586, 395}, {1626, 454}, {1648, 527}, {1675, 780}, {1687, 1123}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane8 = {{{178, -192}, {422, -200}, {717, -211}, {838, -215}, {1019, -206}, {1183, -178}, {1294, -156}, {1405, -106}, {1567, -29}, {1690, 71}, {1816, 183}, {1880, 272}, {1942, 382}, {2015, 753}, {2020, 1207}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane8 = {50209, leftLane8, rightLane8, {50195, NONE}, {50203, NONE}, 50207, false, NONE, false};

const ST_BOUND leftLane9 = {{{210, 175}, {955, 163}, {1073, 152}, {1459, 117}, {1895, 69}, {2889, -121}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane9 = {{{178, -192}, {926, -245}, {1036, -253}, {1408, -300}, {1847, -354}, {2806, -524}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane9 = {50211, leftLane9, rightLane9, {50195, NONE}, {50199, NONE}, 50213, false, NONE, false};

const ST_BOUND leftLane10 = {{{2889, -121}, {2304, -7}, {1932, 64}, {1768, 83}, {1459, 117}, {1040, 155}, {955, 163}, {541, 170}, {210, 175}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane10 = {{{2999, 251}, {2374, 351}, {1987, 412}, {1809, 440}, {1493, 470}, {1072, 510}, {985, 518}, {547, 554}, {57, 577}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane10 = {50213, leftLane10, rightLane10, {50201, NONE}, {50197, NONE}, 50211, false, NONE, false};

const ST_BOUND leftLane11 = {{{2889, -121}, {2015, 67}, {1945, 93}, {1877, 140}, {1783, 243}, {1728, 367}, {1691, 504}, {1680, 644}, {1687, 1123}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane11 = {{{2999, 251}, {2745, 304}, {2381, 386}, {2293, 413}, {2201, 478}, {2133, 575}, {2095, 681}, {2047, 963}, {2020, 1207}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane11 = {50215, leftLane11, rightLane11, {50201, NONE}, {50203, NONE}, 50217, false, NONE, false};

const ST_BOUND leftLane12 = {{{1687, 1123}, {1682, 786}, {1680, 644}, {1680, 644}, {1690, 517}, {1691, 504}, {1721, 392}, {1728, 367}, {1758, 298}, {1783, 243}, {1783, 243}, {1875, 141}, {1877, 140}, {1907, 119}, {1945, 93}, {1946, 93}, {2015, 67}, {2054, 59}, {2242, 18}, {2889, -121}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane12 = {{{1240, 1180}, {1213, 793}, {1214, 638}, {1220, 588}, {1233, 482}, {1255, 393}, {1285, 274}, {1337, 171}, {1362, 121}, {1452, -18}, {1486, -53}, {1568, -135}, {1644, -189}, {1681, -214}, {1762, -257}, {1808, -281}, {1861, -303}, {1966, -346}, {2151, -401}, {2806, -524}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane12 = {50217, leftLane12, rightLane12, {50205, NONE}, {50199, NONE}, 50215, false, NONE, false};

const ST_LANE laneNet[MAXL] = {lane1, lane2, lane3, lane4, lane5, lane6, lane7, lane8, lane9, lane10, lane11, lane12};

const bool staticObsExists = false;
const ST_RECTANGLE staticObs[MAXSO] = {{{NONE, NONE}, NONE, NONE, NONE}};

const ST_PLANNING planning = {{1251, 262}};


// Generated scenario ends

broadcast chan chooseEgo, chooseObs, begin, update;

ST_DSTATE dStateEgo;       // discrete variables
ST_VARIABLES varsEgo;      // continuous variables
ST_RECTANGLE shapeEgo;     // shape of ego vehicle
hybrid clock D;            /// "cost" of distance used in strategy optimization
clock time;                // global time

double i2d(const int32_t i) {
    double v = i/SCALE;
    return v;
}

int32_t d2i(const double i) {
    int32_t v = fint(i*SCALE);
    return v;
}

double mTimeStep(const double value) {
    return value*TIMESTEPSIZE;
}

int32_t getDisP2P(const ST_DPOINT &amp;p1, const ST_DPOINT &amp;p2) {
    double distance = 0.0;
    double rx1 = i2d(p1.x), ry1 = i2d(p1.y);
    double rx2 = i2d(p2.x), ry2 = i2d(p2.y);
    distance = sqrt(pow(rx1 - rx2, 2) + pow(ry1 - ry2, 2));

    return d2i(distance);
}

// Function to calculate the corner points of a rectangle
void calculateCornerPoints(ST_RECTANGLE veh_state, ST_DPOINT &amp;corners[4]) {
    double halfLength = i2d(veh_state.length)/2.0;
    double halfWidth = i2d(veh_state.width)/2.0;
    double angle = i2d(veh_state.orientation);

    // Calculate the coordinates of each corner point based on the center, length, width, and orientation
    corners[0].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) - halfWidth*sin(angle));
    corners[0].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) + halfWidth*cos(angle));

    corners[1].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) + halfWidth*sin(angle));
    corners[1].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) - halfWidth*cos(angle));

    corners[2].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) + halfWidth*sin(angle));
    corners[2].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) - halfWidth*cos(angle));

    corners[3].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) - halfWidth*sin(angle));
    corners[3].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) + halfWidth*cos(angle));
}

// Function to check if all elements in the vector (size=4) have the same sign
bool same_sign(int32_t vec[4]) {
    int i = 0;
    int sign = (vec[0] &gt;= 0) ? 1 : -1; // Get the sign of the first element
    for (i = 1; i &lt; 4; i++) {
        if ((vec[i] &gt;= 0) != (sign &gt;= 0)) {
            return false; // Different signs found
        }
    }
    return true; // All elements have the same sign
}

// check if pt1 is on the same line defined by pt2-pt3
bool check_online(ST_DPOINT pt1, ST_DPOINT pt2, ST_DPOINT pt3) {
    double dis12, dis13, dis23;

    dis12 = sqrt(pow(pt1.x - pt2.x, 2) + pow(pt1.y - pt2.y, 2));
    dis13 = sqrt(pow(pt1.x - pt3.x, 2) + pow(pt1.y - pt3.y, 2));
    dis23 = sqrt(pow(pt2.x - pt3.x, 2) + pow(pt2.y - pt3.y, 2));
    if (dis12 + dis13 == dis23)
        return true;
    else
        return false; 
}

// Check if any corner of box2 is outside box1
int check_coverage(ST_DPOINT box1[4], ST_DPOINT box2[4]) {
    int i = 0, j = 0;
    int32_t abx = 0, aby = 0, apx = 0, apy = 0;
    int32_t cross_prod[4];
    int inside_sum = 0;
    int is_online = 0;
    // Check if all corners of box2 fall outside the bounding box of box1   
    for (i = 0; i &lt; 4; i++) {
        // get the x y coordinate of the test points
        for (j = 0; j &lt; 4; j++) {
            abx = box1[(j+1)%4].x - box1[j].x; // when j+1=4, back to the first one
            aby = box1[(j+1)%4].y - box1[j].y;
            apx = box2[i].x - box1[j].x;
            apy = box2[i].y - box1[j].y;
            // cross product of ab and ap
            cross_prod[j] = abx*apy - apx*aby;
            // check if on the line
            if (check_online(box2[i], box1[j], box1[(j+1)%4]) == 1)
                is_online = 1;
        }
        // if all the cross production have the same sign, then the test point is within the box1
        if (same_sign(cross_prod) || is_online == 1)
            inside_sum++;
    }
    return inside_sum;
}

// Function to count non-zero elements in a 2D array
int check_pts_num(ST_DPOINT lane_pts[MAXP]) {
    uint16_t count = 0;
    // NONE or 0?
    while (count &lt; MAXP &amp;&amp; (lane_pts[count].x != NONE || lane_pts[count].y != NONE)){
        count++;
    }
    return count;
}

// check if veh_state are not covered by laneNet, or if vehicle rectangle touches laneNet
// can this function call check_inlane_lane_single?
bool check_inlane_laneNet(ST_RECTANGLE veh_state, int &amp;lane, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t i_lane = 0;
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;
    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];

    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);
    for(i_lane = 0; i_lane &lt; MAXL; i_lane++){
        // check the number of points in each lane
        num_box = check_pts_num(laneNet[i_lane].left.points) - 1;
        for (i_box = 0; i_box &lt; num_box; i_box++){
            // define the corner of the road box
            box_corners[0] = laneNet[i_lane].right.points[i_box];
            box_corners[1] = laneNet[i_lane].right.points[i_box + 1];
            box_corners[2] = laneNet[i_lane].left.points[i_box + 1];
            box_corners[3] = laneNet[i_lane].left.points[i_box];
            // check if the inlane status of the vehicle box to the current box
            inlane_pts_num += check_coverage(box_corners, veh_corners);    
        }
    }
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

// check if veh_state are not covered by a single lane, or if vehicle rectangle touches the edge of the lane
bool check_inlane_lane_single(const ST_LANE lane, ST_RECTANGLE veh_state, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;

    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];
    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);

    // check the number of points in the lane
    num_box = check_pts_num(lane.left.points) - 1;
    for (i_box = 0; i_box &lt; num_box; i_box++){
        // define the corner of the road box
        box_corners[0] = lane.right.points[i_box];
        box_corners[1] = lane.right.points[i_box + 1];
        box_corners[2] = lane.left.points[i_box + 1];
        box_corners[3] = lane.left.points[i_box];
        // check if the inlane status of the vehicle box to the current box
        inlane_pts_num += check_coverage(box_corners, veh_corners);         
    }
    
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

int32_t compute_approximating_circle_radius(int ego_length, int ego_width) {
    double length = i2d(ego_length);
    double width = i2d(ego_width);
    double square_length, diagonal_square, approx_radius;

    if (length &lt;= 0 || width &lt;= 0) {
        return -1;
    }

    if (fabs(length) &lt; 1e-6 &amp;&amp; fabs(width) &lt; 1e-6) {
        return 0;
    }
    // Divide rectangle into 3 smaller rectangles
    square_length = length/3.0;
    // Calculate minimum radius
    diagonal_square = sqrt(pow(square_length/2.0, 2) + pow(width/2.0, 2));
    // Round up value
    approx_radius = round(diagonal_square*10.0) / 10.0 + 0.1;

    return d2i(approx_radius);
}

void compute_centers_of_approximation_circles(ST_RECTANGLE veh_rect, ST_DPOINT &amp;centers[2]) {
    double disc_radius, distance_centers, veh_cent_x_double, veh_cent_y_double;

    disc_radius = i2d(compute_approximating_circle_radius(veh_rect.length, veh_rect.width));
    distance_centers = disc_radius/2.0;

    // Compute the center position of first circle (front)
    veh_cent_x_double = i2d(veh_rect.center.x);
    veh_cent_y_double = i2d(veh_rect.center.y);
    centers[0].x = d2i(veh_cent_x_double + (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[0].y = d2i(veh_cent_y_double + (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));

    // Compute the center position of second circle (rear)
    centers[1].x = d2i(veh_cent_x_double - (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[1].y = d2i(veh_cent_y_double - (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));
}



bool check_collision(ST_RECTANGLE veh_st_rect1, ST_RECTANGLE veh_st_rect2, int dis_thres) {    
    // define two vehicles' circle tuple (front and rear)
    ST_DPOINT veh_circle_tuple1[2] = {{0, 0}, {0, 0}};
    ST_DPOINT veh_circle_tuple2[2] = {{0, 0}, {0, 0}};
    double min_dis = FLT_MAX, dis = 0;
    int i, j;    
    //int32_t temp[2][2];
    
    // calculate the centers of the vehicles' circles
    compute_centers_of_approximation_circles(veh_st_rect1, veh_circle_tuple1);
    compute_centers_of_approximation_circles(veh_st_rect2, veh_circle_tuple2);

    for (i = 0; i &lt; 2; ++i) {
        for (j = 0; j &lt; 2; ++j) {
            dis = sqrt(pow(veh_circle_tuple1[i].x - veh_circle_tuple2[j].x, 2) + pow(veh_circle_tuple1[i].y - veh_circle_tuple2[j].y, 2));
            //temp[i][j] = d2i(dis);
            min_dis = fmin(min_dis, dis);
        }
    }
    if (dis_thres &gt; min_dis)
        return true;
    else
        return false;
}
   
</declaration>
	<template>
		<name x="5" y="5">MovingObs</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_PAIR &amp;trajectory[MAXTP]</parameter>
		<declaration>ST_VARIABLES vars;  // continuous variables
ST_DSTATE dState;   // discrete state
uint8_t pc = 0;     // policy counter
uint8_t tc = 0;     // time counter
ST_RECTANGLE self;

void decisionMaking() {
    if(pc &lt; MAXTP &amp;&amp; tc == trajectory[pc].time) {
        // predefined trajectory starts
        vars.x = trajectory[pc].cState.position.x;
        vars.y = trajectory[pc].cState.position.y;
        vars.velocity = mTimeStep(trajectory[pc].cState.velocity);

        vars.acceleration = mTimeStep(trajectory[pc].cState.acceleration);
        vars.yawRate = mTimeStep(trajectory[pc].cState.yawRate);

        dState.acceleration = d2i(mTimeStep(trajectory[pc].cState.acceleration));
        dState.yawRate = d2i(mTimeStep(trajectory[pc].cState.yawRate));
        pc++;
    }
    else if(pc &lt; MAXTP) {
        tc++;
    }
    else if(pc &gt;= MAXTP - 1) {
        vars.velocity = 0;
        vars.acceleration = 0;
        vars.yawRate = 0;
        dState.velocity = 0;
        dState.acceleration = 0;
        dState.yawRate = 0;
    }
}

void initCon(ST_VARIABLES &amp;vars, const ST_CSTATE &amp;initCS) {
    vars.x = initCS.position.x;
    vars.y = initCS.position.y;
    vars.velocity = mTimeStep(initCS.velocity);
    vars.orientation = initCS.orientation;
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);
    time = 0;  
}

void initDis(ST_DSTATE &amp;dState, const ST_CSTATE &amp;initCS) {
    dState.position.x = d2i(initCS.position.x);
    dState.position.y = d2i(initCS.position.y);
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.orientation = d2i(initCS.orientation);
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;

    dStateEgo.detection.collide |= check_collision(shapeEgo, shape, THRESHOLD);
    dState.detection.collide = dStateEgo.detection.collide;
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}

void initialize() {
    pc = 0;
    tc = 0;
    initCon(vars,initCS);
    initDis(dState,initCS);
    self = shape;
}









</declaration>
		<location id="id0" x="-102" y="-34">
			<name x="-76" y="-34">Move</name>
			<label kind="invariant" x="-255" y="-17">vars.x' == vars.velocity*cos(vars.orientation) &amp;&amp;
vars.y' == vars.velocity*sin(vars.orientation) &amp;&amp;
vars.velocity' == vars.acceleration &amp;&amp;
vars.orientation' == vars.yawRate &amp;&amp;
vars.yawRate' == 0 &amp;&amp;
vars.acceleration' == 0</label>
		</location>
		<init ref="id0"/>
		<transition id="id1" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-161" y="-119">update?</label>
			<label kind="assignment" x="-161" y="-102">updateDis(dState,self)</label>
			<nail x="-136" y="-102"/>
			<nail x="-68" y="-102"/>
		</transition>
		<transition id="id2" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-246" y="-68">begin?</label>
			<label kind="assignment" x="-246" y="-51">initialize()</label>
			<nail x="-170" y="-68"/>
			<nail x="-170" y="-34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-34" y="-68">chooseObs?</label>
			<label kind="assignment" x="-42" y="-51">decisionMaking()</label>
			<nail x="-34" y="-34"/>
			<nail x="-34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_RULES &amp;rules</parameter>
		<declaration>typedef int[0,0] BRAKE_t;    // 1 gear of brake force
typedef int[0,0] PUSH_t;     // 1 gear of push force
typedef int[0,1] TURN_t;     // 2 speeds of turning 

const int8_t Brake[3] = {d2i(-0.1), d2i(-0.2), d2i(-0.3)};
const int8_t Push[3] = {d2i(0.1), d2i(0.2), d2i(0.3)};
const int8_t Turn[2] = {d2i(0.1), d2i(-0.1)};
const bool CONSTANTSPEED = true;

void opConst() {
    dStateEgo.acceleration = 0;
    varsEgo.acceleration = 0;
}

void opAcc(int gear) {
    dStateEgo.acceleration = Push[gear];
    varsEgo.acceleration = i2d(Push[gear]);
}

void opBrake(int gear) {
    dStateEgo.acceleration = Brake[gear];
    varsEgo.acceleration = i2d(Brake[gear]);
}

void opTurn(int dir) {
    int nr = Turn[dir];
    int no = dStateEgo.orientation;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(no);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int nx = shapeEgo.center.x + d2i(vx) * P;
    int ny = shapeEgo.center.y + d2i(vy) * P;

    dStateEgo.yawRate = Turn[dir];
    varsEgo.yawRate = i2d(Turn[dir]);
}

void keep() {
    dStateEgo.yawRate = 0;
    varsEgo.yawRate = 0.0;
}

bool canAcc(int gear) {
    int nextAcc = Push[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextAcc &lt;= rules.maxVelocity) 
        return true;
    return false;
}

bool canDec(int gear) {
    int nextDec = Brake[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextDec &gt;= rules.minVelocity) 
        return true;
    return false;
}

bool canTurn(int dir) {
    int nextRate = Turn[dir];
    int nextOrientation = dStateEgo.orientation + P*nextRate;
    ST_RECTANGLE nextShape = shape;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(nextOrientation);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    bool outroad = false;

    nextShape.center.x = shapeEgo.center.x + d2i(vx) * P;
    nextShape.center.y = shapeEgo.center.y + d2i(vy) * P;
    nextShape.orientation = nextOrientation;
    outroad = !check_inlane_laneNet(nextShape, lane, veh_corners, box_corners);

    if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation &amp;&amp; !outroad) 
    //if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation)
        return true;
    return false;
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    uint8_t inlane_pts_num = 0;

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;
    dState.detection.outside = !check_inlane_laneNet(shape, lane, veh_corners, box_corners);
    dState.detection.reach = (getDisP2P(shape.center, planning.goal) &lt;= THRESHOLD);
    if(staticObsExists) {
        for(i = 0; i &lt; MAXSO; i++) {
            dState.detection.collide |= check_collision(shape, staticObs[i], THRESHOLD);
        }
    }
}

void initDis(ST_DSTATE &amp;dState) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    if(initCS.position.x == NONE || initCS.position.y == NONE) {
        dState.position = middleDStart;
        dState.orientation = d2i(angle);
    } else {
        dState.position.x = d2i(initCS.position.x);
        dState.position.y = d2i(initCS.position.y);
        dState.orientation = d2i(initCS.orientation);
    }
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));

    dState.detection.collide = false;
    dState.detection.outside = false;
    dState.detection.reach = false;
}

void initialize() {
    initDis(dStateEgo);
    shapeEgo = shape;
    shapeEgo.center = dStateEgo.position;
}









</declaration>
		<location id="id4" x="-340" y="-136">
			<name x="-433" y="-161">Turn_Const</name>
			<label kind="comments" x="-34" y="-51">One cannot turn and 
acc or brake 
simutaneously.</label>
		</location>
		<location id="id5" x="-68" y="136">
			<name x="-187" y="136">Straight_Dec</name>
		</location>
		<location id="id6" x="-68" y="-136">
			<name x="-51" y="-170">Straight_Acc</name>
		</location>
		<location id="id7" x="-204" y="0">
			<name x="-289" y="-17">Choose</name>
			<committed/>
		</location>
		<location id="id8" x="-340" y="136">
			<name x="-476" y="161">Straight_Const</name>
		</location>
		<init ref="id8"/>
		<transition id="id9" controllable="false">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-280" y="187">begin?</label>
			<label kind="assignment" x="-195" y="187">initialize()</label>
			<nail x="-68" y="204"/>
			<nail x="-340" y="204"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-424" y="-221">begin?</label>
			<label kind="assignment" x="-424" y="-204">initialize()</label>
			<nail x="-68" y="-204"/>
			<nail x="-442" y="-204"/>
			<nail x="-442" y="0"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id4"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-433" y="-34">begin?</label>
			<label kind="assignment" x="-433" y="-17">initialize()</label>
			<nail x="-408" y="-136"/>
			<nail x="-408" y="0"/>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-306" y="144">update?</label>
			<label kind="assignment" x="-306" y="161">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-331" y="170"/>
			<nail x="-306" y="170"/>
		</transition>
		<transition id="id13" controllable="false">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-25" y="93">update?</label>
			<label kind="assignment" x="-25" y="119">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="102"/>
			<nail x="-34" y="136"/>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-42" y="-144">update?</label>
			<label kind="assignment" x="-42" y="-127">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="-136"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-314" y="-187">update?</label>
			<label kind="assignment" x="-314" y="-170">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-306" y="-170"/>
			<nail x="-340" y="-170"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-357" y="-68">chooseEgo?</label>
			<label kind="assignment" x="-357" y="-51">keep()</label>
			<label kind="comments" x="-34" y="25">Keeps moving with 
this angle</label>
			<nail x="-340" y="-68"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-467" y="102">begin?</label>
			<label kind="assignment" x="-467" y="119">initialize()</label>
			<nail x="-374" y="102"/>
			<nail x="-374" y="127"/>
		</transition>
		<transition id="id18">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="select" x="-263" y="-93">d:TURN_t</label>
			<label kind="guard" x="-263" y="-76">canTurn(d)</label>
			<label kind="assignment" x="-263" y="-59">opTurn(d)</label>
			<nail x="-272" y="-136"/>
		</transition>
		<transition id="id19">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="102">chooseEgo?</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition id="id20">
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="select" x="-144" y="17">f:BRAKE_t</label>
			<label kind="guard" x="-144" y="34">canDec(f)</label>
			<label kind="assignment" x="-144" y="51">opBrake(f)</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition id="id21">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="-119">chooseEgo?</label>
			<nail x="-136" y="-136"/>
		</transition>
		<transition id="id22">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-136" y="-76">f:PUSH_t</label>
			<label kind="guard" x="-136" y="-59">canAcc(f)</label>
			<label kind="assignment" x="-136" y="-42">opAcc(f)</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition id="id23">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-340" y="51">opConst()</label>
			<nail x="-340" y="68"/>
		</transition>
		<transition id="id24">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-314" y="102">chooseEgo?</label>
			<nail x="-272" y="136"/>
		</transition>
	</template>
	<template>
		<name>Decisions</name>
		<declaration>clock timer;
int counter = 0;</declaration>
		<location id="id25" x="102" y="68">
			<name x="110" y="42">Idle</name>
			<label kind="invariant" x="85" y="85">timer&lt;=P</label>
		</location>
		<location id="id26" x="102" y="-34">
			<name x="92" y="-68">Done</name>
			<urgent/>
		</location>
		<location id="id27" x="-68" y="-34">
			<name x="-78" y="-68">ObsGo</name>
			<urgent/>
		</location>
		<location id="id28" x="-204" y="-34">
			<name x="-214" y="-68">EgoGo</name>
			<urgent/>
		</location>
		<location id="id29" x="-340" y="-34">
			<name x="-350" y="-68">Start</name>
			<urgent/>
		</location>
		<init ref="id29"/>
		<transition id="id30" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-348" y="51">counter==MAXTIME</label>
			<label kind="synchronisation" x="-348" y="68">begin!</label>
			<label kind="assignment" x="-348" y="85">timer=0,counter=0</label>
			<nail x="68" y="102"/>
			<nail x="-340" y="102"/>
			<nail x="-340" y="0"/>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-280" y="-59">begin!</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-170" y="0">timer==P&amp;&amp;
counter!=MAXTIME</label>
			<label kind="synchronisation" x="-170" y="42">update!</label>
			<label kind="assignment" x="-102" y="42">timer=0,counter++</label>
			<nail x="-204" y="68"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="59" y="-8">timer=0</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-34" y="-59">chooseObs!</label>
		</transition>
		<transition id="id35" controllable="false">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-170" y="-59">chooseEgo!</label>
		</transition>
	</template>
	<template>
		<name>Dynamics</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS</parameter>
		<declaration>void initCon(ST_VARIABLES &amp;vars) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    if(initCS.position.x == NONE || initCS.position.y == NONE) {
        vars.x = i2d(middleDStart.x);
        vars.y = i2d(middleDStart.y);
        vars.orientation = angle;
    } else {
        vars.x = initCS.position.x;
        vars.y = initCS.position.y;
        vars.orientation = initCS.orientation;
    }
    vars.velocity = mTimeStep(initCS.velocity);
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);

    time = 0;
    if(dStateEgo.detection.reach) 
        D = 0; // only reset the reward function when reaching the goal
    if(dStateEgo.detection.collide || dStateEgo.detection.outside)
        D = D + 100; // punish the ego when it collides or goes outside the road    
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}</declaration>
		<location id="id36" x="0" y="0">
			<name x="-59" y="-8">Move</name>
			<label kind="invariant" x="-161" y="17">varsEgo.x' == varsEgo.velocity*cos(varsEgo.orientation) &amp;&amp;
varsEgo.y' == varsEgo.velocity*sin(varsEgo.orientation) &amp;&amp;
varsEgo.velocity' == varsEgo.acceleration &amp;&amp;
varsEgo.orientation' == varsEgo.yawRate &amp;&amp;
varsEgo.yawRate' == 0 &amp;&amp;
varsEgo.acceleration' == 0 &amp;&amp;
D' == getDisP2P(dStateEgo.position, planning.goal) 
      - dStateEgo.detection.reach * 100 
      + dStateEgo.detection.collide * 50 
      + dStateEgo.detection.outside * 50</label>
		</location>
		<init ref="id36"/>
		<transition id="id37" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="68" y="-68">update?</label>
			<label kind="assignment" x="68" y="-51">updateCon(varsEgo)</label>
			<nail x="68" y="-68"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition id="id38" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-161" y="-68">begin?</label>
			<label kind="assignment" x="-161" y="-51">initCon(varsEgo)</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-68"/>
		</transition>
	</template>
	<system>// Generated moving obstacles starts
const ST_CSTATE initCS1 = {{80.320298, -8.3093301}, 6.1952641, 3.0793601, 0.0, 0.0};
const ST_RECTANGLE shapeObs1 = {{8032, -830}, 200, 500, 0};
const ST_PAIR PHOLDER = {NONE,{{NONE,NONE},NONE,NONE,NONE,NONE}};
const ST_PAIR trajectory1[MAXTP] = {{1, {{79.701975, -8.2708005}, 6.1952641, 3.0737881, 0, 0}}, {2, {{79.083652, -8.232271}, 6.1952641, 3.0682161, 0, 0}}, {3, {{78.465627, -8.1894367}, 6.1952641, 3.0631182, 0, 0}}, {4, {{77.8479, -8.1422978}, 6.1952641, 3.0584945, 0, 0}}, {5, {{77.230172, -8.0951589}, 6.1952641, 3.0538707, 0, 0}}, {6, {{76.613032, -8.0408829}, 6.1952641, 3.0484841, 0, 0}}, {7, {{75.995893, -7.986607}, 6.1952641, 3.0430976, 0, 0}}, {8, {{75.379146, -7.9281782}, 6.1952641, 3.0377846, 0, 0}}, {9, {{74.762792, -7.8655967}, 6.1952641, 3.0325452, 0, 0}}, {10, {{74.146438, -7.8030151}, 6.1952641, 3.0273058, 0, 0}}, {11, {{73.53096, -7.7323661}, 6.1952641, 3.0219394, 0, 0}}, {12, {{72.915481, -7.6617172}, 6.1952641, 3.016573, 0, 0}}, {13, {{72.300503, -7.5869427}, 6.1952641, 3.0112008, 0, 0}}, {14, {{71.686026, -7.5080428}, 6.1952641, 3.0058229, 0, 0}}, {15, {{71.071548, -7.4291429}, 6.1952641, 3.000445, 0, 0}}, {16, {{70.458188, -7.3419891}, 6.1952641, 2.995347, 0, 0}}, {17, {{69.844829, -7.2548354}, 6.1952641, 2.9902491, 0, 0}}, {18, {{69.232049, -7.1637765}, 6.1952641, 2.985617, 0, 0}}, {19, {{68.619848, -7.0688124}, 6.1952641, 2.9814507, 0, 0}}, {20, {{68.007647, -6.9738484}, 6.1952641, 2.9772844, 0, 0}}, {21, {{67.396465, -6.8725127}, 6.1952641, 2.9747561, 0, 0}}, {22, {{66.785284, -6.771177}, 6.1952641, 2.9722278, 0, 0}}, {23, {{66.174428, -6.6679107}, 6.1952641, 2.9696609, 0, 0}}, {24, {{65.563899, -6.5627138}, 6.1952641, 2.9670554, 0, 0}}, {25, {{64.95337, -6.4575168}, 6.1952641, 2.9644499, 0, 0}}, {26, {{64.343538, -6.3483452}, 6.1952641, 2.9624561, 0, 0}}, {27, {{63.733707, -6.2391737}, 6.1952641, 2.9604622, 0, 0}}, {28, {{63.124151, -6.1284829}, 6.1952641, 2.9583385, 0, 0}}, {29, {{62.514872, -6.016273}, 6.1952641, 2.9560848, 0, 0}}, {30, {{61.905592, -5.9040631}, 6.1952641, 2.9538311, 0, 0}}, {31, {{61.296954, -5.7884221}, 6.1952641, 2.9522677, 0, 0}}, {32, {{60.688316, -5.6727812}, 6.1952641, 2.9507042, 0, 0}}, {33, {{60.079907, -5.5559512}, 6.1952641, 2.9492383, 0, 0}}, {34, {{59.471726, -5.4379323}, 6.1952641, 2.94787, 0, 0}}, {35, {{58.863545, -5.3199133}, 6.1952641, 2.9465016, 0, 0}}, {36, {{58.255771, -5.1998144}, 6.1952641, 2.945835, 0, 0}}, {37, {{57.647996, -5.0797155}, 6.1952641, 2.9451683, 0, 0}}, {38, {{57.040323, -4.9591103}, 6.1952641, 2.9446099, 0, 0}}, {39, {{56.43275, -4.8379988}, 6.1952641, 2.9441598, 0, 0}}, {40, {{55.825177, -4.7168872}, 6.1952641, 2.9437097, 0, 0}}, {41, {{55.217741, -4.595092}, 6.1952641, 2.9433919, 0, 0}}, {42, {{54.610304, -4.4732967}, 6.1952641, 2.943074, 0, 0}}, {43, {{54.002916, -4.3512602}, 6.1952641, 2.9427778, 0, 0}}, {44, {{53.395577, -4.2289824}, 6.1952641, 2.9425032, 0, 0}}, {45, {{52.788237, -4.1067046}, 6.1952641, 2.9422286, 0, 0}}, {46, {{52.180982, -3.9840099}, 6.1952641, 2.9419871, 0, 0}}, {47, {{51.573727, -3.8613152}, 6.1952641, 2.9417456, 0, 0}}, {48, {{50.966509, -3.7384371}, 6.1952641, 2.9415571, 0, 0}}, {49, {{50.359328, -3.6153757}, 6.1952641, 2.9414216, 0, 0}}, {50, {{49.752147, -3.4923143}, 6.1952641, 2.9412862, 0, 0}}, {51, {{49.145007, -3.3690474}, 6.1952641, 2.941064, 0, 0}}, {52, {{48.537868, -3.2457805}, 6.1952641, 2.9408418, 0, 0}}, {53, {{47.930763, -3.1223449}, 6.1952641, 2.9406751, 0, 0}}, {54, {{47.323692, -2.9987407}, 6.1952641, 2.9405638, 0, 0}}, {55, {{46.716622, -2.8751365}, 6.1952641, 2.9404526, 0, 0}}, {56, {{46.109586, -2.7513635}, 6.1952641, 2.940317, 0, 0}}, {57, {{45.502549, -2.6275906}, 6.1952641, 2.9401813, 0, 0}}, {58, {{44.895534, -2.5037147}, 6.1952641, 2.9400516, 0, 0}}, {59, {{44.288539, -2.3797358}, 6.1952641, 2.9399278, 0, 0}}, {60, {{43.681545, -2.255757}, 6.1952641, 2.939804, 0, 0}}, {61, {{43.074589, -2.1315903}, 6.1952641, 2.9397144, 0, 0}}, {62, {{42.467634, -2.0074236}, 6.1952641, 2.9396247, 0, 0}}, {63, {{41.860692, -1.8831889}, 6.1952641, 2.9396809, 0, 0}}, {64, {{41.253763, -1.7588861}, 6.1952641, 2.939883, 0, 0}}, {65, {{40.646835, -1.6345833}, 6.1952641, 2.940085, 0, 0}}, {66, {{40.039843, -1.5105869}, 6.1952641, 2.9402288, 0, 0}}, {67, {{39.432851, -1.3865905}, 6.1952641, 2.9403727, 0, 0}}, {68, {{38.825837, -1.2627032}, 6.1952641, 2.9406266, 0, 0}}, {69, {{38.2188, -1.1389251}, 6.1952641, 2.9409906, 0, 0}}, {70, {{37.611764, -1.015147}, 6.1952641, 2.9413546, 0, 0}}, {71, {{37.004614, -0.89192123}, 6.1952641, 2.9415846, 0, 0}}, {72, {{36.397465, -0.76869546}, 6.1952641, 2.9418147, 0, 0}}, {73, {{35.79028, -0.64564421}, 6.1952641, 2.942189, 0, 0}}, {74, {{35.183059, -0.5227675}, 6.1952641, 2.9427076, 0, 0}}, {75, {{34.575838, -0.39989079}, 6.1952641, 2.9432262, 0, 0}}, {76, {{33.968458, -0.27780131}, 6.1952641, 2.9438094, 0, 0}}, {77, {{33.361077, -0.15571182}, 6.1952641, 2.9443927, 0, 0}}, {78, {{32.753608, -0.034065101}, 6.1952641, 2.9450661, 0, 0}}, {79, {{32.146049, 0.087138854}, 6.1952641, 2.9458298, 0, 0}}, {80, {{31.53849, 0.20834281}, 6.1952641, 2.9465935, 0, 0}}, {81, {{30.930698, 0.32838703}, 6.1952641, 2.9478267, 0, 0}}, {82, {{30.322907, 0.44843124}, 6.1952641, 2.9490599, 0, 0}}, {83, {{29.71493, 0.56753858}, 6.1952641, 2.9507798, 0, 0}}, {84, {{29.106768, 0.68570905}, 6.1952641, 2.9529864, 0, 0}}, {85, {{28.498606, 0.80387952}, 6.1952641, 2.955193, 0, 0}}, {86, {{27.889792, 0.91869511}, 6.1952641, 2.9592328, 0, 0}}, {87, {{27.280978, 1.0335107}, 6.1952641, 2.9632725, 0, 0}}, {88, {{26.671603, 1.1452484}, 6.1952641, 2.9656616, 0, 0}}, {89, {{26.061668, 1.2539083}, 6.1952641, 2.9664, 0, 0}}, {90, {{25.451733, 1.3625681}, 6.1952641, 2.9671384, 0, 0}}, {91, {{24.84161, 1.4700999}, 6.1952641, 2.9672727, 0, 0}}, {92, {{24.231487, 1.5776316}, 6.1952641, 2.967407, 0, 0}}, {93, {{23.621345, 1.685061}, 6.1952641, 2.967703, 0, 0}}, {94, {{23.011185, 1.7923879}, 6.1952641, 2.9681609, 0, 0}}, {95, {{22.401025, 1.8997149}, 6.1952641, 2.9686187, 0, 0}}, {96, {{21.790738, 2.0063442}, 6.1952641, 2.9730298, 0, 0}}, {97, {{21.180451, 2.1129735}, 6.1952641, 2.9774409, 0, 0}}, {98, {{20.569593, 2.2162348}, 6.1952641, 2.9852579, 0, 0}}, {99, {{19.958166, 2.3161281}, 6.1952641, 2.996481, 0, 0}}, {100, {{19.346739, 2.4160213}, 6.1952641, 3.0077041, 0, 0}}, {101, {{18.732782, 2.4987178}, 6.1952641, 3.0182175, 0, 0}}, {102, {{18.118825, 2.5814143}, 6.1952641, 3.028731, 0, 0}}, {103, {{17.503872, 2.6560307}, 6.1952641, 3.0355168, 0, 0}}, {104, {{16.887923, 2.7225669}, 6.1952641, 3.0385749, 0, 0}}, {105, {{16.271973, 2.7891031}, 6.1952641, 3.041633, 0, 0}}, {106, {{15.655537, 2.8509279}, 6.1952641, 3.0436348, 0, 0}}, {107, {{15.039102, 2.9127526}, 6.1952641, 3.0456366, 0, 0}}, {108, {{14.422516, 2.9730345}, 6.1952641, 3.0471473, 0, 0}}, {109, {{13.805779, 3.0317735}, 6.1952641, 3.048167, 0, 0}}, {110, {{13.189043, 3.0905125}, 6.1952641, 3.0491867, 0, 0}}, {111, {{12.572159, 3.147679}, 6.1952641, 3.0507749, 0, 0}}, {112, {{11.955275, 3.2048455}, 6.1952641, 3.052363, 0, 0}}, {113, {{11.338281, 3.2607872}, 6.1952641, 3.0585825, 0, 0}}, {114, {{10.721176, 3.3155039}, 6.1952641, 3.0694332, 0, 0}}, {115, {{10.104072, 3.3702206}, 6.1952641, 3.0802839, 0, 0}}, {116, {{9.4857423, 3.4081772}, 6.1952641, 3.0844381, 0, 0}}, {117, {{8.8674126, 3.4461338}, 6.1952641, 3.0885922, 0, 0}}, {118, {{8.2488861, 3.4808795}, 6.1952641, 3.0917486, 0, 0}}, {119, {{7.6301629, 3.5124142}, 6.1952641, 3.0939073, 0, 0}}, {120, {{7.0114397, 3.5439489}, 6.1952641, 3.096066, 0, 0}}, {121, {{6.3925564, 3.5721441}, 6.1952641, 3.0982418, 0, 0}}, {122, {{5.7736731, 3.6003392}, 6.1952641, 3.1004177, 0, 0}}, {123, {{5.1547175, 3.6268509}, 6.1952641, 3.1034408, 0, 0}}, {124, {{4.5356898, 3.6516792}, 6.1952641, 3.1073111, 0, 0}}, {125, {{3.916662, 3.6765075}, 6.1952641, 3.1111814, 0, 0}}, {126, {{3.2974283, 3.695345}, 6.1952641, 3.1151144, 0, 0}}, {127, {{2.6781946, 3.7141825}, 6.1952641, 3.1190473, 0, 0}}, {128, {{2.0588811, 3.7299753}, 6.1952641, 3.1220793, 0, 0}}, {129, {{1.4394877, 3.7427235}, 6.1952641, 3.1242102, 0, 0}}, {130, {{0.82009429, 3.7554717}, 6.1952641, 3.1263411, 0, 0}}, {131, {{0.20064027, 3.7649201}, 6.1952641, 3.127281, 0, 0}}, {132, {{-0.41881376, 3.7743685}, 6.1952641, 3.1282209, 0, 0}}, {133, {{-1.0382781, 3.7830891}, 6.1952641, 3.1290203, 0, 0}}, {134, {{-1.6577527, 3.7910819}, 6.1952641, 3.1296793, 0, 0}}, {135, {{-2.2772274, 3.7990747}, 6.1952641, 3.1303383, 0, 0}}, {136, {{-2.8967145, 3.8060469}, 6.1952641, 3.1308622, 0, 0}}, {137, {{-3.5162016, 3.8130192}, 6.1952641, 3.1313861, 0, 0}}, {138, {{-4.135693, 3.8195857}, 6.1952641, 3.1317226, 0, 0}}, {139, {{-4.7551887, 3.8257466}, 6.1952641, 3.1318715, 0, 0}}, {140, {{-5.3746844, 3.8319074}, 6.1952641, 3.1320204, 0, 0}}, {141, {{-5.9941824, 3.8378376}, 6.1952641, 3.1321361, 0, 0}}, {142, {{-6.6136804, 3.8437677}, 6.1952641, 3.1322518, 0, 0}}, {143, {{-7.2331793, 3.8496083}, 6.1952641, 3.1324004, 0, 0}}, {144, {{-7.852679, 3.8553592}, 6.1952641, 3.1325817, 0, 0}}, {145, {{-8.4721787, 3.8611101}, 6.1952641, 3.1327631, 0, 0}}, {146, {{-9.0916808, 3.8665801}, 6.1952641, 3.1327631, 0, 0}}, {147, {{-9.7111829, 3.8720502}, 6.1952641, 3.1327631, 0, 0}}};
obs1 = MovingObs(1, initCS1, shapeObs1, trajectory1);
const ST_CSTATE initCS2 = {{-52.908469, -4.926314}, 2.8023216, 0.27184537, 0.0, 0.0};
const ST_RECTANGLE shapeObs2 = {{-5290, -492}, 200, 500, 0};
const ST_PAIR trajectory2[MAXTP] = {{1, {{-52.638528, -4.851069}, 2.8023216, 0.27097696, 0, 0}}, {2, {{-52.368587, -4.775824}, 2.8023216, 0.27010855, 0, 0}}, {3, {{-52.098564, -4.7008722}, 2.8023216, 0.2692015, 0, 0}}, {4, {{-51.828461, -4.6262135}, 2.8023216, 0.26825581, 0, 0}}, {5, {{-51.558357, -4.5515548}, 2.8023216, 0.26731011, 0, 0}}, {6, {{-51.288077, -4.4775349}, 2.8023216, 0.26555528, 0, 0}}, {7, {{-51.017798, -4.403515}, 2.8023216, 0.26380045, 0, 0}}, {8, {{-50.747357, -4.3300882}, 2.8023216, 0.26288883, 0, 0}}, {9, {{-50.476755, -4.2572547}, 2.8023216, 0.26282042, 0, 0}}, {10, {{-50.206153, -4.1844211}, 2.8023216, 0.26275201, 0, 0}}, {11, {{-49.935539, -4.1116338}, 2.8023216, 0.26260939, 0, 0}}, {12, {{-49.664924, -4.0388465}, 2.8023216, 0.26246676, 0, 0}}, {13, {{-49.394297, -3.9661075}, 2.8023216, 0.26225572, 0, 0}}, {14, {{-49.123656, -3.8934167}, 2.8023216, 0.26197627, 0, 0}}, {15, {{-48.853016, -3.8207259}, 2.8023216, 0.26169682, 0, 0}}, {16, {{-48.582325, -3.7482241}, 2.8023216, 0.26043539, 0, 0}}, {17, {{-48.311634, -3.6757224}, 2.8023216, 0.25917396, 0, 0}}, {18, {{-48.040828, -3.6036475}, 2.8023216, 0.25731868, 0, 0}}, {19, {{-47.769909, -3.5319994}, 2.8023216, 0.25486955, 0, 0}}, {20, {{-47.498989, -3.4603514}, 2.8023216, 0.25242041, 0, 0}}, {21, {{-47.227638, -3.3903641}, 2.8023216, 0.24927561, 0, 0}}, {22, {{-46.956287, -3.3203768}, 2.8023216, 0.24613082, 0, 0}}, {23, {{-46.684662, -3.2514566}, 2.8023216, 0.23436372, 0, 0}}, {24, {{-46.412765, -3.1836036}, 2.8023216, 0.21397433, 0, 0}}, {25, {{-46.140868, -3.1157506}, 2.8023216, 0.19358493, 0, 0}}, {26, {{-45.865862, -3.0618384}, 2.8023216, 0.19104731, 0, 0}}, {27, {{-45.590855, -3.0079263}, 2.8023216, 0.1885097, 0, 0}}, {28, {{-45.315684, -2.9548877}, 2.8023216, 0.18624672, 0, 0}}, {29, {{-45.040349, -2.9027226}, 2.8023216, 0.18425837, 0, 0}}, {30, {{-44.765014, -2.8505575}, 2.8023216, 0.18227003, 0, 0}}, {31, {{-44.489422, -2.7997616}, 2.8023216, 0.1812138, 0, 0}}, {32, {{-44.213831, -2.7489657}, 2.8023216, 0.18015757, 0, 0}}, {33, {{-43.938173, -2.6985339}, 2.8023216, 0.17922503, 0, 0}}, {34, {{-43.662448, -2.648466}, 2.8023216, 0.17841618, 0, 0}}, {35, {{-43.386724, -2.5983982}, 2.8023216, 0.17760733, 0, 0}}, {36, {{-43.110899, -2.548888}, 2.8023216, 0.17664543, 0, 0}}, {37, {{-42.835074, -2.4993778}, 2.8023216, 0.17568353, 0, 0}}, {38, {{-42.55919, -2.4501993}, 2.8023216, 0.17444141, 0, 0}}, {39, {{-42.283247, -2.4013524}, 2.8023216, 0.17291908, 0, 0}}, {40, {{-42.007303, -2.3525055}, 2.8023216, 0.17139674, 0, 0}}, {41, {{-41.731173, -2.3047087}, 2.8023216, 0.16418191, 0, 0}}, {42, {{-41.455042, -2.2569119}, 2.8023216, 0.15696708, 0, 0}}, {43, {{-41.178505, -2.2116095}, 2.8023216, 0.15113795, 0, 0}}, {44, {{-40.901562, -2.1688014}, 2.8023216, 0.14669452, 0, 0}}, {45, {{-40.624619, -2.1259934}, 2.8023216, 0.14225109, 0, 0}}, {46, {{-40.347225, -2.0862654}, 2.8023216, 0.13801793, 0, 0}}, {47, {{-40.06983, -2.0465374}, 2.8023216, 0.13378478, 0, 0}}, {48, {{-39.792228, -2.0082776}, 2.8023216, 0.13082932, 0, 0}}, {49, {{-39.514418, -1.971486}, 2.8023216, 0.12915157, 0, 0}}, {50, {{-39.236608, -1.9346944}, 2.8023216, 0.12747382, 0, 0}}, {51, {{-38.958649, -1.8990687}, 2.8023216, 0.12695728, 0, 0}}, {52, {{-38.68069, -1.863443}, 2.8023216, 0.12644074, 0, 0}}, {53, {{-38.402708, -1.8279968}, 2.8023216, 0.12596752, 0, 0}}, {54, {{-38.124703, -1.7927301}, 2.8023216, 0.12553763, 0, 0}}, {55, {{-37.846698, -1.7574634}, 2.8023216, 0.12510774, 0, 0}}, {56, {{-37.568656, -1.7224955}, 2.8023216, 0.12470707, 0, 0}}, {57, {{-37.290613, -1.6875276}, 2.8023216, 0.1243064, 0, 0}}, {58, {{-37.012553, -1.652699}, 2.8023216, 0.12349654, 0, 0}}, {59, {{-36.734476, -1.6180097}, 2.8023216, 0.12227747, 0, 0}}, {60, {{-36.456399, -1.5833203}, 2.8023216, 0.12105841, 0, 0}}, {61, {{-36.178217, -1.5494786}, 2.8023216, 0.11990432, 0, 0}}, {62, {{-35.900036, -1.5156369}, 2.8023216, 0.11875023, 0, 0}}, {63, {{-35.621806, -1.4821966}, 2.8023216, 0.1173737, 0, 0}}, {64, {{-35.343529, -1.4491577}, 2.8023216, 0.11577475, 0, 0}}, {65, {{-35.065251, -1.4161189}, 2.8023216, 0.1141758, 0, 0}}, {66, {{-34.786843, -1.3841925}, 2.8023216, 0.11243904, 0, 0}}, {67, {{-34.508435, -1.3522662}, 2.8023216, 0.11070228, 0, 0}}, {68, {{-34.229959, -1.3209444}, 2.8023216, 0.10933957, 0, 0}}, {69, {{-33.951415, -1.2902273}, 2.8023216, 0.1083509, 0, 0}}, {70, {{-33.672871, -1.2595101}, 2.8023216, 0.10736224, 0, 0}}, {71, {{-33.394253, -1.2294815}, 2.8023216, 0.10641424, 0, 0}}, {72, {{-33.115634, -1.1994529}, 2.8023216, 0.10546625, 0, 0}}, {73, {{-32.83698, -1.1697545}, 2.8023216, 0.10429749, 0, 0}}, {74, {{-32.558291, -1.1403863}, 2.8023216, 0.10290796, 0, 0}}, {75, {{-32.279601, -1.1110181}, 2.8023216, 0.10151843, 0, 0}}, {76, {{-32.000811, -1.0826182}, 2.8023216, 0.10077234, 0, 0}}, {77, {{-31.722022, -1.0542183}, 2.8023216, 0.10002625, 0, 0}}, {78, {{-31.443206, -1.0260784}, 2.8023216, 0.099287038, 0, 0}}, {79, {{-31.164365, -0.99819858}, 2.8023216, 0.098554697, 0, 0}}, {80, {{-30.885523, -0.97031876}, 2.8023216, 0.097822357, 0, 0}}, {81, {{-30.606631, -0.94294949}, 2.8023216, 0.096689623, 0, 0}}, {82, {{-30.327738, -0.91558022}, 2.8023216, 0.095556889, 0, 0}}, {83, {{-30.048808, -0.88860589}, 2.8023216, 0.09460218, 0, 0}}, {84, {{-29.769839, -0.86202649}, 2.8023216, 0.093825496, 0, 0}}, {85, {{-29.49087, -0.83544709}, 2.8023216, 0.093048812, 0, 0}}, {86, {{-29.21185, -0.80940944}, 2.8023216, 0.092520777, 0, 0}}, {87, {{-28.93283, -0.78337179}, 2.8023216, 0.091992742, 0, 0}}, {88, {{-28.653793, -0.75751831}, 2.8023216, 0.091446317, 0, 0}}, {89, {{-28.374739, -0.73184901}, 2.8023216, 0.090881502, 0, 0}}, {90, {{-28.095685, -0.70617971}, 2.8023216, 0.090316687, 0, 0}}, {91, {{-27.816595, -0.68090446}, 2.8023216, 0.089642387, 0, 0}}, {92, {{-27.537505, -0.65562921}, 2.8023216, 0.088968086, 0, 0}}, {93, {{-27.258394, -0.63058921}, 2.8023216, 0.088216074, 0, 0}}, {94, {{-26.979261, -0.60578448}, 2.8023216, 0.087386351, 0, 0}}, {95, {{-26.700129, -0.58097975}, 2.8023216, 0.086556628, 0, 0}}, {96, {{-26.420947, -0.55675412}, 2.8023216, 0.085654652, 0, 0}}, {97, {{-26.141764, -0.53252849}, 2.8023216, 0.084752677, 0, 0}}, {98, {{-25.862555, -0.50861763}, 2.8023216, 0.083760528, 0, 0}}, {99, {{-25.583318, -0.48502156}, 2.8023216, 0.082678205, 0, 0}}, {100, {{-25.304081, -0.46142549}, 2.8023216, 0.081595883, 0, 0}}, {101, {{-25.024781, -0.43858506}, 2.8023216, 0.080931578, 0, 0}}, {102, {{-24.745481, -0.41574463}, 2.8023216, 0.080267273, 0, 0}}, {103, {{-24.466162, -0.39313615}, 2.8023216, 0.079609811, 0, 0}}, {104, {{-24.186825, -0.37075962}, 2.8023216, 0.078959194, 0, 0}}, {105, {{-23.907488, -0.3483831}, 2.8023216, 0.078308576, 0, 0}}, {106, {{-23.628115, -0.32646095}, 2.8023216, 0.077293782, 0, 0}}, {107, {{-23.348742, -0.3045388}, 2.8023216, 0.076278987, 0, 0}}, {108, {{-23.069341, -0.28297106}, 2.8023216, 0.075142394, 0, 0}}, {109, {{-22.789913, -0.26175773}, 2.8023216, 0.073884001, 0, 0}}, {110, {{-22.510485, -0.2405444}, 2.8023216, 0.072625609, 0, 0}}, {111, {{-22.230992, -0.22021028}, 2.8023216, 0.071827454, 0, 0}}, {112, {{-21.951499, -0.19987617}, 2.8023216, 0.071029299, 0, 0}}, {113, {{-21.671985, -0.17982091}, 2.8023216, 0.070228918, 0, 0}}, {114, {{-21.392452, -0.16004452}, 2.8023216, 0.06942631, 0, 0}}, {115, {{-21.112919, -0.14026812}, 2.8023216, 0.068623702, 0, 0}}, {116, {{-20.833346, -0.12105263}, 2.8023216, 0.067509708, 0, 0}}, {117, {{-20.553773, -0.10183714}, 2.8023216, 0.066395715, 0, 0}}, {118, {{-20.274174, -0.083010998}, 2.8023216, 0.065452614, 0, 0}}, {119, {{-19.994549, -0.064574196}, 2.8023216, 0.064680407, 0, 0}}, {120, {{-19.714924, -0.046137394}, 2.8023216, 0.0639082, 0, 0}}, {121, {{-19.435264, -0.028240462}, 2.8023216, 0.063102843, 0, 0}}, {122, {{-19.155605, -0.010343531}, 2.8023216, 0.062297486, 0, 0}}, {123, {{-18.875927, 0.0072718615}, 2.8023216, 0.061035693, 0, 0}}, {124, {{-18.596231, 0.024605714}, 2.8023216, 0.059317464, 0, 0}}, {125, {{-18.316535, 0.041939567}, 2.8023216, 0.057599235, 0, 0}}, {126, {{-18.036767, 0.058071819}, 2.8023216, 0.056761215, 0, 0}}, {127, {{-17.757, 0.074204071}, 2.8023216, 0.055923196, 0, 0}}, {128, {{-17.477216, 0.090043232}, 2.8023216, 0.055176151, 0, 0}}, {129, {{-17.197415, 0.1055893}, 2.8023216, 0.05452008, 0, 0}}, {130, {{-16.917615, 0.12113537}, 2.8023216, 0.053864009, 0, 0}}, {131, {{-16.637789, 0.13622251}, 2.8023216, 0.053265693, 0, 0}}, {132, {{-16.357963, 0.15130964}, 2.8023216, 0.052667376, 0, 0}}, {133, {{-16.078126, 0.16618749}, 2.8023216, 0.052309293, 0, 0}}, {134, {{-15.798278, 0.18085605}, 2.8023216, 0.052191444, 0, 0}}, {135, {{-15.51843, 0.19552461}, 2.8023216, 0.052073595, 0, 0}}, {136, {{-15.238578, 0.21011072}, 2.8023216, 0.051958907, 0, 0}}, {137, {{-14.958725, 0.22469683}, 2.8023216, 0.051844218, 0, 0}}, {138, {{-14.678871, 0.23924281}, 2.8023216, 0.051707747, 0, 0}}, {139, {{-14.399014, 0.25374868}, 2.8023216, 0.051549492, 0, 0}}, {140, {{-14.119157, 0.26825455}, 2.8023216, 0.051391238, 0, 0}}, {141, {{-13.839295, 0.2826497}, 2.8023216, 0.05101905, 0, 0}}, {142, {{-13.559432, 0.29704485}, 2.8023216, 0.050646862, 0, 0}}, {143, {{-13.279563, 0.31130979}, 2.8023216, 0.050209626, 0, 0}}, {144, {{-12.999688, 0.32544454}, 2.8023216, 0.049707343, 0, 0}}, {145, {{-12.719812, 0.33957929}, 2.8023216, 0.049205059, 0, 0}}, {146, {{-12.439916, 0.35336272}, 2.8023216, 0.049205059, 0, 0}}, {147, {{-12.160019, 0.36714615}, 2.8023216, 0.049205059, 0, 0}}};
obs2 = MovingObs(2, initCS2, shapeObs2, trajectory2);
const ST_CSTATE initCS4 = {{5.007321, 43.859324}, 1.3869128, -1.2492704, 0.0, 0.0};
const ST_RECTANGLE shapeObs4 = {{500, 4385}, 200, 500, 0};
const ST_PAIR trajectory4[MAXTP] = {{1, {{5.0511495, 43.72774}, 1.3869128, -1.2492706, 0, 0}}, {2, {{5.094978, 43.596156}, 1.3869128, -1.2492708, 0, 0}}, {3, {{5.1388064, 43.464572}, 1.3869128, -1.2492711, 0, 0}}, {4, {{5.1826348, 43.332988}, 1.3869128, -1.2492714, 0, 0}}, {5, {{5.2264632, 43.201404}, 1.3869128, -1.2492717, 0, 0}}, {6, {{5.2702915, 43.06982}, 1.3869128, -1.2492722, 0, 0}}, {7, {{5.3141198, 42.938236}, 1.3869128, -1.2492727, 0, 0}}, {8, {{5.3579481, 42.806652}, 1.3869128, -1.2492733, 0, 0}}, {9, {{5.4017762, 42.675068}, 1.3869128, -1.2492741, 0, 0}}, {10, {{5.4456044, 42.543484}, 1.3869128, -1.2492749, 0, 0}}, {11, {{5.4894323, 42.4119}, 1.3869128, -1.2491116, 0, 0}}, {12, {{5.5332602, 42.280316}, 1.3869128, -1.2489483, 0, 0}}, {13, {{5.5771149, 42.148741}, 1.3869128, -1.248595, 0, 0}}, {14, {{5.6209965, 42.017174}, 1.3869128, -1.2480518, 0, 0}}, {15, {{5.6648781, 41.885608}, 1.3869128, -1.2475086, 0, 0}}, {16, {{5.7089383, 41.754102}, 1.3869128, -1.2475104, 0, 0}}, {17, {{5.7529986, 41.622595}, 1.3869128, -1.2475121, 0, 0}}, {18, {{5.7970585, 41.491089}, 1.3869128, -1.2474944, 0, 0}}, {19, {{5.8411182, 41.359582}, 1.3869128, -1.2474573, 0, 0}}, {20, {{5.8851778, 41.228075}, 1.3869128, -1.2474202, 0, 0}}, {21, {{5.9292497, 41.096572}, 1.3869128, -1.247349, 0, 0}}, {22, {{5.9733216, 40.965069}, 1.3869128, -1.2472779, 0, 0}}, {23, {{6.0174051, 40.833571}, 1.3869128, -1.2472436, 0, 0}}, {24, {{6.0615004, 40.702076}, 1.3869128, -1.2472461, 0, 0}}, {25, {{6.1055956, 40.570581}, 1.3869128, -1.2472487, 0, 0}}, {26, {{6.14969, 40.439086}, 1.3869128, -1.2469445, 0, 0}}, {27, {{6.1937844, 40.307591}, 1.3869128, -1.2466404, 0, 0}}, {28, {{6.2379288, 40.176113}, 1.3869128, -1.2463121, 0, 0}}, {29, {{6.2821231, 40.044652}, 1.3869128, -1.2459598, 0, 0}}, {30, {{6.3263175, 39.91319}, 1.3869128, -1.2456074, 0, 0}}, {31, {{6.3706277, 39.781768}, 1.3869128, -1.2456094, 0, 0}}, {32, {{6.4149379, 39.650345}, 1.3869128, -1.2456113, 0, 0}}, {33, {{6.4592478, 39.518923}, 1.3869128, -1.2455269, 0, 0}}, {34, {{6.5035573, 39.3875}, 1.3869128, -1.2453562, 0, 0}}, {35, {{6.5478668, 39.256077}, 1.3869128, -1.2451855, 0, 0}}, {36, {{6.5922324, 39.124673}, 1.3869128, -1.2450607, 0, 0}}, {37, {{6.6365981, 38.993269}, 1.3869128, -1.2449359, 0, 0}}, {38, {{6.6809842, 38.861872}, 1.3869128, -1.2448726, 0, 0}}, {39, {{6.7253908, 38.730482}, 1.3869128, -1.2448709, 0, 0}}, {40, {{6.7697974, 38.599092}, 1.3869128, -1.2448692, 0, 0}}, {41, {{6.8142046, 38.467702}, 1.3869128, -1.2443274, 0, 0}}, {42, {{6.8586118, 38.336313}, 1.3869128, -1.2437857, 0, 0}}, {43, {{6.9031079, 38.204953}, 1.3869128, -1.2433949, 0, 0}}, {44, {{6.947693, 38.073624}, 1.3869128, -1.2431552, 0, 0}}, {45, {{6.9922781, 37.942294}, 1.3869128, -1.2429155, 0, 0}}, {46, {{7.0369419, 37.810991}, 1.3869128, -1.2429117, 0, 0}}, {47, {{7.0816057, 37.679688}, 1.3869128, -1.242908, 0, 0}}, {48, {{7.1262701, 37.548386}, 1.3869128, -1.2427601, 0, 0}}, {49, {{7.1709352, 37.417083}, 1.3869128, -1.2424682, 0, 0}}, {50, {{7.2156002, 37.285781}, 1.3869128, -1.2421762, 0, 0}}, {51, {{7.2603611, 37.154511}, 1.3869128, -1.2421081, 0, 0}}, {52, {{7.305122, 37.023242}, 1.3869128, -1.24204, 0, 0}}, {53, {{7.349894, 36.891976}, 1.3869128, -1.2420065, 0, 0}}, {54, {{7.3946772, 36.760713}, 1.3869128, -1.2420076, 0, 0}}, {55, {{7.4394604, 36.629451}, 1.3869128, -1.2420087, 0, 0}}, {56, {{7.4842433, 36.498189}, 1.3869128, -1.2409489, 0, 0}}, {57, {{7.5290262, 36.366927}, 1.3869128, -1.239889, 0, 0}}, {58, {{7.5739828, 36.235724}, 1.3869128, -1.239319, 0, 0}}, {59, {{7.6191133, 36.104581}, 1.3869128, -1.2392389, 0, 0}}, {60, {{7.6642438, 35.973438}, 1.3869128, -1.2391587, 0, 0}}, {61, {{7.7094006, 35.842304}, 1.3869128, -1.2391405, 0, 0}}, {62, {{7.7545573, 35.711169}, 1.3869128, -1.2391222, 0, 0}}, {63, {{7.7997171, 35.580036}, 1.3869128, -1.2388781, 0, 0}}, {64, {{7.8448798, 35.448904}, 1.3869128, -1.2384081, 0, 0}}, {65, {{7.8900426, 35.317772}, 1.3869128, -1.2379381, 0, 0}}, {66, {{7.9353594, 35.186693}, 1.3869128, -1.2379403, 0, 0}}, {67, {{7.9806762, 35.055614}, 1.3869128, -1.2379426, 0, 0}}, {68, {{8.0259926, 34.924535}, 1.3869128, -1.2378357, 0, 0}}, {69, {{8.0713087, 34.793456}, 1.3869128, -1.2376197, 0, 0}}, {70, {{8.1166248, 34.662377}, 1.3869128, -1.2374037, 0, 0}}, {71, {{8.1620116, 34.531323}, 1.3869128, -1.2362527, 0, 0}}, {72, {{8.2073984, 34.400268}, 1.3869128, -1.2351018, 0, 0}}, {73, {{8.2529737, 34.269279}, 1.3869128, -1.2345269, 0, 0}}, {74, {{8.2987375, 34.138356}, 1.3869128, -1.2345282, 0, 0}}, {75, {{8.3445013, 34.007432}, 1.3869128, -1.2345294, 0, 0}}, {76, {{8.3902647, 33.876508}, 1.3869128, -1.2341518, 0, 0}}, {77, {{8.4360281, 33.745584}, 1.3869128, -1.2337743, 0, 0}}, {78, {{8.4818532, 33.614682}, 1.3869128, -1.2330865, 0, 0}}, {79, {{8.5277401, 33.483801}, 1.3869128, -1.2320885, 0, 0}}, {80, {{8.573627, 33.352921}, 1.3869128, -1.2310905, 0, 0}}, {81, {{8.6198403, 33.222155}, 1.3869128, -1.2310829, 0, 0}}, {82, {{8.6660536, 33.09139}, 1.3869128, -1.2310753, 0, 0}}, {83, {{8.7122682, 32.960625}, 1.3869128, -1.2307625, 0, 0}}, {84, {{8.7584841, 32.82986}, 1.3869128, -1.2301445, 0, 0}}, {85, {{8.8047, 32.699095}, 1.3869128, -1.2295265, 0, 0}}, {86, {{8.8511177, 32.568402}, 1.3869128, -1.2285663, 0, 0}}, {87, {{8.8975354, 32.437709}, 1.3869128, -1.2276062, 0, 0}}, {88, {{8.94411, 32.307072}, 1.3869128, -1.2271169, 0, 0}}, {89, {{8.9908414, 32.176491}, 1.3869128, -1.2270985, 0, 0}}, {90, {{9.0375728, 32.045909}, 1.3869128, -1.2270801, 0, 0}}, {91, {{9.0843102, 31.91533}, 1.3869128, -1.2258893, 0, 0}}, {92, {{9.1310477, 31.784751}, 1.3869128, -1.2246984, 0, 0}}, {93, {{9.1779793, 31.654241}, 1.3869128, -1.2235247, 0, 0}}, {94, {{9.225105, 31.523802}, 1.3869128, -1.2223682, 0, 0}}, {95, {{9.2722308, 31.393363}, 1.3869128, -1.2212117, 0, 0}}, {96, {{9.3197337, 31.26306}, 1.3869128, -1.221201, 0, 0}}, {97, {{9.3672366, 31.132757}, 1.3869128, -1.2211903, 0, 0}}, {98, {{9.4147413, 31.002455}, 1.3869128, -1.2203097, 0, 0}}, {99, {{9.4622476, 30.872154}, 1.3869128, -1.2185591, 0, 0}}, {100, {{9.509754, 30.741853}, 1.3869128, -1.2168085, 0, 0}}, {101, {{9.5578298, 30.611761}, 1.3869128, -1.2157494, 0, 0}}, {102, {{9.6059057, 30.48167}, 1.3869128, -1.2146903, 0, 0}}, {103, {{9.6541538, 30.351642}, 1.3869128, -1.2141612, 0, 0}}, {104, {{9.7025743, 30.221677}, 1.3869128, -1.2141622, 0, 0}}, {105, {{9.7509947, 30.091713}, 1.3869128, -1.2141632, 0, 0}}, {106, {{9.7994148, 29.961748}, 1.3869128, -1.2152643, 0, 0}}, {107, {{9.8478349, 29.831783}, 1.3869128, -1.2163654, 0, 0}}, {108, {{9.8960759, 29.701753}, 1.3869128, -1.2171124, 0, 0}}, {109, {{9.944138, 29.571656}, 1.3869128, -1.2175053, 0, 0}}, {110, {{9.9922001, 29.441559}, 1.3869128, -1.2178982, 0, 0}}, {111, {{10.040134, 29.311414}, 1.3869128, -1.2179026, 0, 0}}, {112, {{10.088069, 29.181269}, 1.3869128, -1.217907, 0, 0}}, {113, {{10.136002, 29.051125}, 1.3869128, -1.2186377, 0, 0}}, {114, {{10.183935, 28.92098}, 1.3869128, -1.2200946, 0, 0}}, {115, {{10.231868, 28.790835}, 1.3869128, -1.2215516, 0, 0}}, {116, {{10.279326, 28.660516}, 1.3869128, -1.2218024, 0, 0}}, {117, {{10.326785, 28.530197}, 1.3869128, -1.2220531, 0, 0}}, {118, {{10.374203, 28.399864}, 1.3869128, -1.2221802, 0, 0}}, {119, {{10.42158, 28.269515}, 1.3869128, -1.2221836, 0, 0}}, {120, {{10.468957, 28.139166}, 1.3869128, -1.222187, 0, 0}}, {121, {{10.516333, 28.008817}, 1.3869128, -1.2240912, 0, 0}}, {122, {{10.563708, 27.878468}, 1.3869128, -1.2259955, 0, 0}}, {123, {{10.610773, 27.748007}, 1.3869128, -1.2269805, 0, 0}}, {124, {{10.657528, 27.617434}, 1.3869128, -1.2270462, 0, 0}}, {125, {{10.704283, 27.486861}, 1.3869128, -1.2271119, 0, 0}}, {126, {{10.751016, 27.35628}, 1.3869128, -1.2273193, 0, 0}}, {127, {{10.797749, 27.225699}, 1.3869128, -1.2275266, 0, 0}}, {128, {{10.844449, 27.095107}, 1.3869128, -1.2286742, 0, 0}}, {129, {{10.891114, 26.964502}, 1.3869128, -1.2307619, 0, 0}}, {130, {{10.93778, 26.833897}, 1.3869128, -1.2328496, 0, 0}}, {131, {{10.983763, 26.70305}, 1.3869128, -1.2328664, 0, 0}}, {132, {{11.029746, 26.572203}, 1.3869128, -1.2328831, 0, 0}}, {133, {{11.075727, 26.441355}, 1.3869128, -1.2331673, 0, 0}}, {134, {{11.121705, 26.310506}, 1.3869128, -1.2337189, 0, 0}}, {135, {{11.167683, 26.179657}, 1.3869128, -1.2342705, 0, 0}}, {136, {{11.21348, 26.048745}, 1.3869128, -1.2363968, 0, 0}}, {137, {{11.259277, 25.917834}, 1.3869128, -1.2385231, 0, 0}}, {138, {{11.304726, 25.786801}, 1.3869128, -1.2395905, 0, 0}}, {139, {{11.349827, 25.655647}, 1.3869128, -1.239599, 0, 0}}, {140, {{11.394928, 25.524493}, 1.3869128, -1.2396076, 0, 0}}, {141, {{11.440026, 25.393338}, 1.3869128, -1.2408438, 0, 0}}, {142, {{11.485124, 25.262183}, 1.3869128, -1.2420799, 0, 0}}, {143, {{11.530019, 25.13096}, 1.3869128, -1.244019, 0, 0}}, {144, {{11.574711, 24.999668}, 1.3869128, -1.2466609, 0, 0}}, {145, {{11.619403, 24.868376}, 1.3869128, -1.2493028, 0, 0}}, {146, {{11.663227, 24.73679}, 1.3869128, -1.2493028, 0, 0}}, {147, {{11.707052, 24.605204}, 1.3869128, -1.2493028, 0, 0}}};
obs4 = MovingObs(4, initCS4, shapeObs4, trajectory4);
const ST_CSTATE initCS5 = {{7.5593401, 36.277318}, 4.4901292, -1.2389389, 0.0, 0.0};
const ST_RECTANGLE shapeObs5 = {{755, 3627}, 200, 500, 0};
const ST_PAIR trajectory5[MAXTP] = {{1, {{7.7056285, 35.852803}, 4.4901292, -1.2381969, 0, 0}}, {2, {{7.8519169, 35.428288}, 4.4901292, -1.2374549, 0, 0}}, {3, {{7.9985988, 35.00391}, 4.4901292, -1.2363221, 0, 0}}, {4, {{8.1456743, 34.579668}, 4.4901292, -1.2347986, 0, 0}}, {5, {{8.2927498, 34.155426}, 4.4901292, -1.233275, 0, 0}}, {6, {{8.4414401, 33.731747}, 4.4901292, -1.2316716, 0, 0}}, {7, {{8.5901304, 33.308068}, 4.4901292, -1.2300683, 0, 0}}, {8, {{8.7396691, 32.884689}, 4.4901292, -1.2281957, 0, 0}}, {9, {{8.8900564, 32.46161}, 4.4901292, -1.2260538, 0, 0}}, {10, {{9.0404436, 32.038531}, 4.4901292, -1.2239119, 0, 0}}, {11, {{9.1930937, 31.616265}, 4.4901292, -1.2210195, 0, 0}}, {12, {{9.3457438, 31.193998}, 4.4901292, -1.218127, 0, 0}}, {13, {{9.4999186, 30.772289}, 4.4901292, -1.2167623, 0, 0}}, {14, {{9.6556179, 30.351138}, 4.4901292, -1.2169252, 0, 0}}, {15, {{9.8113172, 29.929987}, 4.4901292, -1.2170882, 0, 0}}, {16, {{9.9668455, 29.508771}, 4.4901292, -1.2189171, 0, 0}}, {17, {{10.122374, 29.087554}, 4.4901292, -1.220746, 0, 0}}, {18, {{10.276939, 28.665984}, 4.4901292, -1.22283, 0, 0}}, {19, {{10.43054, 28.244061}, 4.4901292, -1.2251691, 0, 0}}, {20, {{10.584141, 27.822138}, 4.4901292, -1.2275082, 0, 0}}, {21, {{10.735272, 27.399323}, 4.4901292, -1.2301274, 0, 0}}, {22, {{10.886403, 26.976508}, 4.4901292, -1.2327467, 0, 0}}, {23, {{11.036149, 26.553203}, 4.4901292, -1.2357108, 0, 0}}, {24, {{11.184508, 26.129408}, 4.4901292, -1.2390199, 0, 0}}, {25, {{11.332867, 25.705613}, 4.4901292, -1.242329, 0, 0}}, {26, {{11.477715, 25.280607}, 4.4901292, -1.2460845, 0, 0}}, {27, {{11.622563, 24.8556}, 4.4901292, -1.24984, 0, 0}}, {28, {{11.765413, 24.429922}, 4.4901292, -1.2527814, 0, 0}}, {29, {{11.906264, 24.003573}, 4.4901292, -1.2549087, 0, 0}}, {30, {{12.047116, 23.577223}, 4.4901292, -1.257036, 0, 0}}, {31, {{12.185699, 23.150129}, 4.4901292, -1.2583334, 0, 0}}, {32, {{12.324282, 22.723036}, 4.4901292, -1.2596307, 0, 0}}, {33, {{12.462171, 22.295719}, 4.4901292, -1.2610393, 0, 0}}, {34, {{12.599368, 21.868178}, 4.4901292, -1.262559, 0, 0}}, {35, {{12.736565, 21.440637}, 4.4901292, -1.2640788, 0, 0}}, {36, {{12.872137, 21.012577}, 4.4901292, -1.265877, 0, 0}}, {37, {{13.007709, 20.584517}, 4.4901292, -1.2676752, 0, 0}}, {38, {{13.142319, 20.156152}, 4.4901292, -1.2715486, 0, 0}}, {39, {{13.275966, 19.727483}, 4.4901292, -1.2774972, 0, 0}}, {40, {{13.409613, 19.298813}, 4.4901292, -1.2834458, 0, 0}}, {41, {{13.536872, 18.868201}, 4.4901292, -1.2946421, 0, 0}}, {42, {{13.664131, 18.437589}, 4.4901292, -1.3058384, 0, 0}}, {43, {{13.785337, 18.005285}, 4.4901292, -1.3195153, 0, 0}}, {44, {{13.900492, 17.571289}, 4.4901292, -1.3356728, 0, 0}}, {45, {{14.015647, 17.137293}, 4.4901292, -1.3518304, 0, 0}}, {46, {{14.11317, 16.699053}, 4.4901292, -1.3745091, 0, 0}}, {47, {{14.210693, 16.260814}, 4.4901292, -1.3971878, 0, 0}}, {48, {{14.295717, 15.82019}, 4.4901292, -1.4208546, 0, 0}}, {49, {{14.368242, 15.377181}, 4.4901292, -1.4455093, 0, 0}}, {50, {{14.440766, 14.934172}, 4.4901292, -1.470164, 0, 0}}, {51, {{14.485864, 14.487536}, 4.4901292, -1.4928502, 0, 0}}, {52, {{14.530963, 14.040901}, 4.4901292, -1.5155365, 0, 0}}, {53, {{14.563367, 13.593334}, 4.4901292, -1.5347048, 0, 0}}, {54, {{14.583076, 13.144837}, 4.4901292, -1.5503552, 0, 0}}, {55, {{14.602785, 12.69634}, 4.4901292, -1.5660056, 0, 0}}, {56, {{14.604936, 12.24735}, 4.4901292, -1.5759946, 0, 0}}, {57, {{14.607087, 11.79836}, 4.4901292, -1.5859835, 0, 0}}, {58, {{14.603632, 11.349409}, 4.4901292, -1.5949482, 0, 0}}, {59, {{14.594571, 10.900496}, 4.4901292, -1.6028886, 0, 0}}, {60, {{14.58551, 10.451584}, 4.4901292, -1.610829, 0, 0}}, {61, {{14.56754, 10.002935}, 4.4901292, -1.6100223, 0, 0}}, {62, {{14.549569, 9.5542852}, 4.4901292, -1.6092156, 0, 0}}, {63, {{14.532051, 9.1056126}, 4.4901292, -1.6051858, 0, 0}}, {64, {{14.514986, 8.6569169}, 4.4901292, -1.5979331, 0, 0}}, {65, {{14.49792, 8.2082211}, 4.4901292, -1.5906804, 0, 0}}, {66, {{14.488992, 7.7592757}, 4.4901292, -1.5675395, 0, 0}}, {67, {{14.480063, 7.3103304}, 4.4901292, -1.5443986, 0, 0}}, {68, {{14.484116, 6.861652}, 4.4901292, -1.5133377, 0, 0}}, {69, {{14.501149, 6.4132405}, 4.4901292, -1.4743568, 0, 0}}, {70, {{14.518183, 5.964829}, 4.4901292, -1.4353759, 0, 0}}, {71, {{14.57879, 5.5200226}, 4.4901292, -1.3977586, 0, 0}}, {72, {{14.639397, 5.0752163}, 4.4901292, -1.3601413, 0, 0}}, {73, {{14.720762, 4.6342052}, 4.4901292, -1.3154187, 0, 0}}, {74, {{14.822886, 4.1969893}, 4.4901292, -1.2635906, 0, 0}}, {75, {{14.92501, 3.7597735}, 4.4901292, -1.2117626, 0, 0}}, {76, {{15.082662, 3.3397059}, 4.4901292, -1.1671416, 0, 0}}, {77, {{15.240313, 2.9196382}, 4.4901292, -1.1225206, 0, 0}}, {78, {{15.420992, 2.5093829}, 4.4901292, -1.0698046, 0, 0}}, {79, {{15.624699, 2.1089399}, 4.4901292, -1.0089937, 0, 0}}, {80, {{15.828405, 1.7084969}, 4.4901292, -0.9481828, 0, 0}}, {81, {{16.09035, 1.3436013}, 4.4901292, -0.87946518, 0, 0}}, {82, {{16.352295, 0.97870568}, 4.4901292, -0.81074757, 0, 0}}, {83, {{16.643426, 0.63895874}, 4.4901292, -0.74174387, 0, 0}}, {84, {{16.963745, 0.32436049}, 4.4901292, -0.67245408, 0, 0}}, {85, {{17.284064, 0.0097622409}, 4.4901292, -0.6031643, 0, 0}}, {86, {{17.653702, -0.24484156}, 4.4901292, -0.54163767, 0, 0}}, {87, {{18.02334, -0.49944535}, 4.4901292, -0.48011104, 0, 0}}, {88, {{18.410181, -0.72417268}, 4.4901292, -0.42450462, 0, 0}}, {89, {{18.814226, -0.91902354}, 4.4901292, -0.37481843, 0, 0}}, {90, {{19.21827, -1.1138744}, 4.4901292, -0.32513223, 0, 0}}, {91, {{19.643738, -1.2572976}, 4.4901292, -0.29785806, 0, 0}}, {92, {{20.069207, -1.4007208}, 4.4901292, -0.27058389, 0, 0}}, {93, {{20.4991, -1.5294921}, 4.4901292, -0.24984736, 0, 0}}, {94, {{20.933419, -1.6436114}, 4.4901292, -0.23564847, 0, 0}}, {95, {{21.367737, -1.7577307}, 4.4901292, -0.22144958, 0, 0}}, {96, {{21.805821, -1.8563618}, 4.4901292, -0.21592518, 0, 0}}, {97, {{22.243905, -1.9549929}, 4.4901292, -0.21040079, 0, 0}}, {98, {{22.68264, -2.0505923}, 4.4901292, -0.20655573, 0, 0}}, {99, {{23.122025, -2.1431598}, 4.4901292, -0.20439001, 0, 0}}, {100, {{23.561411, -2.2357274}, 4.4901292, -0.20222429, 0, 0}}, {101, {{24.001281, -2.3259124}, 4.4901292, -0.2013112, 0, 0}}, {102, {{24.44115, -2.4160975}, 4.4901292, -0.20039811, 0, 0}}, {103, {{24.881118, -2.5057796}, 4.4901292, -0.20076793, 0, 0}}, {104, {{25.321185, -2.5949587}, 4.4901292, -0.20242066, 0, 0}}, {105, {{25.761252, -2.6841379}, 4.4901292, -0.20407339, 0, 0}}, {106, {{26.200944, -2.775134}, 4.4901292, -0.20548241, 0, 0}}, {107, {{26.640635, -2.8661301}, 4.4901292, -0.20689142, 0, 0}}, {108, {{27.080166, -2.9579004}, 4.4901292, -0.20814355, 0, 0}}, {109, {{27.519536, -3.0504451}, 4.4901292, -0.2092388, 0, 0}}, {110, {{27.958906, -3.1429898}, 4.4901292, -0.21033404, 0, 0}}, {111, {{28.398022, -3.2367374}, 4.4901292, -0.21113722, 0, 0}}, {112, {{28.837138, -3.330485}, 4.4901292, -0.21194039, 0, 0}}, {113, {{29.27616, -3.4246735}, 4.4901292, -0.2126482, 0, 0}}, {114, {{29.715087, -3.5193028}, 4.4901292, -0.21326065, 0, 0}}, {115, {{30.154015, -3.6139321}, 4.4901292, -0.2138731, 0, 0}}, {116, {{30.592797, -3.7092334}, 4.4901292, -0.21441884, 0, 0}}, {117, {{31.03158, -3.8045347}, 4.4901292, -0.21496458, 0, 0}}, {118, {{31.470297, -3.9001353}, 4.4901292, -0.21551782, 0, 0}}, {119, {{31.908949, -3.9960352}, 4.4901292, -0.21607856, 0, 0}}, {120, {{32.347601, -4.0919351}, 4.4901292, -0.2166393, 0, 0}}, {121, {{32.786119, -4.1884499}, 4.4901292, -0.21698162, 0, 0}}, {122, {{33.224636, -4.2849646}, 4.4901292, -0.21732395, 0, 0}}, {123, {{33.663112, -4.381667}, 4.4901292, -0.21764244, 0, 0}}, {124, {{34.101547, -4.478557}, 4.4901292, -0.21793709, 0, 0}}, {125, {{34.539982, -4.575447}, 4.4901292, -0.21823175, 0, 0}}, {126, {{34.978345, -4.6726599}, 4.4901292, -0.21815123, 0, 0}}, {127, {{35.416708, -4.7698728}, 4.4901292, -0.21807072, 0, 0}}, {128, {{35.855081, -4.8670417}, 4.4901292, -0.21798438, 0, 0}}, {129, {{36.293464, -4.9641664}, 4.4901292, -0.21789223, 0, 0}}, {130, {{36.731846, -5.0612911}, 4.4901292, -0.21780007, 0, 0}}, {131, {{37.170251, -5.1583148}, 4.4901292, -0.21768949, 0, 0}}, {132, {{37.608656, -5.2553385}, 4.4901292, -0.21757892, 0, 0}}, {133, {{38.047075, -5.3523015}, 4.4901292, -0.21748181, 0, 0}}, {134, {{38.485506, -5.449204}, 4.4901292, -0.21739818, 0, 0}}, {135, {{38.923938, -5.5461065}, 4.4901292, -0.21731454, 0, 0}}, {136, {{39.36239, -5.6429173}, 4.4901292, -0.21718248, 0, 0}}, {137, {{39.800843, -5.7397281}, 4.4901292, -0.21705042, 0, 0}}, {138, {{40.239311, -5.8364665}, 4.4901292, -0.216938, 0, 0}}, {139, {{40.677795, -5.9331326}, 4.4901292, -0.21684521, 0, 0}}, {140, {{41.116279, -6.0297987}, 4.4901292, -0.21675242, 0, 0}}, {141, {{41.554785, -6.1263631}, 4.4901292, -0.21661919, 0, 0}}, {142, {{41.993292, -6.2229274}, 4.4901292, -0.21648596, 0, 0}}, {143, {{42.431814, -6.3194187}, 4.4901292, -0.21635226, 0, 0}}, {144, {{42.870353, -6.415837}, 4.4901292, -0.21621809, 0, 0}}, {145, {{43.308891, -6.5122553}, 4.4901292, -0.21608391, 0, 0}}, {146, {{43.747462, -6.6085265}, 4.4901292, -0.21608391, 0, 0}}, {147, {{44.186033, -6.7047976}, 4.4901292, -0.21608391, 0, 0}}};
obs5 = MovingObs(5, initCS5, shapeObs5, trajectory5);
const ST_CSTATE initCS7 = {{88.316813, -8.5152942}, 4.3250391, 3.1308991, 0.0, 0.0};
const ST_RECTANGLE shapeObs7 = {{8831, -851}, 200, 500, 0};
const ST_PAIR trajectory7[MAXTP] = {{1, {{87.884333, -8.5106692}, 4.3250391, 3.1298147, 0, 0}}, {2, {{87.451854, -8.5060443}, 4.3250391, 3.1287304, 0, 0}}, {3, {{87.019381, -8.5008331}, 4.3250391, 3.1279189, 0, 0}}, {4, {{86.586916, -8.4950358}, 4.3250391, 3.1273804, 0, 0}}, {5, {{86.154451, -8.4892385}, 4.3250391, 3.1268418, 0, 0}}, {6, {{85.721994, -8.4828589}, 4.3250391, 3.1256763, 0, 0}}, {7, {{85.289537, -8.4764793}, 4.3250391, 3.1245108, 0, 0}}, {8, {{84.85709, -8.4694697}, 4.3250391, 3.1221034, 0, 0}}, {9, {{84.424653, -8.4618301}, 4.3250391, 3.1184539, 0, 0}}, {10, {{83.992216, -8.4541905}, 4.3250391, 3.1148044, 0, 0}}, {11, {{83.559868, -8.4426059}, 4.3250391, 3.1106635, 0, 0}}, {12, {{83.127521, -8.4310212}, 4.3250391, 3.1065226, 0, 0}}, {13, {{82.695244, -8.417199}, 4.3250391, 3.102345, 0, 0}}, {14, {{82.263039, -8.4011393}, 4.3250391, 3.0981307, 0, 0}}, {15, {{81.830833, -8.3850796}, 4.3250391, 3.0939164, 0, 0}}, {16, {{81.39882, -8.3644672}, 4.3250391, 3.0900533, 0, 0}}, {17, {{80.966807, -8.3438549}, 4.3250391, 3.0861902, 0, 0}}, {18, {{80.534905, -8.3211569}, 4.3250391, 3.0824187, 0, 0}}, {19, {{80.103112, -8.2963734}, 4.3250391, 3.0787388, 0, 0}}, {20, {{79.671319, -8.2715898}, 4.3250391, 3.0750589, 0, 0}}, {21, {{79.239773, -8.242835}, 4.3250391, 3.0715143, 0, 0}}, {22, {{78.808227, -8.2140802}, 4.3250391, 3.0679697, 0, 0}}, {23, {{78.376817, -8.1834139}, 4.3250391, 3.0644812, 0, 0}}, {24, {{77.945543, -8.1508362}, 4.3250391, 3.0610487, 0, 0}}, {25, {{77.514269, -8.1182584}, 4.3250391, 3.0576163, 0, 0}}, {26, {{77.083291, -8.0819811}, 4.3250391, 3.0541319, 0, 0}}, {27, {{76.652314, -8.0457038}, 4.3250391, 3.0506475, 0, 0}}, {28, {{76.221502, -8.0075502}, 4.3250391, 3.0470912, 0, 0}}, {29, {{75.790857, -7.9675201}, 4.3250391, 3.0434631, 0, 0}}, {30, {{75.360212, -7.9274901}, 4.3250391, 3.039835, 0, 0}}, {31, {{74.929948, -7.8835557}, 4.3250391, 3.0361181, 0, 0}}, {32, {{74.499684, -7.8396212}, 4.3250391, 3.0324012, 0, 0}}, {33, {{74.069634, -7.7936888}, 4.3250391, 3.0286648, 0, 0}}, {34, {{73.639797, -7.7457583}, 4.3250391, 3.0249089, 0, 0}}, {35, {{73.20996, -7.6978278}, 4.3250391, 3.021153, 0, 0}}, {36, {{72.780592, -7.6458633}, 4.3250391, 3.0174667, 0, 0}}, {37, {{72.351223, -7.5938988}, 4.3250391, 3.0137804, 0, 0}}, {38, {{71.922103, -7.539957}, 4.3250391, 3.0101022, 0, 0}}, {39, {{71.493232, -7.4840378}, 4.3250391, 3.0064319, 0, 0}}, {40, {{71.06436, -7.4281186}, 4.3250391, 3.0027616, 0, 0}}, {41, {{70.636019, -7.3682665}, 4.3250391, 2.9990817, 0, 0}}, {42, {{70.207678, -7.3084144}, 4.3250391, 2.9954018, 0, 0}}, {43, {{69.77962, -7.2465933}, 4.3250391, 2.9916695, 0, 0}}, {44, {{69.351847, -7.182803}, 4.3250391, 2.9878848, 0, 0}}, {45, {{68.924074, -7.1190127}, 4.3250391, 2.9841002, 0, 0}}, {46, {{68.496923, -7.0511779}, 4.3250391, 2.9815077, 0, 0}}, {47, {{68.069772, -6.983343}, 4.3250391, 2.9789152, 0, 0}}, {48, {{67.642845, -6.9141247}, 4.3250391, 2.9766574, 0, 0}}, {49, {{67.216142, -6.8435228}, 4.3250391, 2.9747343, 0, 0}}, {50, {{66.78944, -6.7729209}, 4.3250391, 2.9728111, 0, 0}}, {51, {{66.363082, -6.7002683}, 4.3250391, 2.9710589, 0, 0}}, {52, {{65.936724, -6.6276158}, 4.3250391, 2.9693068, 0, 0}}, {53, {{65.510527, -6.5540298}, 4.3250391, 2.9676304, 0, 0}}, {54, {{65.084492, -6.4795103}, 4.3250391, 2.9660299, 0, 0}}, {55, {{64.658456, -6.4049909}, 4.3250391, 2.9644294, 0, 0}}, {56, {{64.232722, -6.3287673}, 4.3250391, 2.9629205, 0, 0}}, {57, {{63.806988, -6.2525438}, 4.3250391, 2.9614116, 0, 0}}, {58, {{63.381399, -6.1755175}, 4.3250391, 2.9598913, 0, 0}}, {59, {{62.955956, -6.0976886}, 4.3250391, 2.9583596, 0, 0}}, {60, {{62.530513, -6.0198597}, 4.3250391, 2.9568279, 0, 0}}, {61, {{62.105371, -5.9404022}, 4.3250391, 2.9554553, 0, 0}}, {62, {{61.680228, -5.8609447}, 4.3250391, 2.9540826, 0, 0}}, {63, {{61.255224, -5.7807579}, 4.3250391, 2.9528219, 0, 0}}, {64, {{60.830357, -5.6998418}, 4.3250391, 2.9516732, 0, 0}}, {65, {{60.40549, -5.6189258}, 4.3250391, 2.9505245, 0, 0}}, {66, {{59.980857, -5.53679}, 4.3250391, 2.9495053, 0, 0}}, {67, {{59.556224, -5.4546542}, 4.3250391, 2.9484861, 0, 0}}, {68, {{59.131696, -5.3719775}, 4.3250391, 2.9475808, 0, 0}}, {69, {{58.707273, -5.28876}, 4.3250391, 2.9467895, 0, 0}}, {70, {{58.282851, -5.2055425}, 4.3250391, 2.9459981, 0, 0}}, {71, {{57.858594, -5.1214855}, 4.3250391, 2.9455878, 0, 0}}, {72, {{57.434337, -5.0374284}, 4.3250391, 2.9451775, 0, 0}}, {73, {{57.010123, -4.9531538}, 4.3250391, 2.9448331, 0, 0}}, {74, {{56.585952, -4.8686616}, 4.3250391, 2.9445547, 0, 0}}, {75, {{56.161781, -4.7841694}, 4.3250391, 2.9442763, 0, 0}}, {76, {{55.737669, -4.699382}, 4.3250391, 2.9439122, 0, 0}}, {77, {{55.313558, -4.6145945}, 4.3250391, 2.9435481, 0, 0}}, {78, {{54.889485, -4.5296141}, 4.3250391, 2.9433028, 0, 0}}, {79, {{54.46545, -4.4444407}, 4.3250391, 2.9431763, 0, 0}}, {80, {{54.041416, -4.3592673}, 4.3250391, 2.9430497, 0, 0}}, {81, {{53.617409, -4.2739597}, 4.3250391, 2.942794, 0, 0}}, {82, {{53.193402, -4.1886522}, 4.3250391, 2.9425383, 0, 0}}, {83, {{52.769422, -4.1032091}, 4.3250391, 2.9423566, 0, 0}}, {84, {{52.345469, -4.0176305}, 4.3250391, 2.9422487, 0, 0}}, {85, {{51.921516, -3.9320519}, 4.3250391, 2.9421409, 0, 0}}, {86, {{51.497586, -3.846359}, 4.3250391, 2.9419698, 0, 0}}, {87, {{51.073656, -3.7606661}, 4.3250391, 2.9417987, 0, 0}}, {88, {{50.649745, -3.6748826}, 4.3250391, 2.9416635, 0, 0}}, {89, {{50.225852, -3.5890085}, 4.3250391, 2.9415642, 0, 0}}, {90, {{49.801959, -3.5031343}, 4.3250391, 2.9414649, 0, 0}}, {91, {{49.378087, -3.4171549}, 4.3250391, 2.9413206, 0, 0}}, {92, {{48.954216, -3.3311754}, 4.3250391, 2.9411763, 0, 0}}, {93, {{48.53036, -3.2451195}, 4.3250391, 2.9410503, 0, 0}}, {94, {{48.106519, -3.1589872}, 4.3250391, 2.9409428, 0, 0}}, {95, {{47.682678, -3.0728548}, 4.3250391, 2.9408353, 0, 0}}, {96, {{47.258861, -2.9866086}, 4.3250391, 2.9407307, 0, 0}}, {97, {{46.835044, -2.9003623}, 4.3250391, 2.9406261, 0, 0}}, {98, {{46.411237, -2.8140607}, 4.3250391, 2.9405066, 0, 0}}, {99, {{45.987442, -2.7277036}, 4.3250391, 2.9403721, 0, 0}}, {100, {{45.563647, -2.6413465}, 4.3250391, 2.9402377, 0, 0}}, {101, {{45.139881, -2.554847}, 4.3250391, 2.9401789, 0, 0}}, {102, {{44.716116, -2.4683475}, 4.3250391, 2.9401201, 0, 0}}, {103, {{44.292356, -2.3818168}, 4.3250391, 2.9400148, 0, 0}}, {104, {{43.868603, -2.295255}, 4.3250391, 2.939863, 0, 0}}, {105, {{43.44485, -2.2086932}, 4.3250391, 2.9397112, 0, 0}}, {106, {{43.02113, -2.1219706}, 4.3250391, 2.9396031, 0, 0}}, {107, {{42.59741, -2.035248}, 4.3250391, 2.939495, 0, 0}}, {108, {{42.173702, -1.9484681}, 4.3250391, 2.9394327, 0, 0}}, {109, {{41.750005, -1.8616309}, 4.3250391, 2.9394163, 0, 0}}, {110, {{41.326308, -1.7747937}, 4.3250391, 2.9393999, 0, 0}}, {111, {{40.902614, -1.6879391}, 4.3250391, 2.9395725, 0, 0}}, {112, {{40.478921, -1.6010845}, 4.3250391, 2.9397451, 0, 0}}, {113, {{40.055208, -1.5143213}, 4.3250391, 2.9398677, 0, 0}}, {114, {{39.631477, -1.4276494}, 4.3250391, 2.9399404, 0, 0}}, {115, {{39.207745, -1.3409776}, 4.3250391, 2.9400131, 0, 0}}, {116, {{38.783998, -1.2543828}, 4.3250391, 2.9401197, 0, 0}}, {117, {{38.360251, -1.1677879}, 4.3250391, 2.9402262, 0, 0}}, {118, {{37.936493, -1.0812495}, 4.3250391, 2.9404071, 0, 0}}, {119, {{37.512722, -0.99476736}, 4.3250391, 2.9406622, 0, 0}}, {120, {{37.088951, -0.90828526}, 4.3250391, 2.9409173, 0, 0}}, {121, {{36.665125, -0.82207346}, 4.3250391, 2.9410661, 0, 0}}, {122, {{36.241299, -0.73586166}, 4.3250391, 2.9412149, 0, 0}}, {123, {{35.817457, -0.64972863}, 4.3250391, 2.9414667, 0, 0}}, {124, {{35.393598, -0.56367438}, 4.3250391, 2.9418214, 0, 0}}, {125, {{34.969739, -0.47762012}, 4.3250391, 2.9421761, 0, 0}}, {126, {{34.545804, -0.39194171}, 4.3250391, 2.942443, 0, 0}}, {127, {{34.121869, -0.3062633}, 4.3250391, 2.9427099, 0, 0}}, {128, {{33.697904, -0.22072623}, 4.3250391, 2.9431501, 0, 0}}, {129, {{33.273911, -0.13533048}, 4.3250391, 2.9437636, 0, 0}}, {130, {{32.849918, -0.049934729}, 4.3250391, 2.9443771, 0, 0}}, {131, {{32.425794, 0.034810795}, 4.3250391, 2.9447837, 0, 0}}, {132, {{32.001669, 0.11955632}, 4.3250391, 2.9451903, 0, 0}}, {133, {{31.577501, 0.20408637}, 4.3250391, 2.9458395, 0, 0}}, {134, {{31.153289, 0.28840096}, 4.3250391, 2.9467314, 0, 0}}, {135, {{30.729077, 0.37271554}, 4.3250391, 2.9476232, 0, 0}}, {136, {{30.304675, 0.45608474}, 4.3250391, 2.9485667, 0, 0}}, {137, {{29.880274, 0.53945394}, 4.3250391, 2.9495102, 0, 0}}, {138, {{29.455773, 0.62232267}, 4.3250391, 2.9506658, 0, 0}}, {139, {{29.031174, 0.70469092}, 4.3250391, 2.9520335, 0, 0}}, {140, {{28.606575, 0.78705917}, 4.3250391, 2.9534012, 0, 0}}, {141, {{28.181689, 0.86797671}, 4.3250391, 2.9560854, 0, 0}}, {142, {{27.756802, 0.94889424}, 4.3250391, 2.9587697, 0, 0}}, {143, {{27.331646, 1.0283858}, 4.3250391, 2.9615026, 0, 0}}, {144, {{26.90622, 1.1064514}, 4.3250391, 2.9642843, 0, 0}}, {145, {{26.480794, 1.184517}, 4.3250391, 2.967066, 0, 0}}, {146, {{26.054847, 1.2596201}, 4.3250391, 2.967066, 0, 0}}, {147, {{25.6289, 1.3347232}, 4.3250391, 2.967066, 0, 0}}};
obs7 = MovingObs(7, initCS7, shapeObs7, trajectory7);

// Generated moving obstacles ends

// Generated ego vehicle starts
const ST_CSTATE initEgo = {{-45.165155, -2.9247824}, 4.764987, 0.18221198, 0.0, 0.0};
const ST_RECTANGLE initShapeEgo = {{-4516, -292}, 100, 450, 0};
const ST_RULES rules = {4000, 0, 314, -314}; 
const int[0,MAXL] initLane = 0;
egoController = Controller(1, initLane, initEgo, initShapeEgo, rules);
egoDynamics = Dynamics(1, initLane, initEgo);
// Generated ego vehicle ends

// Generated model instances start
system Decisions, egoController, egoDynamics, obs1, obs2, obs4, obs5, obs7;

// Generated model instances end
</system>
	<queries>
		<option key="--total-runs" value="50"/>
		<option key="--max-iterations" value="3"/>
		<option key="--good-runs" value="20"/>
		<option key="--eval-runs" value="10"/>
		<option key="--runs-pr-state" value="10"/>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>E&lt;&gt; dStateEgo.detection.reach</formula>
			<comment/>
		</query>
		<query>
			<formula>E[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy safe = control:A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside
</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:34 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>strategy reachSafe = minE(D) [&lt;=MAXTIME] {egoController.location}-&gt;{dStateEgo.position.x, dStateEgo.position.y, dStateEgo.velocity, dStateEgo.orientation, dStateEgo.acceleration, dStateEgo.yawRate}: &lt;&gt; time&gt;=MAXTIME under safe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:38 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=MAXTIME] { varsEgo.x, varsEgo.y, varsEgo.orientation, varsEgo.velocity, varsEgo.acceleration } under reachSafe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:41 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="varsEgo.x" type="l" color="0xff0000" encoding="csv">0.0,0.0
10.000002,30.000006
					</series>
					<series title="varsEgo.y" type="l" color="0xccff00" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<series title="varsEgo.orientation" type="l" color="0x00ff66" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<series title="varsEgo.velocity" type="l" color="0x0066ff" encoding="csv">0.0,0.0
0.0,3.0
10.000002,3.0
					</series>
					<series title="varsEgo.acceleration" type="l" color="0xcc00ff" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
