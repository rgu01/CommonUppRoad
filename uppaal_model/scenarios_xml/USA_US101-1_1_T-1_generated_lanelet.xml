<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Kaige geneted code starts
const int MAXP = 133;
const int NONE = -1;
const int MAXL = 6;
const int MAXSO = 1;
const int MAXPRE = 1;
const int MAXSUC = 1;

typedef int[-1,65535] id_t;

typedef struct {
    int32_t x;
    int32_t y;
}ST_DPOINT;

typedef struct {
    double x;
    double y;
}ST_CPOINT;

typedef struct {
    ST_DPOINT ends[2];
}ST_DLINE;

typedef struct {
    ST_DPOINT points[MAXP];
    bool dashLine;
}ST_BOUND;

typedef struct {
    id_t ID;
    ST_BOUND left;
    ST_BOUND right;
    id_t predecessor[MAXPRE];
    id_t successor[MAXSUC];
    id_t adjLeft;
    bool dirLeft;
    id_t adjRight;
    bool dirRight;
}ST_LANE;

typedef struct {
    bool collide; // collision
    bool outside; // outside road
    bool reach;   // reach the goal
}ST_DETECTION;

typedef struct {
    ST_CPOINT position;
    double velocity;
    double orientation;
    double acceleration;
    double yawRate;
}ST_CSTATE;

typedef struct {
    ST_DPOINT position;
    int16_t velocity;
    int16_t orientation;
    int16_t acceleration;
    int16_t yawRate;
    ST_DETECTION detection;
}ST_DSTATE;

typedef struct {
    hybrid clock x;
    hybrid clock y;
    hybrid clock velocity;
    hybrid clock orientation;
    hybrid clock acceleration;
    hybrid clock yawRate;
}ST_VARIABLES;

typedef struct {
    ST_DPOINT center;
    int16_t width;
    int16_t length;
    int16_t orientation;
}ST_RECTANGLE;

typedef struct {
    int maxVelocity;
    int minVelocity;
    int maxOrientation;
    int minOrientation;
}ST_RULES;

typedef struct {
    ST_DPOINT goal;
}ST_PLANNING;
const ST_BOUND leftLane1 = {{{-3414, 557}, {-2865, 554}, {-2836, 554}, {-2819, 553}, {-2463, 535}, {-2424, 532}, {-1388, 518}, {-1357, 518}, {-1344, 517}, {-989, 498}, {-950, 496}, {22, 492}, {51, 492}, {67, 491}, {423, 473}, {463, 470}, {1486, 445}, {1515, 444}, {1519, 444}, {1529, 443}, {1881, 424}, {1920, 422}, {2912, 415}, {2942, 414}, {2957, 414}, {3313, 395}, {3352, 393}, {4324, 372}, {4374, 371}, {4709, 364}, {4758, 363}, {5764, 341}, {5813, 340}, {6149, 333}, {6191, 332}, {6193, 332}, {6197, 332}, {7231, 299}, {7277, 297}, {7612, 291}, {7662, 290}, {8677, 268}, {8727, 267}, {9063, 261}, {9113, 260}, {10106, 241}, {10157, 240}, {10493, 233}, {10536, 232}, {10537, 232}, {10541, 232}, {11552, 201}, {11598, 199}, {11934, 193}, {11982, 192}, {11984, 192}, {11984, 192}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane1 = {{{-3422, 218}, {-2867, 215}, {-2845, 214}, {-2829, 213}, {-2481, 194}, {-2429, 193}, {-1393, 179}, {-1368, 177}, {-1355, 177}, {-1007, 158}, {-952, 157}, {20, 153}, {41, 152}, {58, 151}, {405, 132}, {454, 131}, {1478, 105}, {1496, 104}, {1506, 103}, {1516, 103}, {1863, 84}, {1918, 83}, {2910, 76}, {2932, 75}, {2947, 74}, {3295, 55}, {3345, 53}, {4316, 32}, {4367, 31}, {4702, 25}, {4750, 24}, {5756, 1}, {5807, 0}, {6142, -6}, {6180, -7}, {6184, -7}, {6188, -7}, {7220, -40}, {7270, -41}, {7606, -48}, {7655, -49}, {8670, -70}, {8721, -71}, {9056, -78}, {9107, -79}, {10100, -98}, {10150, -99}, {10486, -106}, {10525, -107}, {10529, -107}, {10532, -107}, {11541, -138}, {11592, -139}, {11927, -146}, {11973, -147}, {11976, -147}, {11976, -147}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane1 = {534, leftLane1, rightLane1, {NONE}, {NONE}, NONE, false, 536, true};

const ST_BOUND leftLane2 = {{{-3422, 218}, {-2867, 215}, {-2837, 213}, {-2481, 194}, {-2465, 194}, {-1422, 179}, {-1400, 179}, {-1394, 178}, {-1024, 159}, {-1007, 158}, {20, 153}, {35, 152}, {405, 132}, {1457, 105}, {1472, 105}, {1477, 105}, {1852, 84}, {1863, 84}, {2910, 76}, {2931, 75}, {3295, 55}, {4316, 32}, {4353, 32}, {4702, 25}, {4740, 24}, {5749, 1}, {5762, 1}, {5767, 1}, {5771, 1}, {6142, -6}, {6161, -6}, {7219, -40}, {7227, -41}, {7606, -48}, {7614, -48}, {8653, -70}, {8670, -70}, {9038, -78}, {9056, -78}, {10100, -98}, {10114, -98}, {10486, -106}, {10504, -106}, {11541, -138}, {11923, -146}, {11976, -147}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane2 = {{{-3429, -105}, {-2876, -119}, {-2855, -120}, {-2500, -139}, {-2467, -140}, {-1427, -148}, {-1418, -148}, {-1411, -148}, {-1041, -169}, {-1015, -169}, {12, -193}, {16, -193}, {386, -214}, {1449, -212}, {1455, -212}, {1460, -212}, {1834, -233}, {1857, -233}, {2903, -254}, {2913, -255}, {3277, -275}, {4311, -292}, {4347, -293}, {4696, -300}, {4733, -300}, {5741, -334}, {5755, -334}, {5758, -334}, {5764, -334}, {6135, -342}, {6150, -342}, {7208, -378}, {7221, -379}, {7599, -386}, {7607, -386}, {8646, -401}, {8664, -401}, {9032, -409}, {9052, -409}, {10096, -421}, {10108, -421}, {10479, -428}, {10494, -429}, {11531, -459}, {11917, -467}, {11968, -469}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane2 = {536, leftLane2, rightLane2, {NONE}, {NONE}, 534, true, 538, true};

const ST_BOUND leftLane3 = {{{-3429, -105}, {-3244, -109}, {-3235, -110}, {-3225, -110}, {-2855, -120}, {-2470, -141}, {-2197, -143}, {-1828, -145}, {-1814, -145}, {-1427, -148}, {-1041, -169}, {-763, -175}, {-388, -184}, {-378, -184}, {16, -193}, {402, -215}, {654, -214}, {1031, -213}, {1045, -213}, {1449, -212}, {1834, -233}, {2114, -239}, {2488, -246}, {2496, -246}, {2913, -255}, {3298, -276}, {3534, -280}, {3539, -280}, {3543, -280}, {3929, -286}, {4344, -293}, {4345, -293}, {4733, -300}, {4965, -308}, {5350, -321}, {5764, -334}, {6150, -342}, {6396, -351}, {6782, -364}, {7221, -379}, {7607, -386}, {8643, -401}, {8645, -401}, {9032, -409}, {9282, -411}, {9669, -416}, {10092, -421}, {10484, -428}, {10488, -429}, {10685, -434}, {11071, -446}, {11529, -459}, {11908, -467}, {11916, -467}, {11918, -467}, {11968, -469}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane3 = {{{-3436, -438}, {-3253, -448}, {-3243, -448}, {-3228, -449}, {-2857, -451}, {-2472, -454}, {-2199, -455}, {-1846, -475}, {-1825, -475}, {-1430, -480}, {-1044, -484}, {-771, -487}, {-406, -507}, {-382, -508}, {12, -513}, {398, -518}, {655, -522}, {1013, -541}, {1034, -542}, {1445, -546}, {1832, -550}, {2108, -552}, {2471, -572}, {2480, -572}, {2902, -586}, {3287, -599}, {3529, -607}, {3530, -607}, {3534, -607}, {3923, -615}, {4338, -624}, {4340, -624}, {4726, -632}, {4954, -636}, {5340, -644}, {5757, -654}, {6143, -663}, {6386, -669}, {6772, -676}, {7215, -684}, {7601, -692}, {8639, -711}, {8640, -711}, {9026, -718}, {9278, -722}, {9663, -730}, {10089, -745}, {10477, -759}, {10480, -759}, {10675, -766}, {11061, -773}, {11519, -788}, {11902, -801}, {11906, -801}, {11907, -801}, {11960, -803}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane3 = {538, leftLane3, rightLane3, {NONE}, {NONE}, 536, true, 540, true};

const ST_BOUND leftLane4 = {{{-3436, -438}, {-3352, -443}, {-3234, -449}, {-3014, -450}, {-2998, -450}, {-2982, -451}, {-2552, -453}, {-2232, -455}, {-2226, -455}, {-2214, -455}, {-2154, -458}, {-2150, -458}, {-1814, -476}, {-1242, -482}, {-868, -486}, {-853, -486}, {-771, -487}, {-753, -488}, {-385, -508}, {150, -515}, {522, -520}, {533, -520}, {665, -522}, {676, -522}, {1051, -543}, {1576, -547}, {1949, -551}, {1962, -551}, {2108, -552}, {2122, -553}, {2493, -573}, {3009, -590}, {3395, -603}, {3539, -607}, {3923, -615}, {4417, -625}, {4804, -633}, {4946, -636}, {5331, -644}, {5922, -658}, {5925, -658}, {6311, -667}, {6386, -669}, {6772, -676}, {7323, -686}, {7709, -693}, {8700, -712}, {8704, -712}, {9090, -719}, {9282, -722}, {9582, -728}, {9668, -730}, {9973, -741}, {10672, -766}, {10675, -766}, {11053, -773}, {11061, -773}, {11960, -803}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane4 = {{{-3443, -755}, {-3369, -756}, {-3252, -762}, {-3015, -775}, {-3000, -775}, {-2975, -776}, {-2554, -767}, {-2250, -783}, {-2234, -784}, {-2221, -785}, {-2168, -788}, {-2158, -788}, {-1821, -796}, {-1250, -809}, {-886, -828}, {-865, -829}, {-775, -830}, {-772, -830}, {-387, -832}, {146, -834}, {503, -854}, {519, -854}, {658, -857}, {659, -857}, {1045, -864}, {1570, -874}, {1930, -894}, {1949, -894}, {2102, -897}, {2103, -897}, {2489, -902}, {2999, -909}, {3385, -917}, {3532, -921}, {3917, -930}, {4410, -941}, {4797, -949}, {4935, -953}, {5324, -967}, {5911, -986}, {5919, -987}, {6304, -994}, {6382, -995}, {6768, -1000}, {7317, -1006}, {7702, -1013}, {8689, -1045}, {8695, -1045}, {9084, -1053}, {9285, -1052}, {9575, -1050}, {9662, -1051}, {9961, -1057}, {10661, -1081}, {10669, -1081}, {11047, -1089}, {11051, -1089}, {11953, -1118}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane4 = {540, leftLane4, rightLane4, {NONE}, {NONE}, 538, true, 542, true};

const ST_BOUND leftLane5 = {{{-3443, -755}, {-3369, -756}, {-3154, -768}, {-3060, -773}, {-2984, -777}, {-2771, -772}, {-2696, -770}, {-2595, -768}, {-2579, -768}, {-2559, -768}, {-2547, -768}, {-2272, -782}, {-2270, -782}, {-2176, -787}, {-2168, -788}, {-1839, -795}, {-1756, -797}, {-1748, -797}, {-1741, -797}, {-1397, -805}, {-1317, -807}, {-1310, -807}, {-1302, -807}, {-1241, -809}, {-1229, -810}, {-939, -825}, {-856, -830}, {-72, -833}, {1, -833}, {15, -833}, {25, -833}, {146, -834}, {162, -835}, {379, -847}, {473, -852}, {531, -855}, {809, -860}, {885, -862}, {894, -862}, {1268, -868}, {1349, -870}, {1577, -874}, {1726, -882}, {1821, -887}, {1962, -895}, {2167, -898}, {2241, -899}, {2251, -899}, {2258, -899}, {2596, -904}, {2675, -905}, {2686, -905}, {2693, -905}, {2993, -909}, {2996, -909}, {3048, -910}, {3144, -912}, {3385, -917}, {3505, -920}, {3585, -922}, {3922, -930}, {4022, -932}, {4029, -932}, {4037, -932}, {4381, -940}, {4396, -941}, {4457, -942}, {4466, -942}, {4472, -942}, {4795, -949}, {4799, -949}, {4841, -950}, {4935, -953}, {5258, -964}, {5345, -967}, {5349, -967}, {5352, -968}, {5711, -980}, {5806, -983}, {5918, -987}, {6143, -991}, {6221, -993}, {6285, -994}, {6568, -997}, {6664, -998}, {6676, -999}, {6685, -999}, {7036, -1003}, {7111, -1003}, {7123, -1004}, {7135, -1004}, {7317, -1006}, {7479, -1009}, {7556, -1011}, {7564, -1011}, {7573, -1011}, {7703, -1013}, {7924, -1021}, {8018, -1024}, {8599, -1042}, {8693, -1045}, {8698, -1045}, {9057, -1052}, {9111, -1053}, {9126, -1053}, {9138, -1053}, {9507, -1050}, {9541, -1050}, {9543, -1050}, {9593, -1050}, {9605, -1050}, {9611, -1050}, {9614, -1051}, {9961, -1057}, {9987, -1058}, {10081, -1062}, {10425, -1073}, {10520, -1076}, {10661, -1081}, {10885, -1086}, {10963, -1087}, {10971, -1087}, {10977, -1088}, {11047, -1089}, {11343, -1098}, {11429, -1101}, {11433, -1101}, {11437, -1102}, {11811, -1114}, {11897, -1116}, {11901, -1116}, {11905, -1117}, {11953, -1118}}, false};
const ST_BOUND rightLane5 = {{{-3451, -1112}, {-3370, -1112}, {-3173, -1113}, {-3079, -1117}, {-2988, -1118}, {-2762, -1122}, {-2687, -1124}, {-2606, -1127}, {-2586, -1128}, {-2565, -1129}, {-2558, -1129}, {-2290, -1137}, {-2286, -1137}, {-2195, -1141}, {-2179, -1141}, {-1847, -1151}, {-1764, -1155}, {-1758, -1155}, {-1746, -1155}, {-1405, -1160}, {-1325, -1164}, {-1321, -1164}, {-1309, -1164}, {-1248, -1165}, {-1247, -1165}, {-958, -1170}, {-871, -1174}, {-80, -1194}, {0, -1198}, {4, -1198}, {14, -1198}, {140, -1200}, {142, -1200}, {360, -1203}, {454, -1207}, {530, -1207}, {803, -1208}, {879, -1211}, {880, -1211}, {1257, -1223}, {1343, -1227}, {1564, -1235}, {1707, -1240}, {1801, -1244}, {1960, -1245}, {2163, -1246}, {2236, -1249}, {2239, -1249}, {2246, -1250}, {2591, -1258}, {2670, -1261}, {2674, -1261}, {2681, -1261}, {2984, -1269}, {2990, -1269}, {3041, -1270}, {3137, -1274}, {3389, -1271}, {3497, -1270}, {3576, -1273}, {3913, -1291}, {4013, -1295}, {4019, -1295}, {4031, -1296}, {4373, -1301}, {4380, -1301}, {4450, -1304}, {4452, -1304}, {4458, -1305}, {4785, -1313}, {4787, -1313}, {4829, -1315}, {4923, -1319}, {5246, -1322}, {5333, -1326}, {5338, -1326}, {5344, -1326}, {5699, -1334}, {5794, -1339}, {5924, -1336}, {6136, -1333}, {6214, -1336}, {6269, -1339}, {6563, -1353}, {6660, -1357}, {6664, -1357}, {6674, -1358}, {7032, -1364}, {7107, -1367}, {7113, -1367}, {7125, -1368}, {7313, -1370}, {7472, -1371}, {7548, -1375}, {7555, -1375}, {7569, -1375}, {7699, -1377}, {7912, -1379}, {8007, -1383}, {8588, -1392}, {8682, -1396}, {8698, -1396}, {9050, -1397}, {9111, -1399}, {9115, -1399}, {9127, -1400}, {9504, -1404}, {9528, -1405}, {9543, -1405}, {9589, -1407}, {9591, -1407}, {9597, -1407}, {9607, -1408}, {9952, -1417}, {9975, -1418}, {10069, -1422}, {10413, -1427}, {10508, -1431}, {10658, -1432}, {10878, -1434}, {10956, -1437}, {10958, -1438}, {10965, -1438}, {11038, -1440}, {11331, -1447}, {11417, -1450}, {11420, -1451}, {11426, -1451}, {11799, -1463}, {11886, -1467}, {11889, -1467}, {11895, -1467}, {11945, -1468}}, false};
const ST_LANE lane5 = {542, leftLane5, rightLane5, {NONE}, {NONE}, 540, true, 544, true};

const ST_BOUND leftLane6 = {{{-3451, -1112}, {-3173, -1113}, {-3079, -1117}, {-2735, -1122}, {-2640, -1126}, {-2290, -1137}, {-2195, -1141}, {-1843, -1151}, {-1749, -1155}, {-1405, -1160}, {-1310, -1164}, {-1220, -1166}, {-958, -1170}, {-863, -1174}, {-515, -1184}, {-421, -1188}, {-65, -1195}, {28, -1199}, {360, -1203}, {454, -1207}, {795, -1208}, {809, -1209}, {897, -1212}, {1267, -1224}, {1361, -1228}, {1707, -1240}, {1801, -1244}, {2163, -1246}, {2257, -1250}, {2597, -1258}, {2692, -1262}, {3042, -1270}, {3130, -1274}, {3137, -1274}, {3484, -1270}, {3503, -1270}, {3591, -1274}, {3934, -1292}, {4028, -1296}, {4373, -1301}, {4467, -1305}, {4829, -1315}, {4923, -1319}, {5246, -1322}, {5340, -1326}, {5699, -1334}, {5794, -1339}, {6122, -1333}, {6142, -1334}, {6231, -1337}, {6589, -1354}, {6683, -1358}, {6765, -1360}, {7036, -1364}, {7131, -1368}, {7472, -1371}, {7566, -1375}, {7912, -1379}, {8007, -1383}, {8588, -1392}, {8682, -1396}, {9050, -1397}, {9145, -1401}, {9515, -1404}, {9609, -1408}, {9975, -1418}, {10069, -1422}, {10413, -1427}, {10508, -1431}, {10832, -1434}, {10957, -1438}, {10962, -1438}, {11012, -1439}, {11029, -1439}, {11331, -1447}, {11426, -1451}, {11799, -1463}, {11894, -1467}, {11945, -1468}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane6 = {{{-3459, -1485}, {-3182, -1491}, {-3087, -1493}, {-2743, -1501}, {-2649, -1503}, {-2298, -1511}, {-2204, -1513}, {-1851, -1521}, {-1757, -1523}, {-1413, -1531}, {-1319, -1533}, {-1226, -1535}, {-966, -1542}, {-872, -1544}, {-524, -1552}, {-430, -1554}, {-74, -1563}, {19, -1565}, {351, -1573}, {445, -1575}, {786, -1584}, {794, -1584}, {888, -1586}, {1258, -1595}, {1352, -1597}, {1698, -1606}, {1792, -1608}, {2154, -1617}, {2248, -1619}, {2589, -1627}, {2683, -1629}, {3033, -1638}, {3114, -1640}, {3129, -1640}, {3476, -1647}, {3488, -1648}, {3583, -1650}, {3926, -1657}, {4021, -1659}, {4365, -1667}, {4459, -1669}, {4821, -1677}, {4915, -1679}, {5238, -1686}, {5332, -1688}, {5691, -1695}, {5786, -1698}, {6114, -1705}, {6128, -1705}, {6223, -1707}, {6581, -1715}, {6676, -1717}, {6760, -1719}, {7028, -1725}, {7123, -1727}, {7464, -1734}, {7558, -1736}, {7904, -1744}, {7999, -1746}, {8579, -1759}, {8674, -1761}, {9042, -1769}, {9136, -1771}, {9506, -1779}, {9601, -1781}, {9967, -1790}, {10061, -1792}, {10405, -1799}, {10500, -1801}, {10829, -1809}, {10935, -1816}, {10945, -1817}, {11002, -1821}, {11015, -1821}, {11318, -1832}, {11413, -1835}, {11786, -1848}, {11881, -1851}, {11935, -1853}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane6 = {544, leftLane6, rightLane6, {NONE}, {NONE}, 542, true, NONE, false};

const ST_LANE laneNet[MAXL] = {lane1, lane2, lane3, lane4, lane5, lane6};

const bool staticObsExists = false;
const ST_RECTANGLE staticObs[MAXSO] = {{{NONE, NONE}, NONE, NONE, NONE}};

const ST_PLANNING planning = {{4281, 206}};


//Kaige generated code ends

typedef struct {
    uint16_t time;
    double acceleration;
    double yawRate;
}ST_PAIR;

const int P = 1;
const uint8_t MAXTIME = 10;
const uint8_t pLen0 = 5;
const ST_PAIR policy0[pLen0] = {{0, 0.0, 0.0}, {2, 0.0, -0.4}, {4, 0.0, 0.4}, {6, 0.0, 0.0}, {MAXTIME, 0.0, 0.0}};
broadcast chan chooseEgo, chooseObs, begin, update;

ST_DSTATE dStateEgo;
ST_VARIABLES vars;      // continuous variables
hybrid clock D;         /// "cost" of distance used in strategy optimization
clock time;             // global time

double i2d(const int i) {
    const double SCALE = 100.0; // scale from int to double: 100 = 1.0
    double v = i/SCALE;
    return v;
}

int d2i(const double i) {
    const double SCALE = 100.0; // scale from int to double: 100 = 1.0
    int v = fint(i*SCALE);
    return v;
}

double getDisP2P(const ST_DPOINT &amp;p1, const ST_DPOINT &amp;p2) {
    double distance = 0.0;
    double rx1 = i2d(p1.x), ry1 = i2d(p1.y);
    double rx2 = i2d(p2.x), ry2 = i2d(p2.y);
    distance = sqrt(pow(rx1 - rx2, 2) + pow(ry1 - ry2, 2));

    return distance;
}

double getDisP2L(const ST_DPOINT &amp;p, const ST_DLINE &amp;l) {
    // do nothing for now
    double distance = 0.0;

    return distance;
}

const double THRESHOLD = 2.0;
bool collision(const ST_RECTANGLE &amp;obj, ST_RECTANGLE staticObs) {
    double distance;
    distance = getDisP2P(obj.center, staticObs.center);
    if(distance &lt;= THRESHOLD) {
        return true;
    }
    return false;
}

bool outOfRoad(const ST_RECTANGLE &amp;obj) {
    if(obj.center.x &lt; lane1.left.points[0].x || obj.center.x &gt; lane1.left.points[1].x)
        return true;
    if(obj.center.y &lt; lane1.right.points[0].y || obj.center.y &gt; lane3.left.points[0].y)   
        return true;

    return false;  
}

void initCon(ST_VARIABLES &amp;vars, const ST_CSTATE &amp;initCS) {
    vars.x = initCS.position.x;
    vars.y = initCS.position.y;
    vars.velocity = initCS.velocity;
    vars.orientation = initCS.orientation;
    vars.acceleration = initCS.acceleration;
    vars.yawRate = initCS.yawRate;

    time = 0;
    if(dStateEgo.detection.reach) 
        D = 0; // only reset the reward function when reaching the goal
    if(dStateEgo.detection.collide || dStateEgo.detection.outside)
        D = D + 100; // punish the ego when it collides or goes outside the road    
}

void initDis(ST_DSTATE &amp;dState, const ST_CSTATE &amp;initCS) {
    dState.position.x = d2i(initCS.position.x);
    dState.position.y = d2i(initCS.position.y);
    dState.velocity = d2i(initCS.velocity);
    dState.orientation = d2i(initCS.orientation);
    dState.acceleration = d2i(initCS.acceleration);
    dState.yawRate = d2i(initCS.yawRate);

    dState.detection.collide = false;
    dState.detection.outside = false;
    dState.detection.reach = false;
}


void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;
    dState.detection.outside = outOfRoad(shape);
    dState.detection.reach = (getDisP2P(shape.center, planning.goal) &lt;= THRESHOLD);
    if(staticObsExists) {
        for(i = 0; i &lt; MAXSO; i++) {
            dState.detection.collide |= collision(shape, staticObs[i]);
        }
    }
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}


</declaration>
	<template>
		<name x="5" y="5">MovingObs</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape</parameter>
		<declaration>// Place local declarations here.
ST_VARIABLES vars;  // continuous variables
ST_DSTATE dState;   // discrete state
uint8_t pc = 0;     // policy counter
uint8_t tc = 0;     // time counter
ST_RECTANGLE self;

void initialize() {
    pc = 0;
    tc = 0;
    initCon(vars,initCS);
    initDis(dState,initCS);
    self = shape;
}

void decisionMaking() {
    if(pc &lt; pLen0 &amp;&amp; tc == policy0[pc].time) {
        vars.acceleration = policy0[pc].acceleration;
        vars.yawRate = policy0[pc].yawRate;
        dState.acceleration = d2i(policy0[pc].acceleration);
        dState.yawRate = d2i(policy0[pc].yawRate);
        pc++;
    }
    else if(pc &lt; pLen0) {
        tc++;
    }
    else if(pc &gt;= pLen0 - 1) {
        vars.velocity = 0;
        vars.acceleration = 0;
        vars.yawRate = 0;
        dState.velocity = 0;
        dState.acceleration = 0;
        dState.yawRate = 0;
    }
}









</declaration>
		<location id="id0" x="-102" y="-34">
			<name x="-76" y="-34">Move</name>
			<label kind="invariant" x="-255" y="-17">vars.x' == vars.velocity*cos(vars.orientation) &amp;&amp;
vars.y' == vars.velocity*sin(vars.orientation) &amp;&amp;
vars.velocity' == vars.acceleration &amp;&amp;
vars.orientation' == vars.yawRate &amp;&amp;
vars.yawRate' == 0 &amp;&amp;
vars.acceleration' == 0</label>
		</location>
		<init ref="id0"/>
		<transition id="id1" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-161" y="-119">update?</label>
			<label kind="assignment" x="-161" y="-102">updateDis(dState,self)</label>
			<nail x="-136" y="-102"/>
			<nail x="-68" y="-102"/>
		</transition>
		<transition id="id2" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-246" y="-68">begin?</label>
			<label kind="assignment" x="-246" y="-51">initialize()</label>
			<nail x="-170" y="-68"/>
			<nail x="-170" y="-34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-34" y="-68">chooseObs?</label>
			<label kind="assignment" x="-42" y="-51">decisionMaking()</label>
			<nail x="-34" y="-34"/>
			<nail x="-34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_RULES &amp;rules</parameter>
		<declaration>typedef int[0,0] BRAKE_t;    // 1 gear of brake force
typedef int[0,0] PUSH_t;     // 1 gear of push force
typedef int[0,1] TURN_t;     // 2 speeds of turning 

const int8_t Brake[3] = {d2i(-0.1), d2i(-0.2), d2i(-0.3)};
const int8_t Push[3] = {d2i(0.1), d2i(0.2), d2i(0.3)};
const int8_t Turn[2] = {d2i(0.4), d2i(-0.4)};
const bool CONSTANTSPEED = true;

ST_RECTANGLE self;

void initialize() {
    initDis(dStateEgo,initCS);
    self = shape;
}

void opConst() {
    dStateEgo.acceleration = 0;
    vars.acceleration = 0;
}

void opAcc(int gear) {
    dStateEgo.acceleration = Push[gear];
    vars.acceleration = i2d(Push[gear]);
}

void opBrake(int gear) {
    dStateEgo.acceleration = Brake[gear];
    vars.acceleration = i2d(Brake[gear]);
}

/*int nextX = 0;
int nextY = 0;
int nextRate = 0;
int nextOrientation = 0;*/
void opTurn(int dir) {
    int nr = Turn[dir];
    int no = dStateEgo.orientation;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(no);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int nx = self.center.x + d2i(vx) * P;
    int ny = self.center.y + d2i(vy) * P;

    /*nextX = nx;
    nextY = ny;
    nextRate = nr;
    nextOrientation = no;*/

    dStateEgo.yawRate = Turn[dir];
    vars.yawRate = i2d(Turn[dir]);
}

void keep() {
    dStateEgo.yawRate = 0;
    vars.yawRate = 0.0;
}

bool canAcc(int gear) {
    int nextAcc = Push[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextAcc &lt;= rules.maxVelocity) 
        return true;
    return false;
}

bool canDec(int gear) {
    int nextDec = Brake[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextDec &gt;= rules.minVelocity) 
        return true;
    return false;
}

bool canTurn(int dir) {
    int nextRate = Turn[dir];
    int nextOrientation = dStateEgo.orientation + P*nextRate;
    ST_RECTANGLE nextShape = shape;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(nextOrientation);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);

    nextShape.center.x = self.center.x + d2i(vx) * P;
    nextShape.center.y = self.center.y + d2i(vy) * P;
    nextShape.orientation = nextOrientation;

    if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation &amp;&amp; !outOfRoad(nextShape)) 
        return true;
    return false;
}</declaration>
		<location id="id4" x="-340" y="-136">
			<name x="-433" y="-161">Turn_Const</name>
			<label kind="comments" x="-34" y="-51">One cannot turn and 
acc or brake 
simutaneously.</label>
		</location>
		<location id="id5" x="-68" y="136">
			<name x="-187" y="136">Straight_Dec</name>
		</location>
		<location id="id6" x="-68" y="-136">
			<name x="-51" y="-170">Straight_Acc</name>
		</location>
		<location id="id7" x="-204" y="0">
			<name x="-289" y="-17">Choose</name>
			<committed/>
		</location>
		<location id="id8" x="-340" y="136">
			<name x="-476" y="161">Straight_Const</name>
		</location>
		<init ref="id8"/>
		<transition id="id9" controllable="false">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-280" y="187">begin?</label>
			<label kind="assignment" x="-195" y="187">initialize()</label>
			<nail x="-68" y="204"/>
			<nail x="-340" y="204"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-424" y="-221">begin?</label>
			<label kind="assignment" x="-424" y="-204">initialize()</label>
			<nail x="-68" y="-204"/>
			<nail x="-442" y="-204"/>
			<nail x="-442" y="0"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id4"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-433" y="-34">begin?</label>
			<label kind="assignment" x="-433" y="-17">initialize()</label>
			<nail x="-408" y="-136"/>
			<nail x="-408" y="0"/>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-306" y="144">update?</label>
			<label kind="assignment" x="-306" y="161">updateDis(dStateEgo,self)</label>
			<nail x="-331" y="170"/>
			<nail x="-306" y="170"/>
		</transition>
		<transition id="id13" controllable="false">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-25" y="93">update?</label>
			<label kind="assignment" x="-25" y="119">updateDis(dStateEgo,self)</label>
			<nail x="-34" y="102"/>
			<nail x="-34" y="136"/>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-42" y="-144">update?</label>
			<label kind="assignment" x="-42" y="-127">updateDis(dStateEgo,self)</label>
			<nail x="-34" y="-136"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-314" y="-187">update?</label>
			<label kind="assignment" x="-314" y="-170">updateDis(dStateEgo,self)</label>
			<nail x="-306" y="-170"/>
			<nail x="-340" y="-170"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-357" y="-68">chooseEgo?</label>
			<label kind="assignment" x="-357" y="-51">keep()</label>
			<label kind="comments" x="-34" y="25">Keeps moving with 
this angle</label>
			<nail x="-340" y="-68"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-467" y="102">begin?</label>
			<label kind="assignment" x="-467" y="119">initialize()</label>
			<nail x="-374" y="102"/>
			<nail x="-374" y="127"/>
		</transition>
		<transition id="id18">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="select" x="-263" y="-93">d:TURN_t</label>
			<label kind="guard" x="-263" y="-76">canTurn(d)</label>
			<label kind="assignment" x="-263" y="-59">opTurn(d)</label>
			<nail x="-272" y="-136"/>
		</transition>
		<transition id="id19">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="102">chooseEgo?</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition id="id20">
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="select" x="-144" y="17">f:BRAKE_t</label>
			<label kind="guard" x="-144" y="34">canDec(f)</label>
			<label kind="assignment" x="-144" y="51">opBrake(f)</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition id="id21">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="-119">chooseEgo?</label>
			<nail x="-136" y="-136"/>
		</transition>
		<transition id="id22">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-136" y="-76">f:PUSH_t</label>
			<label kind="guard" x="-136" y="-59">canAcc(f)</label>
			<label kind="assignment" x="-136" y="-42">opAcc(f)</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition id="id23">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-340" y="51">opConst()</label>
			<nail x="-340" y="68"/>
		</transition>
		<transition id="id24">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-314" y="102">chooseEgo?</label>
			<nail x="-272" y="136"/>
		</transition>
	</template>
	<template>
		<name>Decisions</name>
		<declaration>clock timer;
int counter = 0;</declaration>
		<location id="id25" x="102" y="68">
			<name x="110" y="42">Idle</name>
			<label kind="invariant" x="85" y="85">timer&lt;=P</label>
		</location>
		<location id="id26" x="102" y="-34">
			<name x="92" y="-68">Done</name>
			<urgent/>
		</location>
		<location id="id27" x="-68" y="-34">
			<name x="-78" y="-68">ObsGo</name>
			<urgent/>
		</location>
		<location id="id28" x="-204" y="-34">
			<name x="-214" y="-68">EgoGo</name>
			<urgent/>
		</location>
		<location id="id29" x="-340" y="-34">
			<name x="-350" y="-68">Start</name>
			<urgent/>
		</location>
		<init ref="id29"/>
		<transition id="id30" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-348" y="51">counter==MAXTIME</label>
			<label kind="synchronisation" x="-348" y="68">begin!</label>
			<label kind="assignment" x="-348" y="85">timer=0,counter=0</label>
			<nail x="68" y="102"/>
			<nail x="-340" y="102"/>
			<nail x="-340" y="0"/>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-280" y="-59">begin!</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-170" y="0">timer==P&amp;&amp;
counter!=MAXTIME</label>
			<label kind="synchronisation" x="-170" y="42">update!</label>
			<label kind="assignment" x="-102" y="42">timer=0,counter++</label>
			<nail x="-204" y="68"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="59" y="-8">timer=0</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-34" y="-59">chooseObs!</label>
		</transition>
		<transition id="id35" controllable="false">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-170" y="-59">chooseEgo!</label>
		</transition>
	</template>
	<template>
		<name>Dynamics</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS</parameter>
		<declaration>// Place local declarations here.</declaration>
		<location id="id36" x="0" y="0">
			<name x="-59" y="-8">Move</name>
			<label kind="invariant" x="-161" y="17">vars.x' == vars.velocity*cos(vars.orientation) &amp;&amp;
vars.y' == vars.velocity*sin(vars.orientation) &amp;&amp;
vars.velocity' == vars.acceleration &amp;&amp;
vars.orientation' == vars.yawRate &amp;&amp;
vars.yawRate' == 0 &amp;&amp;
vars.acceleration' == 0 &amp;&amp;
D' == getDisP2P(dStateEgo.position, planning.goal) 
      - dStateEgo.detection.reach * 100 
      + dStateEgo.detection.collide * 50 
      + dStateEgo.detection.outside * 50</label>
		</location>
		<init ref="id36"/>
		<transition id="id37" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="68" y="-68">update?</label>
			<label kind="assignment" x="68" y="-51">updateCon(vars)</label>
			<nail x="68" y="-68"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition id="id38" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-161" y="-68">begin?</label>
			<label kind="assignment" x="-161" y="-51">initCon(vars,initCS)</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-68"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//const ST_DSTATE initDS1 = {{225, 350}, 230, 0, 0, 0};
const ST_CSTATE initCS1 = {{2.25, 3.50}, 2.30, 0.0, 0.0, 0.0};
const ST_RECTANGLE shapeObs1 = {{225, 350}, 200, 450, 0};
obs1 = MovingObs(1, initCS1, shapeObs1);

const ST_CSTATE initEgo = {{2.25, 7.0}, 3.0, 0.0, 0.0, 0.0};
const ST_RECTANGLE shapeEgo = {{225, 700}, 200, 450, 0};
const ST_RULES rules = {400, 0, 157, -157}; 
egoController = Controller(1, initEgo, shapeEgo, rules);
egoDynamics = Dynamics(1, initEgo);

// List one or more processes to be composed into a system.
system Decisions, egoController, egoDynamics, obs1;
//system Decisions, obs1;
</system>
	<queries>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.x, obs1.vars.y }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.velocity, obs1.vars.orientation, obs1.vars.yawRate, obs1.vars.acceleration }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.acceleration, i2d(obs1.dState.acceleration) }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.yawRate, i2d(obs1.dState.yawRate) }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.velocity, i2d(obs1.dState.velocity) }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.orientation, i2d(obs1.dState.orientation) }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { obs1.vars.x, i2d(obs1.dState.position.x), obs1.vars.y, i2d(obs1.dState.position.y) }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30;100] { sqrt(pow(obs1.vars.x-i2d(obs1.dState.position.x),2) + pow(obs1.vars.y-i2d(obs1.dState.position.y),2)) }</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>//</comment>
		</query>
		<query>
			<formula>simulate [&lt;=30;100] { vars.x-i2d(dStateEgo.position.x), vars.y-i2d(dStateEgo.position.y) }</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>//</comment>
		</query>
		<query>
			<formula>A[] !dStateEgo.detection.collide</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] !dStateEgo.detection.outside</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>//</comment>
		</query>
		<query>
			<formula>strategy safe = control:A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside</formula>
			<comment/>
		</query>
		<query>
			<formula>saveStrategy("/Users/rgu01/Library/CloudStorage/OneDrive-Mälardalensuniversitet/Documents/Postdoc/Conferences/2024/ISoLA/models/safe.out", safe)</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { vars.acceleration, i2d(dStateEgo.acceleration), vars.velocity, i2d(dStateEgo.velocity) } under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { vars.yawRate, i2d(dStateEgo.orientation), vars.orientation } under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30] { vars.x, i2d(dStateEgo.position.x), vars.y, i2d(dStateEgo.position.y) } under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30;100] { vars.x-i2d(dStateEgo.position.x), vars.y-i2d(dStateEgo.position.y) } under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=10](&lt;&gt;dStateEgo.detection.reach) under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=100;100](min:getDisP2P(dStateEgo.position, staticObs[0].center)) under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=100;100](min:getDisP2P(dStateEgo.position, planning.goal)) under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>//</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy reachSafe = minE(D) [&lt;=MAXTIME] {egoController.location, dStateEgo.position.x, dStateEgo.position.y,
					  dStateEgo.velocity, dStateEgo.orientation, dStateEgo.acceleration,
					  dStateEgo.yawRate}-&gt;{}: &lt;&gt; time&gt;=MAXTIME under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30;100] { getDisP2P(dStateEgo.position, planning.goal) } under safe</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=30;100] { getDisP2P(dStateEgo.position, planning.goal) } under reachSafe</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=10](&lt;&gt; dStateEgo.detection.reach) under reachSafe</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=100;100](min:getDisP2P(dStateEgo.position, staticObs[0].center)) under reachSafe</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=100;100](min:getDisP2P(dStateEgo.position, planning.goal)) under reachSafe</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>//</comment>
		</query>
		<query>
			<formula>strategy reach = minE(D) [&lt;=MAXTIME] {egoController.location, dStateEgo.position.x, dStateEgo.position.y,
					  dStateEgo.velocity, dStateEgo.orientation, dStateEgo.acceleration,
					  dStateEgo.yawRate}-&gt;{}: &lt;&gt; time&gt;=MAXTIME</formula>
			<comment/>
		</query>
		<query>
			<formula>saveStrategy("/home/ron/Projects/Commonroad/uppaal/reach.out", reach)</formula>
			<comment/>
		</query>
		<query>
			<formula>A&lt;&gt; dStateEgo.detection.reach under reach</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside under reach</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=MAXTIME] { vars.x, i2d(dStateEgo.position.x), vars.y, i2d(dStateEgo.position.y) } under reach</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=100;100](min:getDisP2P(dStateEgo.position, staticObs[0].center)) under reach</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=100;100](min:getDisP2P(dStateEgo.position, planning.goal)) under reach</formula>
			<comment/>
		</query>
	</queries>
</nta>
