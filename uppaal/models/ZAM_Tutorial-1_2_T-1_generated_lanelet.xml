<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Generated scenario starts
const int P = 1;
const uint8_t MAXTIME = 10;
const int MAXP = 2;
const int NONE = -1;
const int MAXL = 3;
const int MAXSO = 1;
const int MAXDO = 2;
const int MAXTP = 40;
const int MAXPRE = 1;
const int MAXSUC = 1;
const double SCALE = 100.0;
const int THRESHOLD = 200;
const double TIMESTEPSIZE = 0.1;

typedef int[-1,65535] id_t;

typedef struct {
    int32_t x;
    int32_t y;
}ST_DPOINT;

typedef struct {
    double x;
    double y;
}ST_CPOINT;

typedef struct {
    ST_DPOINT ends[2];
}ST_DLINE;

typedef struct {
    ST_DPOINT points[MAXP];
    bool dashLine;
}ST_BOUND;

typedef struct {
    id_t ID;
    ST_BOUND left;
    ST_BOUND right;
    id_t predecessor[MAXPRE];
    id_t successor[MAXSUC];
    id_t adjLeft;
    bool dirLeft;
    id_t adjRight;
    bool dirRight;
}ST_LANE;

typedef struct {
    bool collide; // collision
    bool outside; // outside road
    bool reach;   // reach the goal
}ST_DETECTION;

typedef struct {
    ST_CPOINT position;
    double velocity;
    double orientation;
    double acceleration;
    double yawRate;
}ST_CSTATE;

typedef struct {
    ST_DPOINT position;
    int16_t velocity;
    int16_t orientation;
    int16_t acceleration;
    int16_t yawRate;
    ST_DETECTION detection;
}ST_DSTATE;

typedef struct {
    hybrid clock x;
    hybrid clock y;
    hybrid clock velocity;
    hybrid clock orientation;
    hybrid clock acceleration;
    hybrid clock yawRate;
}ST_VARIABLES;

typedef struct {
    ST_DPOINT center;
    int16_t width;
    int16_t length;
    int16_t orientation;
}ST_RECTANGLE;

typedef struct {
    int maxVelocity;
    int minVelocity;
    int maxOrientation;
    int minOrientation;
}ST_RULES;

typedef struct {
    ST_DPOINT goal;
}ST_PLANNING;

typedef struct {
    int32_t time;
    ST_CSTATE cState;
}ST_PAIR;
const ST_BOUND leftLane1 = {{{0, 175}, {19900, 175}}, false};
const ST_BOUND rightLane1 = {{{0, -175}, {19900, -175}}, false};
const ST_LANE lane1 = {1, leftLane1, rightLane1, {NONE}, {NONE}, 2, false, NONE, false};

const ST_BOUND leftLane2 = {{{0, 525}, {19900, 525}}, false};
const ST_BOUND rightLane2 = {{{0, 175}, {19900, 175}}, false};
const ST_LANE lane2 = {2, leftLane2, rightLane2, {NONE}, {NONE}, 3, true, 1, false};

const ST_BOUND leftLane3 = {{{0, 875}, {19900, 875}}, false};
const ST_BOUND rightLane3 = {{{0, 525}, {19900, 525}}, false};
const ST_LANE lane3 = {3, leftLane3, rightLane3, {NONE}, {NONE}, NONE, false, 2, true};

const ST_LANE laneNet[MAXL] = {lane1, lane2, lane3};

const bool staticObsExists = true;
const ST_RECTANGLE staticObs[MAXSO] = {{{3000, 350}, 200, 450, 2}};

const ST_PLANNING planning = {{9950, 0}};


// Generated scenario ends

broadcast chan chooseEgo, chooseObs, begin, update;

ST_DSTATE dStateEgo;       // discrete variables
ST_VARIABLES varsEgo;      // continuous variables
ST_RECTANGLE shapeEgo;     // shape of ego vehicle
hybrid clock D;            /// "cost" of distance used in strategy optimization
clock time;                // global time

double i2d(const int32_t i) {
    double v = i/SCALE;
    return v;
}

int32_t d2i(const double i) {
    int32_t v = fint(i*SCALE);
    return v;
}

double mTimeStep(const double value) {
    return value*TIMESTEPSIZE;
}

int getDisP2P(const ST_DPOINT &amp;p1, const ST_DPOINT &amp;p2) {
    double distance = 0.0;
    double rx1 = i2d(p1.x), ry1 = i2d(p1.y);
    double rx2 = i2d(p2.x), ry2 = i2d(p2.y);
    distance = sqrt(pow(rx1 - rx2, 2) + pow(ry1 - ry2, 2));

    return d2i(distance);
}

// Function to calculate the corner points of a rectangle
void calculateCornerPoints(ST_RECTANGLE veh_state, ST_DPOINT &amp;corners[4]) {
    double halfLength = i2d(veh_state.length)/2.0;
    double halfWidth = i2d(veh_state.width)/2.0;
    double angle = i2d(veh_state.orientation);

    // Calculate the coordinates of each corner point based on the center, length, width, and orientation
    corners[0].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) - halfWidth*sin(angle));
    corners[0].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) + halfWidth*cos(angle));

    corners[1].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) + halfWidth*sin(angle));
    corners[1].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) - halfWidth*cos(angle));

    corners[2].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) + halfWidth*sin(angle));
    corners[2].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) - halfWidth*cos(angle));

    corners[3].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) - halfWidth*sin(angle));
    corners[3].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) + halfWidth*cos(angle));
}

// Function to check if all elements in the vector (size=4) have the same sign
bool same_sign(int32_t vec[4]) {
    int i = 0;
    int sign = (vec[0] &gt;= 0) ? 1 : -1; // Get the sign of the first element
    for (i = 1; i &lt; 4; i++) {
        if ((vec[i] &gt;= 0) != (sign &gt;= 0)) {
            return false; // Different signs found
        }
    }
    return true; // All elements have the same sign
}

// check if pt1 is on the same line defined by pt2-pt3
bool check_online(ST_DPOINT pt1, ST_DPOINT pt2, ST_DPOINT pt3) {
    double dis12, dis13, dis23;

    dis12 = sqrt(pow(pt1.x - pt2.x, 2) + pow(pt1.y - pt2.y, 2));
    dis13 = sqrt(pow(pt1.x - pt3.x, 2) + pow(pt1.y - pt3.y, 2));
    dis23 = sqrt(pow(pt2.x - pt3.x, 2) + pow(pt2.y - pt3.y, 2));
    if (dis12 + dis13 == dis23)
        return true;
    else
        return false; 
}

// Check if any corner of box2 is outside box1
int check_coverage(ST_DPOINT box1[4], ST_DPOINT box2[4]) {
    int i = 0, j = 0;
    int32_t abx = 0, aby = 0, apx = 0, apy = 0;
    int32_t cross_prod[4];
    int inside_sum = 0;
    int is_online = 0;
    // Check if all corners of box2 fall outside the bounding box of box1   
    for (i = 0; i &lt; 4; i++) {
        // get the x y coordinate of the test points
        for (j = 0; j &lt; 4; j++) {
            abx = box1[(j+1)%4].x - box1[j].x; // when j+1=4, back to the first one
            aby = box1[(j+1)%4].y - box1[j].y;
            apx = box2[i].x - box1[j].x;
            apy = box2[i].y - box1[j].y;
            // cross product of ab and ap
            cross_prod[j] = abx*apy - apx*aby;
            // check if on the line
            if (check_online(box2[i], box1[j], box1[(j+1)%4]) == 1)
                is_online = 1;
        }
        // if all the cross production have the same sign, then the test point is within the box1
        if (same_sign(cross_prod) || is_online == 1)
            inside_sum++;
    }
    return inside_sum;
}

// Function to count non-zero elements in a 2D array
int check_pts_num(ST_DPOINT lane_pts[MAXP]) {
    uint16_t count = 0;
    // NONE or 0?
    while (count &lt; MAXP &amp;&amp; (lane_pts[count].x != NONE || lane_pts[count].y != NONE)){
        count++;
    }
    return count;
}

// check if veh_state are not covered by laneNet, or if vehicle rectangle touches laneNet
// can this function call check_inlane_lane_single?
bool check_inlane_laneNet(ST_RECTANGLE veh_state, int &amp;lane, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t i_lane = 0;
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;
    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];

    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);
    for(i_lane = 0; i_lane &lt; MAXL; i_lane++){
        // check the number of points in each lane
        num_box = check_pts_num(laneNet[i_lane].left.points) - 1;
        for (i_box = 0; i_box &lt; num_box; i_box++){
            // define the corner of the road box
            box_corners[0] = laneNet[i_lane].right.points[i_box];
            box_corners[1] = laneNet[i_lane].right.points[i_box + 1];
            box_corners[2] = laneNet[i_lane].left.points[i_box + 1];
            box_corners[3] = laneNet[i_lane].left.points[i_box];
            // check if the inlane status of the vehicle box to the current box
            inlane_pts_num += check_coverage(box_corners, veh_corners);    
        }
    }
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

// check if veh_state are not covered by a single lane, or if vehicle rectangle touches the edge of the lane
bool check_inlane_lane_single(const ST_LANE lane, ST_RECTANGLE veh_state, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;

    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];
    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);

    // check the number of points in the lane
    num_box = check_pts_num(lane.left.points) - 1;
    for (i_box = 0; i_box &lt; num_box; i_box++){
        // define the corner of the road box
        box_corners[0] = lane.right.points[i_box];
        box_corners[1] = lane.right.points[i_box + 1];
        box_corners[2] = lane.left.points[i_box + 1];
        box_corners[3] = lane.left.points[i_box];
        // check if the inlane status of the vehicle box to the current box
        inlane_pts_num += check_coverage(box_corners, veh_corners);         
    }
    
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

int32_t compute_approximating_circle_radius(int ego_length, int ego_width) {
    double length = i2d(ego_length);
    double width = i2d(ego_width);
    double square_length, diagonal_square, approx_radius;

    if (length &lt;= 0 || width &lt;= 0) {
        return -1;
    }

    if (fabs(length) &lt; 1e-6 &amp;&amp; fabs(width) &lt; 1e-6) {
        return 0;
    }
    // Divide rectangle into 3 smaller rectangles
    square_length = length/3.0;
    // Calculate minimum radius
    diagonal_square = sqrt(pow(square_length/2.0, 2) + pow(width/2.0, 2));
    // Round up value
    approx_radius = round(diagonal_square*10.0) / 10.0 + 0.1;

    return d2i(approx_radius);
}

void compute_centers_of_approximation_circles(ST_RECTANGLE veh_rect, ST_DPOINT &amp;centers[2]) {
    double disc_radius, distance_centers, veh_cent_x_double, veh_cent_y_double;

    disc_radius = i2d(compute_approximating_circle_radius(veh_rect.length, veh_rect.width));
    distance_centers = disc_radius/2.0;

    // Compute the center position of first circle (front)
    veh_cent_x_double = i2d(veh_rect.center.x);
    veh_cent_y_double = i2d(veh_rect.center.y);
    centers[0].x = d2i(veh_cent_x_double + (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[0].y = d2i(veh_cent_y_double + (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));

    // Compute the center position of second circle (rear)
    centers[1].x = d2i(veh_cent_x_double - (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[1].y = d2i(veh_cent_y_double - (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));
}



bool check_collision(ST_RECTANGLE veh_st_rect1, ST_RECTANGLE veh_st_rect2, int dis_thres) {    
    // define two vehicles' circle tuple (front and rear)
    ST_DPOINT veh_circle_tuple1[2] = {{0, 0}, {0, 0}};
    ST_DPOINT veh_circle_tuple2[2] = {{0, 0}, {0, 0}};
    double min_dis = FLT_MAX, dis = 0;
    int i, j;    
    //int32_t temp[2][2];
    
    // calculate the centers of the vehicles' circles
    compute_centers_of_approximation_circles(veh_st_rect1, veh_circle_tuple1);
    compute_centers_of_approximation_circles(veh_st_rect2, veh_circle_tuple2);

    for (i = 0; i &lt; 2; ++i) {
        for (j = 0; j &lt; 2; ++j) {
            dis = sqrt(pow(veh_circle_tuple1[i].x - veh_circle_tuple2[j].x, 2) + pow(veh_circle_tuple1[i].y - veh_circle_tuple2[j].y, 2));
            //temp[i][j] = d2i(dis);
            min_dis = fmin(min_dis, dis);
        }
    }
    if (dis_thres &gt; min_dis)
        return true;
    else
        return false;
}
   
</declaration>
	<template>
		<name x="5" y="5">MovingObs</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_PAIR &amp;trajectory[MAXTP]</parameter>
		<declaration>ST_VARIABLES vars;  // continuous variables
ST_DSTATE dState;   // discrete state
uint8_t pc = 0;     // policy counter
uint8_t tc = 0;     // time counter
ST_RECTANGLE self;

void decisionMaking() {
    if(pc &lt; MAXTP &amp;&amp; tc == trajectory[pc].time) {
        // predefined trajectory starts
        vars.x = trajectory[pc].cState.position.x;
        vars.y = trajectory[pc].cState.position.y;
        vars.velocity = mTimeStep(trajectory[pc].cState.velocity);

        vars.acceleration = mTimeStep(trajectory[pc].cState.acceleration);
        vars.yawRate = mTimeStep(trajectory[pc].cState.yawRate);

        dState.acceleration = d2i(mTimeStep(trajectory[pc].cState.acceleration));
        dState.yawRate = d2i(mTimeStep(trajectory[pc].cState.yawRate));
        pc++;
    }
    else if(pc &lt; MAXTP) {
        tc++;
    }
    else if(pc &gt;= MAXTP - 1) {
        vars.velocity = 0;
        vars.acceleration = 0;
        vars.yawRate = 0;
        dState.velocity = 0;
        dState.acceleration = 0;
        dState.yawRate = 0;
    }
}

void initCon(ST_VARIABLES &amp;vars, const ST_CSTATE &amp;initCS) {
    vars.x = initCS.position.x;
    vars.y = initCS.position.y;
    vars.velocity = mTimeStep(initCS.velocity);
    vars.orientation = initCS.orientation;
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);
    time = 0;  
}

void initDis(ST_DSTATE &amp;dState, const ST_CSTATE &amp;initCS) {
    dState.position.x = d2i(initCS.position.x);
    dState.position.y = d2i(initCS.position.y);
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.orientation = d2i(initCS.orientation);
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;

    dStateEgo.detection.collide |= check_collision(shapeEgo, shape, THRESHOLD);
    dState.detection.collide = dStateEgo.detection.collide;
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}

void initialize() {
    pc = 0;
    tc = 0;
    initCon(vars,initCS);
    initDis(dState,initCS);
    self = shape;
}









</declaration>
		<location id="id0" x="-102" y="-34">
			<name x="-76" y="-34">Move</name>
			<label kind="invariant" x="-255" y="-17">vars.x' == vars.velocity*cos(vars.orientation) &amp;&amp;
vars.y' == vars.velocity*sin(vars.orientation) &amp;&amp;
vars.velocity' == vars.acceleration &amp;&amp;
vars.orientation' == vars.yawRate &amp;&amp;
vars.yawRate' == 0 &amp;&amp;
vars.acceleration' == 0</label>
		</location>
		<init ref="id0"/>
		<transition id="id1" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-161" y="-119">update?</label>
			<label kind="assignment" x="-161" y="-102">updateDis(dState,self)</label>
			<nail x="-136" y="-102"/>
			<nail x="-68" y="-102"/>
		</transition>
		<transition id="id2" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-246" y="-68">begin?</label>
			<label kind="assignment" x="-246" y="-51">initialize()</label>
			<nail x="-170" y="-68"/>
			<nail x="-170" y="-34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-34" y="-68">chooseObs?</label>
			<label kind="assignment" x="-42" y="-51">decisionMaking()</label>
			<nail x="-34" y="-34"/>
			<nail x="-34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_RULES &amp;rules</parameter>
		<declaration>typedef int[0,0] BRAKE_t;    // 1 gear of brake force
typedef int[0,0] PUSH_t;     // 1 gear of push force
typedef int[0,1] TURN_t;     // 2 speeds of turning 

const int8_t Brake[3] = {d2i(-0.1), d2i(-0.2), d2i(-0.3)};
const int8_t Push[3] = {d2i(0.1), d2i(0.2), d2i(0.3)};
const int8_t Turn[2] = {d2i(0.1), d2i(-0.1)};
const bool CONSTANTSPEED = true;

void opConst() {
    dStateEgo.acceleration = 0;
    varsEgo.acceleration = 0;
}

void opAcc(int gear) {
    dStateEgo.acceleration = Push[gear];
    varsEgo.acceleration = i2d(Push[gear]);
}

void opBrake(int gear) {
    dStateEgo.acceleration = Brake[gear];
    varsEgo.acceleration = i2d(Brake[gear]);
}

void opTurn(int dir) {
    int nr = Turn[dir];
    int no = dStateEgo.orientation;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(no);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int nx = shapeEgo.center.x + d2i(vx) * P;
    int ny = shapeEgo.center.y + d2i(vy) * P;

    dStateEgo.yawRate = Turn[dir];
    varsEgo.yawRate = i2d(Turn[dir]);
}

void keep() {
    dStateEgo.yawRate = 0;
    varsEgo.yawRate = 0.0;
}

bool canAcc(int gear) {
    int nextAcc = Push[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextAcc &lt;= rules.maxVelocity) 
        return true;
    return false;
}

bool canDec(int gear) {
    int nextDec = Brake[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextDec &gt;= rules.minVelocity) 
        return true;
    return false;
}

bool canTurn(int dir) {
    int nextRate = Turn[dir];
    int nextOrientation = dStateEgo.orientation + P*nextRate;
    ST_RECTANGLE nextShape = shape;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(nextOrientation);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    bool outroad = false;

    nextShape.center.x = shapeEgo.center.x + d2i(vx) * P;
    nextShape.center.y = shapeEgo.center.y + d2i(vy) * P;
    nextShape.orientation = nextOrientation;
    outroad = !check_inlane_laneNet(nextShape, lane, veh_corners, box_corners);

    if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation &amp;&amp; !outroad) 
    //if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation)
        return true;
    return false;
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    uint8_t inlane_pts_num = 0;

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;
    dState.detection.outside = !check_inlane_laneNet(shape, lane, veh_corners, box_corners);
    dState.detection.reach = (getDisP2P(shape.center, planning.goal) &lt;= THRESHOLD);
    if(staticObsExists) {
        for(i = 0; i &lt; MAXSO; i++) {
            dState.detection.collide |= check_collision(shape, staticObs[i], THRESHOLD);
        }
    }
}

void initDis(ST_DSTATE &amp;dState) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    dState.position = middleDStart;
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.orientation = d2i(angle);
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));

    dState.detection.collide = false;
    dState.detection.outside = false;
    dState.detection.reach = false;
}

void initialize() {
    initDis(dStateEgo);
    shapeEgo = shape;
    shapeEgo.center = dStateEgo.position;
}









</declaration>
		<location id="id4" x="-340" y="-136">
			<name x="-433" y="-161">Turn_Const</name>
			<label kind="comments" x="-34" y="-51">One cannot turn and 
acc or brake 
simutaneously.</label>
		</location>
		<location id="id5" x="-68" y="136">
			<name x="-187" y="136">Straight_Dec</name>
		</location>
		<location id="id6" x="-68" y="-136">
			<name x="-51" y="-170">Straight_Acc</name>
		</location>
		<location id="id7" x="-204" y="0">
			<name x="-289" y="-17">Choose</name>
			<committed/>
		</location>
		<location id="id8" x="-340" y="136">
			<name x="-476" y="161">Straight_Const</name>
		</location>
		<init ref="id8"/>
		<transition id="id9" controllable="false">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-280" y="187">begin?</label>
			<label kind="assignment" x="-195" y="187">initialize()</label>
			<nail x="-68" y="204"/>
			<nail x="-340" y="204"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-424" y="-221">begin?</label>
			<label kind="assignment" x="-424" y="-204">initialize()</label>
			<nail x="-68" y="-204"/>
			<nail x="-442" y="-204"/>
			<nail x="-442" y="0"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id4"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-433" y="-34">begin?</label>
			<label kind="assignment" x="-433" y="-17">initialize()</label>
			<nail x="-408" y="-136"/>
			<nail x="-408" y="0"/>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-306" y="144">update?</label>
			<label kind="assignment" x="-306" y="161">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-331" y="170"/>
			<nail x="-306" y="170"/>
		</transition>
		<transition id="id13" controllable="false">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-25" y="93">update?</label>
			<label kind="assignment" x="-25" y="119">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="102"/>
			<nail x="-34" y="136"/>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-42" y="-144">update?</label>
			<label kind="assignment" x="-42" y="-127">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="-136"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-314" y="-187">update?</label>
			<label kind="assignment" x="-314" y="-170">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-306" y="-170"/>
			<nail x="-340" y="-170"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-357" y="-68">chooseEgo?</label>
			<label kind="assignment" x="-357" y="-51">keep()</label>
			<label kind="comments" x="-34" y="25">Keeps moving with 
this angle</label>
			<nail x="-340" y="-68"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-467" y="102">begin?</label>
			<label kind="assignment" x="-467" y="119">initialize()</label>
			<nail x="-374" y="102"/>
			<nail x="-374" y="127"/>
		</transition>
		<transition id="id18">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="select" x="-263" y="-93">d:TURN_t</label>
			<label kind="guard" x="-263" y="-76">canTurn(d)</label>
			<label kind="assignment" x="-263" y="-59">opTurn(d)</label>
			<nail x="-272" y="-136"/>
		</transition>
		<transition id="id19">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="102">chooseEgo?</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition id="id20">
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="select" x="-144" y="17">f:BRAKE_t</label>
			<label kind="guard" x="-144" y="34">canDec(f)</label>
			<label kind="assignment" x="-144" y="51">opBrake(f)</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition id="id21">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="-119">chooseEgo?</label>
			<nail x="-136" y="-136"/>
		</transition>
		<transition id="id22">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-136" y="-76">f:PUSH_t</label>
			<label kind="guard" x="-136" y="-59">canAcc(f)</label>
			<label kind="assignment" x="-136" y="-42">opAcc(f)</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition id="id23">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-340" y="51">opConst()</label>
			<nail x="-340" y="68"/>
		</transition>
		<transition id="id24">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-314" y="102">chooseEgo?</label>
			<nail x="-272" y="136"/>
		</transition>
	</template>
	<template>
		<name>Decisions</name>
		<declaration>clock timer;
int counter = 0;</declaration>
		<location id="id25" x="102" y="68">
			<name x="110" y="42">Idle</name>
			<label kind="invariant" x="85" y="85">timer&lt;=P</label>
		</location>
		<location id="id26" x="102" y="-34">
			<name x="92" y="-68">Done</name>
			<urgent/>
		</location>
		<location id="id27" x="-68" y="-34">
			<name x="-78" y="-68">ObsGo</name>
			<urgent/>
		</location>
		<location id="id28" x="-204" y="-34">
			<name x="-214" y="-68">EgoGo</name>
			<urgent/>
		</location>
		<location id="id29" x="-340" y="-34">
			<name x="-350" y="-68">Start</name>
			<urgent/>
		</location>
		<init ref="id29"/>
		<transition id="id30" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-348" y="51">counter==MAXTIME</label>
			<label kind="synchronisation" x="-348" y="68">begin!</label>
			<label kind="assignment" x="-348" y="85">timer=0,counter=0</label>
			<nail x="68" y="102"/>
			<nail x="-340" y="102"/>
			<nail x="-340" y="0"/>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-280" y="-59">begin!</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-170" y="0">timer==P&amp;&amp;
counter!=MAXTIME</label>
			<label kind="synchronisation" x="-170" y="42">update!</label>
			<label kind="assignment" x="-102" y="42">timer=0,counter++</label>
			<nail x="-204" y="68"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="59" y="-8">timer=0</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-34" y="-59">chooseObs!</label>
		</transition>
		<transition id="id35" controllable="false">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-170" y="-59">chooseEgo!</label>
		</transition>
	</template>
	<template>
		<name>Dynamics</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS</parameter>
		<declaration>void initCon(ST_VARIABLES &amp;vars) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    vars.x = i2d(middleDStart.x);
    vars.y = i2d(middleDStart.y);
    vars.velocity = mTimeStep(initCS.velocity);
    vars.orientation = angle;
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);

    time = 0;
    if(dStateEgo.detection.reach) 
        D = 0; // only reset the reward function when reaching the goal
    if(dStateEgo.detection.collide || dStateEgo.detection.outside)
        D = D + 100; // punish the ego when it collides or goes outside the road    
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}</declaration>
		<location id="id36" x="0" y="0">
			<name x="-59" y="-8">Move</name>
			<label kind="invariant" x="-161" y="17">varsEgo.x' == varsEgo.velocity*cos(varsEgo.orientation) &amp;&amp;
varsEgo.y' == varsEgo.velocity*sin(varsEgo.orientation) &amp;&amp;
varsEgo.velocity' == varsEgo.acceleration &amp;&amp;
varsEgo.orientation' == varsEgo.yawRate &amp;&amp;
varsEgo.yawRate' == 0 &amp;&amp;
varsEgo.acceleration' == 0 &amp;&amp;
D' == getDisP2P(dStateEgo.position, planning.goal) 
      - dStateEgo.detection.reach * 100 
      + dStateEgo.detection.collide * 50 
      + dStateEgo.detection.outside * 50</label>
		</location>
		<init ref="id36"/>
		<transition id="id37" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="68" y="-68">update?</label>
			<label kind="assignment" x="68" y="-51">updateCon(varsEgo)</label>
			<nail x="68" y="-68"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition id="id38" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-161" y="-68">begin?</label>
			<label kind="assignment" x="-161" y="-51">initCon(varsEgo)</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-68"/>
		</transition>
	</template>
	<system>// Generated moving obstacles starts
const ST_CSTATE initCS42 = {{2.25, 3.5}, 23.0, 0.0, 0.0, 0.0};
const ST_RECTANGLE shapeObs42 = {{225, 350}, 200, 450, 0};
const ST_PAIR PHOLDER = {NONE,{{NONE,NONE},NONE,NONE,NONE,NONE}};
const ST_PAIR trajectory42[MAXTP] = {{1, {{4.55, 3.494}, 23.0, -0.01044, 0.0, 0}}, {2, {{6.846, 3.421}, 23.0, -0.05337, 0.0001145, 0}}, 
{3, {{9.132, 3.27}, 23.0, -0.07886, 0.0, 0}}, {4, {{11.39, 3.041}, 23.0, -0.1229, 0.0001028, 0}}, {5, {{13.64, 2.734}, 23.0, -0.1484, 0.0, 0}}, 
{6, {{15.83, 23.055}, 23.0, -0.1925, 8.407e-05, 0}}, {7, {{18.01, 1.901}, 23.0, -0.2106, 0.0, 0}}, {8, {{20.19, 1.419}, 23.0, -0.2182, 6.072e-05, 0}}, 
{9, {{22.45, 0.939}, 23.0, -0.1926, 0.0, 0}}, {10, {{24.78, 0.5254}, 23.0, -0.1575, 3.58e-05, 0}}, {11, {{27.14, 0.1907}, 23.0, -0.123, 0.0, 0}}, 
{12, {{29.54, -0.06328}, 23.0, -0.08798, 1.201e-05, 0}}, {13, {{31.95, -0.2344}, 23.0, -0.05343, 0.0, 0}}, {14, {{34.38, -0.3217}, 23.0, -0.01842, 0.0, 0}}, 
{15, {{36.81, -0.3254}, 23.0, 0.01468, 1.756e-05, 0}}, {16, {{39.2, -0.2572}, 23.0, 0.04074, 0.0, 0}}, {17, {{41.55, -0.1413}, 23.0, 0.05578, 3.125e-05, 0}}, 
{18, {{43.86, -0.006988}, 23.0, 0.05876, 0.0, 0}}, {19, {{46.12, 0.12}, 23.0, 0.05161, 4.009e-05, 0}}, {20, {{48.38, 0.222}, 23.0, 0.03826, 0.0, 0}}, 
{21, {{50.63, 0.2912}, 23.0, 0.0234, 4.448e-05, 0}}, {22, {{52.89, 0.3294}, 23.0, 0.01106, 0.0, 0}}, {23, {{55.16, 0.3449}, 23.0, 0.003413, 4.516e-05, 0}}, 
{24, {{57.45, 0.3484}, 23.0, 0.0002996, 0.0, 0}}, {25, {{59.75, 0.3483}, 23.0, -0.0001381, 4.297e-05, 0}}, {26, {{62.05, 0.3484}, 23.0, 0.0002047, 0.0, 0}}, 
{27, {{64.35, 0.3491}, 23.0, 0.0003449, 3.876e-05, 0}}, {28, {{66.65, 0.3497}, 23.0, 0.0001931, 0.0, 0}}, {29, {{68.95, 0.35}, 23.0, 3.321e-05, 3.326e-05, 0}}, 
{30, {{71.25, 0.35}, 23.0, 2.45e-06, 0.0, 0}}, {31, {{73.55, 0.35}, 23.0, 8.362e-06, 2.708e-05, 0}}, {32, {{75.85, 0.35}, 23.0, 1.375e-06, 0.0, 0}}, 
{33, {{78.15, 0.35}, 23.0, 5.35e-07, 2.067e-05, 0}}, {34, {{80.45, 0.35}, 23.0, 5.53e-08, 0.0, 0}}, {35, {{82.75, 0.35}, 23.0, 5.596e-09, 1.436e-05, 0}}, 
{36, {{85.05, 0.35}, 23.0, -4.989e-10, 0.0, 0}}, {37, {{87.35, 0.35}, 23.0, 3.54e-10, 8.336e-06, 0}}, {38, {{89.65, 0.35}, 23.0, -3.208e-10, 0.0, 0}}, 
{39, {{91.95, 0.35}, 23.0, 9.801e-11, 2.699e-06, 0}}, {40, {{94.25, 0.35}, 23.0, -1.082e-10, 0.0, 0}}};
obs42 = MovingObs(42, initCS42, shapeObs42, trajectory42);
const ST_CSTATE initCS44 = {{50.0, 0.0}, 22.0, 0.0, 0.0, 0.0};
const ST_RECTANGLE shapeObs44 = {{5000, 0}, 180, 430, 0};
const ST_PAIR trajectory44[MAXTP] = {{1, {{52.2, 0.0}, 22.0, 0.0, 0, 0}}, {2, {{54.4, 0.0}, 22.0, 0.0, 0, 0}}, {3, {{56.6, 0.0}, 22.0, 0.0, 0, 0}}, 
{4, {{58.8, 0.0}, 22.0, 0.0, 0, 0}}, {5, {{61.0, 0.0}, 22.0, 0.0, 0, 0}}, {6, {{63.2, 0.0}, 22.0, 0.0, 0, 0}}, {7, {{65.4, 0.0}, 22.0, 0.0, 0, 0}}, 
{8, {{67.6, 0.0}, 22.0, 0.0, 0, 0}}, {9, {{69.8, 0.0}, 22.0, 0.0, 0, 0}}, {10, {{72.0, 0.0}, 22.0, 0.0, 0, 0}}, {11, {{74.2, 0.0}, 22.0, 0.0, 0, 0}}, 
{12, {{76.4, 0.0}, 22.0, 0.0, 0, 0}}, {13, {{78.6, 0.0}, 22.0, 0.0, 0, 0}}, {14, {{80.8, 0.0}, 22.0, 0.0, 0, 0}}, {15, {{83.0, 0.0}, 22.0, 0.0, 0, 0}}, 
{16, {{85.2, 0.0}, 22.0, 0.0, 0, 0}}, {17, {{87.4, 0.0}, 22.0, 0.0, 0, 0}}, {18, {{89.6, 0.0}, 22.0, 0.0, 0, 0}}, {19, {{91.8, 0.0}, 22.0, 0.0, 0, 0}}, 
{20, {{94.0, 0.0}, 22.0, 0.0, 0, 0}}, {21, {{96.2, 0.0}, 22.0, 0.0, 0, 0}}, {22, {{98.4, 0.0}, 22.0, 0.0, 0, 0}}, {23, {{100.6, 0.0}, 22.0, 0.0, 0, 0}}, 
{24, {{102.8, 0.0}, 22.0, 0.0, 0, 0}}, {25, {{105.0, 0.0}, 22.0, 0.0, 0, 0}}, {26, {{107.2, 0.0}, 22.0, 0.0, 0, 0}}, {27, {{109.4, 0.0}, 22.0, 0.0, 0, 0}}, 
{28, {{111.6, 0.0}, 22.0, 0.0, 0, 0}}, {29, {{113.8, 0.0}, 22.0, 0.0, 0, 0}}, {30, {{116.0, 0.0}, 22.0, 0.0, 0, 0}}, {31, {{118.2, 0.0}, 22.0, 0.0, 0, 0}}, 
{32, {{120.4, 0.0}, 22.0, 0.0, 0, 0}}, {33, {{122.6, 0.0}, 22.0, 0.0, 0, 0}}, {34, {{124.8, 0.0}, 22.0, 0.0, 0, 0}}, {35, {{127.0, 0.0}, 22.0, 0.0, 0, 0}}, 
{36, {{129.2, 0.0}, 22.0, 0.0, 0, 0}}, {37, {{131.4, 0.0}, 22.0, 0.0, 0, 0}}, {38, {{133.6, 0.0}, 22.0, 0.0, 0, 0}}, {39, {{135.8, 0.0}, 22.0, 0.0, 0, 0}}, 
{40, {{138.0, 0.0}, 22.0, 0.0, 0, 0}}};
obs44 = MovingObs(44, initCS44, shapeObs44, trajectory44);

// Generated moving obstacles ends

// position, velocity, orientation, acceleration, yawRate
const ST_CSTATE initEgo = {{NONE, NONE}, 30.0, 0.0, 0.0, 0.0}; 
const ST_RECTANGLE initShapeEgo = {{NONE, NONE}, 100, 450, 0};
const ST_RULES rules = {4000, 0, 20, -20}; 
const int[0,MAXL] initLane = 0;
egoController = Controller(1, initLane, initEgo, initShapeEgo, rules);
egoDynamics = Dynamics(1, initLane, initEgo);

// Generated model instances start
system Decisions, egoController, egoDynamics, obs42, obs44;

// Generated model instances end
</system>
	<queries>
		<option key="--total-runs" value="50"/>
		<option key="--max-iterations" value="3"/>
		<option key="--good-runs" value="20"/>
		<option key="--eval-runs" value="10"/>
		<option key="--runs-pr-state" value="10"/>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>strategy safe = control:A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside
</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:12:54 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>strategy reachSafe = minE(D) [&lt;=MAXTIME] {egoController.location}-&gt;{dStateEgo.position.x, dStateEgo.position.y, dStateEgo.velocity, dStateEgo.orientation, dStateEgo.acceleration, dStateEgo.yawRate}: &lt;&gt; time&gt;=MAXTIME under safe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:12:58 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=MAXTIME*3] { varsEgo.y} under reachSafe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:14:52 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="varsEgo.y" type="l" color="0xff0000" encoding="csv">0.0,0.0
0.01,-2.999999500000025E-5
0.02,-8.999995500000825E-5
0.03,-1.79999820000069E-4
0.04,-2.9999950000032506E-4
0.05,-4.499988750011063E-4
0.060000000000000005,-6.299977950030503E-4
0.07,-8.399960800072521E-4
0.08,-0.0010799935200154441
0.09,-0.0013499898750302065
0.09999999999999999,-0.0016499848750552064
0.10999999999999999,-0.001979978220095469
0.11999999999999998,-0.002339969580157677
0.12999999999999998,-0.0027299585952505
0.13999999999999999,-0.0031499448753849555
0.15,-0.0035999280005747985
0.16,-0.004079907520836941
0.17,-0.004589882956191903
0.18000000000000002,-0.005129853796664292
0.19000000000000003,-0.005699819502283312
0.20000000000000004,-0.006299779503083305
0.21000000000000005,-0.00692973319910432
0.22000000000000006,-0.0075896799603927135
0.23000000000000007,-0.008279619127001779
0.24000000000000007,-0.008999550008992408
0.25000000000000006,-0.009749471886433778
0.26000000000000006,-0.010529384009404074
0.2700000000000001,-0.01133928559799124
0.2800000000000001,-0.01217917584229375
0.2900000000000001,-0.013049053902421436
0.3000000000000001,-0.013948918908496307
0.3100000000000001,-0.014878769960653432
0.3200000000000001,-0.015838606129041834
0.3300000000000001,-0.01682842645382543
0.34000000000000014,-0.017848229945183973
0.35000000000000014,-0.01889801558331406
0.36000000000000015,-0.01997778231843014
0.37000000000000016,-0.021087529070765564
0.38000000000000017,-0.022227254730573676
0.3900000000000002,-0.023396958158128908
0.4000000000000002,-0.024596638183727933
0.4100000000000002,-0.025826293607690825
0.4200000000000002,-0.027085923200362263
0.4300000000000002,-0.028375525702112755
0.4400000000000002,-0.029695099823339913
0.45000000000000023,-0.031044644244469722
0.46000000000000024,-0.03242415761595787
0.47000000000000025,-0.03383363855829111
0.48000000000000026,-0.035273085661988605
0.49000000000000027,-0.03674249748760338
0.5000000000000002,-0.03824187256572373
0.5100000000000002,-0.0397712093969747
0.5200000000000002,-0.041330506452019584
0.5300000000000002,-0.04291976217156147
0.5400000000000003,-0.044538974966344756
0.5500000000000003,-0.04618814321715679
0.5600000000000003,-0.04786726527482945
0.5700000000000003,-0.04957633946024083
0.5800000000000003,-0.05131536406431688
0.5900000000000003,-0.053084337348033146
0.6000000000000003,-0.054883257542416485
0.6100000000000003,-0.056712122848546855
0.6200000000000003,-0.0585709314375591
0.6300000000000003,-0.060459681450644794
0.6400000000000003,-0.06237837099905407
0.6500000000000004,-0.06432699816409755
0.6600000000000004,-0.06630556099714822
0.6700000000000004,-0.06831405751964342
0.6800000000000004,-0.0703524857230868
0.6900000000000004,-0.07242084356905032
0.7000000000000004,-0.0745191289891763
0.7100000000000004,-0.07664733988517951
0.7200000000000004,-0.07880547412884921
0.7300000000000004,-0.08099352956205136
0.7400000000000004,-0.08321150399673069
0.7500000000000004,-0.08545939521491296
0.7600000000000005,-0.08773720096870713
0.7700000000000005,-0.09004491898030766
0.7800000000000005,-0.0923825469419967
0.7900000000000005,-0.0947500825161465
0.8000000000000005,-0.09714752333522168
0.8100000000000005,-0.09957486700178163
0.8200000000000005,-0.10203211108848287
0.8300000000000005,-0.10451925313808152
0.8400000000000005,-0.10703629066343576
0.8500000000000005,-0.10958322114750824
0.8600000000000005,-0.1121600420433687
0.8700000000000006,-0.11476675077419647
0.8800000000000006,-0.11740334473328304
0.8900000000000006,-0.12006982128403465
0.9000000000000006,-0.12276617775997499
0.9100000000000006,-0.1254924114647478
0.9200000000000006,-0.1282485196721196
0.9300000000000006,-0.1310344996259824
0.9400000000000006,-0.13385034854035652
0.9500000000000006,-0.13669606359939324
0.9600000000000006,-0.13957164195737776
0.9700000000000006,-0.14247708073873194
0.9800000000000006,-0.14541237703801727
0.9900000000000007,-0.14837752791993766
3.0,-0.7503730303003114
3.01,-0.7533381811822318
3.0199999999999996,-0.7562734774815172
3.0299999999999994,-0.7591789162628714
3.039999999999999,-0.7620544946208558
3.049999999999999,-0.7649002096798926
3.0599999999999987,-0.7677160585942667
3.0699999999999985,-0.7705020385481295
3.0799999999999983,-0.7732581467555013
3.089999999999998,-0.7759843804602741
3.099999999999998,-0.7786807369362144
3.1099999999999977,-0.781347213486966
3.1199999999999974,-0.7839838074460526
3.1299999999999972,-0.7865905161768804
3.139999999999997,-0.7891673370727408
3.149999999999997,-0.7917142675568133
3.1599999999999966,-0.7942313050821675
3.1699999999999964,-0.7967184471317662
3.179999999999996,-0.7991756912184674
3.189999999999996,-0.8016030348850274
3.1999999999999957,-0.8040004757041026
3.2099999999999955,-0.8063680112782524
3.2199999999999953,-0.8087056392399414
3.229999999999995,-0.811013357251542
3.239999999999995,-0.8132911630053362
3.2499999999999947,-0.8155390542235185
3.2599999999999945,-0.8177570286581978
3.2699999999999942,-0.8199450840913999
3.279999999999994,-0.8221032183350696
3.289999999999994,-0.8242314292310728
3.2999999999999936,-0.8263297146511989
3.3099999999999934,-0.8283980724971624
3.319999999999993,-0.8304365007006057
3.329999999999993,-0.832444997223101
3.3399999999999928,-0.8344235600561516
3.3499999999999925,-0.8363721872211951
3.3599999999999923,-0.8382908767696043
3.369999999999992,-0.84017962678269
3.379999999999992,-0.8420384353717022
3.3899999999999917,-0.8438673006778326
3.3999999999999915,-0.8456662208722159
3.4099999999999913,-0.8474351941559322
3.419999999999991,-0.8491742187600082
3.429999999999991,-0.8508832929454195
3.4399999999999906,-0.8525624150030922
3.4499999999999904,-0.8542115832539042
3.45999999999999,-0.8558307960486875
3.46999999999999,-0.8574200517682293
3.4799999999999898,-0.8589793488232742
3.4899999999999896,-0.8605086856545252
3.4999999999999893,-0.8620080607326456
3.509999999999989,-0.8634774725582604
3.519999999999989,-0.8649169196619578
3.5299999999999887,-0.8663264006042911
3.5399999999999885,-0.8677059139757792
3.5499999999999883,-0.869055458396909
3.559999999999988,-0.8703750325181362
3.569999999999988,-0.8716646350198867
3.5799999999999876,-0.8729242646125581
3.5899999999999874,-0.874153920036521
3.599999999999987,-0.87535360006212
3.609999999999987,-0.8765233034896752
3.619999999999987,-0.8776630291494834
3.6299999999999866,-0.8787727759018188
3.6399999999999864,-0.8798525426369349
3.649999999999986,-0.880902328275065
3.659999999999986,-0.8819221317664235
3.6699999999999857,-0.8829119520912071
3.6799999999999855,-0.8838717882595954
3.6899999999999853,-0.8848016393117526
3.699999999999985,-0.8857015043178275
3.709999999999985,-0.8865713823779552
3.7199999999999847,-0.8874112726222577
3.7299999999999844,-0.8882211742108449
3.7399999999999842,-0.8890010863338152
3.749999999999984,-0.8897510082112566
3.759999999999984,-0.8904709390932473
3.7699999999999836,-0.8911608782598563
3.7799999999999834,-0.8918208250211448
3.789999999999983,-0.8924507787171658
3.799999999999983,-0.8930507387179658
3.8099999999999827,-0.8936207044235849
3.8199999999999825,-0.8941606752640573
3.8299999999999823,-0.8946706506994122
3.839999999999982,-0.8951506302196743
3.849999999999982,-0.8956006133448642
3.8599999999999817,-0.8960205996249986
3.8699999999999815,-0.8964105886400914
3.8799999999999812,-0.8967705800001535
3.889999999999981,-0.8971005733451938
3.899999999999981,-0.8974005683452188
3.9099999999999806,-0.8976705647002335
3.9199999999999804,-0.8979105621402418
3.92999999999998,-0.898120560425246
3.93999999999998,-0.898300559345248
3.9499999999999797,-0.8984505587202488
3.9599999999999795,-0.898570558400249
3.9699999999999793,-0.898660558265249
3.979999999999979,-0.8987205582252491
3.989999999999979,-0.8987505582202491
10.443227036111047,-0.8987505582202491
10.443227036111047,0.0
10.453227036111047,-2.999999500000025E-5
10.463227036111046,-8.999995500000825E-5
10.473227036111046,-1.79999820000069E-4
10.483227036111046,-2.9999950000032506E-4
10.493227036111046,-4.499988750011063E-4
10.503227036111046,-6.299977950030503E-4
10.513227036111045,-8.399960800072521E-4
10.523227036111045,-0.0010799935200154441
10.533227036111045,-0.0013499898750302065
10.543227036111045,-0.0016499848750552064
10.553227036111045,-0.001979978220095469
10.563227036111044,-0.002339969580157677
10.573227036111044,-0.0027299585952505
10.583227036111044,-0.0031499448753849555
10.593227036111044,-0.0035999280005747985
10.603227036111043,-0.004079907520836941
10.613227036111043,-0.004589882956191903
10.623227036111043,-0.005129853796664292
10.633227036111043,-0.005699819502283312
10.643227036111043,-0.006299779503083305
10.653227036111042,-0.00692973319910432
10.663227036111042,-0.0075896799603927135
10.673227036111042,-0.008279619127001779
10.683227036111042,-0.008999550008992408
10.693227036111042,-0.009749471886433778
10.703227036111041,-0.010529384009404074
10.713227036111041,-0.01133928559799124
10.723227036111041,-0.01217917584229375
10.73322703611104,-0.013049053902421436
10.74322703611104,-0.013948918908496307
10.75322703611104,-0.014878769960653432
10.76322703611104,-0.015838606129041834
10.77322703611104,-0.01682842645382543
10.78322703611104,-0.017848229945183973
10.79322703611104,-0.01889801558331406
10.80322703611104,-0.01997778231843014
10.813227036111039,-0.021087529070765564
10.823227036111039,-0.022227254730573676
10.833227036111039,-0.023396958158128908
10.843227036111038,-0.024596638183727933
10.853227036111038,-0.025826293607690825
10.863227036111038,-0.027085923200362263
10.873227036111038,-0.028375525702112755
10.883227036111037,-0.029695099823339913
10.893227036111037,-0.031044644244469722
10.903227036111037,-0.03242415761595787
10.913227036111037,-0.03383363855829111
10.923227036111037,-0.035273085661988605
10.933227036111036,-0.03674249748760338
10.943227036111036,-0.03824187256572373
10.953227036111036,-0.0397712093969747
10.963227036111036,-0.041330506452019584
10.973227036111036,-0.04291976217156147
10.983227036111035,-0.044538974966344756
10.993227036111035,-0.04618814321715679
11.003227036111035,-0.04786726527482945
11.013227036111035,-0.04957633946024083
11.023227036111034,-0.05131536406431688
11.033227036111034,-0.053084337348033146
11.043227036111034,-0.054883257542416485
11.053227036111034,-0.056712122848546855
11.063227036111034,-0.0585709314375591
11.073227036111033,-0.060459681450644794
11.083227036111033,-0.06237837099905407
11.093227036111033,-0.06432699816409755
11.103227036111033,-0.06630556099714822
11.113227036111033,-0.06831405751964342
11.123227036111032,-0.0703524857230868
11.133227036111032,-0.07242084356905032
11.143227036111032,-0.0745191289891763
11.153227036111032,-0.07664733988517951
11.163227036111032,-0.07880547412884921
11.173227036111031,-0.08099352956205136
11.183227036111031,-0.08321150399673069
11.19322703611103,-0.08545939521491296
11.20322703611103,-0.08773720096870713
11.21322703611103,-0.09004491898030766
11.22322703611103,-0.0923825469419967
11.23322703611103,-0.0947500825161465
11.24322703611103,-0.09714752333522168
11.25322703611103,-0.09957486700178163
11.26322703611103,-0.10203211108848287
11.27322703611103,-0.10451925313808152
11.283227036111029,-0.10703629066343576
11.293227036111029,-0.10958322114750824
11.303227036111029,-0.1121600420433687
11.313227036111028,-0.11476675077419647
11.323227036111028,-0.11740334473328304
11.333227036111028,-0.12006982128403465
11.343227036111028,-0.12276617775997499
11.353227036111027,-0.1254924114647478
11.363227036111027,-0.1282485196721196
11.373227036111027,-0.1310344996259824
11.383227036111027,-0.13385034854035652
11.393227036111027,-0.13669606359939324
11.403227036111026,-0.13957164195737776
11.413227036111026,-0.14247708073873194
11.423227036111026,-0.14541237703801727
11.433227036111026,-0.14837752791993766
13.443227036110983,-0.7503730303003114
13.453227036110983,-0.7533381811822318
13.463227036110982,-0.7562734774815172
13.473227036110982,-0.7591789162628714
13.483227036110982,-0.7620544946208558
13.493227036110982,-0.7649002096798926
13.503227036110982,-0.7677160585942667
13.513227036110981,-0.7705020385481295
13.523227036110981,-0.7732581467555013
13.533227036110981,-0.7759843804602741
13.54322703611098,-0.7786807369362144
13.55322703611098,-0.781347213486966
13.56322703611098,-0.7839838074460526
13.57322703611098,-0.7865905161768804
13.58322703611098,-0.7891673370727408
13.59322703611098,-0.7917142675568133
13.60322703611098,-0.7942313050821675
13.61322703611098,-0.7967184471317662
13.623227036110979,-0.7991756912184674
13.633227036110979,-0.8016030348850274
13.643227036110979,-0.8040004757041026
13.653227036110978,-0.8063680112782524
13.663227036110978,-0.8087056392399414
13.673227036110978,-0.811013357251542
13.683227036110978,-0.8132911630053362
13.693227036110978,-0.8155390542235185
13.703227036110977,-0.8177570286581978
13.713227036110977,-0.8199450840913999
13.723227036110977,-0.8221032183350696
13.733227036110977,-0.8242314292310728
13.743227036110977,-0.8263297146511989
13.753227036110976,-0.8283980724971624
13.763227036110976,-0.8304365007006057
13.773227036110976,-0.832444997223101
13.783227036110976,-0.8344235600561516
13.793227036110975,-0.8363721872211951
13.803227036110975,-0.8382908767696043
13.813227036110975,-0.84017962678269
13.823227036110975,-0.8420384353717022
13.833227036110975,-0.8438673006778326
13.843227036110974,-0.8456662208722159
13.853227036110974,-0.8474351941559322
13.863227036110974,-0.8491742187600082
13.873227036110974,-0.8508832929454195
13.883227036110974,-0.8525624150030922
13.893227036110973,-0.8542115832539042
13.903227036110973,-0.8558307960486875
13.913227036110973,-0.8574200517682293
13.923227036110973,-0.8589793488232742
13.933227036110972,-0.8605086856545252
13.943227036110972,-0.8620080607326456
13.953227036110972,-0.8634774725582604
13.963227036110972,-0.8649169196619578
13.973227036110972,-0.8663264006042911
13.983227036110971,-0.8677059139757792
13.993227036110971,-0.869055458396909
14.003227036110971,-0.8703750325181362
14.01322703611097,-0.8716646350198867
14.02322703611097,-0.8729242646125581
14.03322703611097,-0.874153920036521
14.04322703611097,-0.87535360006212
14.05322703611097,-0.8765233034896752
14.06322703611097,-0.8776630291494834
14.07322703611097,-0.8787727759018188
14.08322703611097,-0.8798525426369349
14.093227036110969,-0.880902328275065
14.103227036110969,-0.8819221317664235
14.113227036110969,-0.8829119520912071
14.123227036110968,-0.8838717882595954
14.133227036110968,-0.8848016393117526
14.143227036110968,-0.8857015043178275
14.153227036110968,-0.8865713823779552
14.163227036110968,-0.8874112726222577
14.173227036110967,-0.8882211742108449
14.183227036110967,-0.8890010863338152
14.193227036110967,-0.8897510082112566
14.203227036110967,-0.8904709390932473
14.213227036110966,-0.8911608782598563
14.223227036110966,-0.8918208250211448
14.233227036110966,-0.8924507787171658
14.243227036110966,-0.8930507387179658
14.253227036110966,-0.8936207044235849
14.263227036110965,-0.8941606752640573
14.273227036110965,-0.8946706506994122
14.283227036110965,-0.8951506302196743
14.293227036110965,-0.8956006133448642
14.303227036110965,-0.8960205996249986
14.313227036110964,-0.8964105886400914
14.323227036110964,-0.8967705800001535
14.333227036110964,-0.8971005733451938
14.343227036110964,-0.8974005683452188
14.353227036110964,-0.8976705647002335
14.363227036110963,-0.8979105621402418
14.373227036110963,-0.898120560425246
14.383227036110963,-0.898300559345248
14.393227036110963,-0.8984505587202488
14.403227036110962,-0.898570558400249
14.413227036110962,-0.898660558265249
14.423227036110962,-0.8987205582252491
14.433227036110962,-0.8987505582202491
21.011061837599318,-0.8987505582202491
21.011061837599318,0.0
21.02106183759932,-2.999999500000025E-5
21.03106183759932,-8.999995500000825E-5
21.041061837599322,-1.79999820000069E-4
21.051061837599324,-2.9999950000032506E-4
21.061061837599325,-4.499988750011063E-4
21.071061837599327,-6.299977950030503E-4
21.08106183759933,-8.399960800072521E-4
21.09106183759933,-0.0010799935200154441
21.10106183759933,-0.0013499898750302065
21.111061837599333,-0.0016499848750552064
21.121061837599335,-0.001979978220095469
21.131061837599336,-0.002339969580157677
21.141061837599338,-0.0027299585952505
21.15106183759934,-0.0031499448753849555
21.16106183759934,-0.0035999280005747985
21.171061837599343,-0.004079907520836941
21.181061837599344,-0.004589882956191903
21.191061837599346,-0.005129853796664292
21.201061837599347,-0.005699819502283312
21.21106183759935,-0.006299779503083305
21.22106183759935,-0.00692973319910432
21.231061837599352,-0.0075896799603927135
21.241061837599354,-0.008279619127001779
21.251061837599355,-0.008999550008992408
21.261061837599357,-0.009749471886433778
21.27106183759936,-0.010529384009404074
21.28106183759936,-0.01133928559799124
21.29106183759936,-0.01217917584229375
21.301061837599363,-0.013049053902421436
21.311061837599365,-0.013948918908496307
21.321061837599366,-0.014878769960653432
21.331061837599368,-0.015838606129041834
21.34106183759937,-0.01682842645382543
21.35106183759937,-0.017848229945183973
21.361061837599372,-0.01889801558331406
21.371061837599374,-0.01997778231843014
21.381061837599376,-0.021087529070765564
21.391061837599377,-0.022227254730573676
21.40106183759938,-0.023396958158128908
21.41106183759938,-0.024596638183727933
21.42106183759938,-0.025826293607690825
21.431061837599383,-0.027085923200362263
21.441061837599385,-0.028375525702112755
21.451061837599386,-0.029695099823339913
21.461061837599388,-0.031044644244469722
21.47106183759939,-0.03242415761595787
21.48106183759939,-0.03383363855829111
21.491061837599393,-0.035273085661988605
21.501061837599394,-0.03674249748760338
21.511061837599396,-0.03824187256572373
21.521061837599397,-0.0397712093969747
21.5310618375994,-0.041330506452019584
21.5410618375994,-0.04291976217156147
21.551061837599402,-0.044538974966344756
21.561061837599404,-0.04618814321715679
21.571061837599405,-0.04786726527482945
21.581061837599407,-0.04957633946024083
21.59106183759941,-0.05131536406431688
21.60106183759941,-0.053084337348033146
21.61106183759941,-0.054883257542416485
21.621061837599413,-0.056712122848546855
21.631061837599415,-0.0585709314375591
21.641061837599416,-0.060459681450644794
21.651061837599418,-0.06237837099905407
21.66106183759942,-0.06432699816409755
21.67106183759942,-0.06630556099714822
21.681061837599422,-0.06831405751964342
21.691061837599424,-0.0703524857230868
21.701061837599426,-0.07242084356905032
21.711061837599427,-0.0745191289891763
21.72106183759943,-0.07664733988517951
21.73106183759943,-0.07880547412884921
21.741061837599432,-0.08099352956205136
21.751061837599433,-0.08321150399673069
21.761061837599435,-0.08545939521491296
21.771061837599436,-0.08773720096870713
21.781061837599438,-0.09004491898030766
21.79106183759944,-0.0923825469419967
21.80106183759944,-0.0947500825161465
21.811061837599443,-0.09714752333522168
21.821061837599444,-0.09957486700178163
21.831061837599446,-0.10203211108848287
21.841061837599447,-0.10451925313808152
21.85106183759945,-0.10703629066343576
21.86106183759945,-0.10958322114750824
21.871061837599452,-0.1121600420433687
21.881061837599454,-0.11476675077419647
21.891061837599455,-0.11740334473328304
21.901061837599457,-0.12006982128403465
21.91106183759946,-0.12276617775997499
21.92106183759946,-0.1254924114647478
21.93106183759946,-0.1282485196721196
21.941061837599463,-0.1310344996259824
21.951061837599465,-0.13385034854035652
21.961061837599466,-0.13669606359939324
21.971061837599468,-0.13957164195737776
21.98106183759947,-0.14247708073873194
21.99106183759947,-0.14541237703801727
22.001061837599472,-0.14837752791993766
24.011061837599776,-0.7503730303003114
24.021061837599778,-0.7533381811822318
24.03106183759978,-0.7562734774815172
24.04106183759978,-0.7591789162628714
24.051061837599782,-0.7620544946208558
24.061061837599784,-0.7649002096798926
24.071061837599785,-0.7677160585942667
24.081061837599787,-0.7705020385481295
24.09106183759979,-0.7732581467555013
24.10106183759979,-0.7759843804602741
24.11106183759979,-0.7786807369362144
24.121061837599793,-0.781347213486966
24.131061837599795,-0.7839838074460526
24.141061837599796,-0.7865905161768804
24.151061837599798,-0.7891673370727408
24.1610618375998,-0.7917142675568133
24.1710618375998,-0.7942313050821675
24.181061837599803,-0.7967184471317662
24.191061837599804,-0.7991756912184674
24.201061837599806,-0.8016030348850274
24.211061837599807,-0.8040004757041026
24.22106183759981,-0.8063680112782524
24.23106183759981,-0.8087056392399414
24.241061837599812,-0.811013357251542
24.251061837599813,-0.8132911630053362
24.261061837599815,-0.8155390542235185
24.271061837599817,-0.8177570286581978
24.281061837599818,-0.8199450840913999
24.29106183759982,-0.8221032183350696
24.30106183759982,-0.8242314292310728
24.311061837599823,-0.8263297146511989
24.321061837599824,-0.8283980724971624
24.331061837599826,-0.8304365007006057
24.341061837599828,-0.832444997223101
24.35106183759983,-0.8344235600561516
24.36106183759983,-0.8363721872211951
24.371061837599832,-0.8382908767696043
24.381061837599834,-0.84017962678269
24.391061837599835,-0.8420384353717022
24.401061837599837,-0.8438673006778326
24.41106183759984,-0.8456662208722159
24.42106183759984,-0.8474351941559322
24.43106183759984,-0.8491742187600082
24.441061837599843,-0.8508832929454195
24.451061837599845,-0.8525624150030922
24.461061837599846,-0.8542115832539042
24.471061837599848,-0.8558307960486875
24.48106183759985,-0.8574200517682293
24.49106183759985,-0.8589793488232742
24.501061837599853,-0.8605086856545252
24.511061837599854,-0.8620080607326456
24.521061837599856,-0.8634774725582604
24.531061837599857,-0.8649169196619578
24.54106183759986,-0.8663264006042911
24.55106183759986,-0.8677059139757792
24.561061837599862,-0.869055458396909
24.571061837599864,-0.8703750325181362
24.581061837599865,-0.8716646350198867
24.591061837599867,-0.8729242646125581
24.601061837599868,-0.874153920036521
24.61106183759987,-0.87535360006212
24.62106183759987,-0.8765233034896752
24.631061837599873,-0.8776630291494834
24.641061837599874,-0.8787727759018188
24.651061837599876,-0.8798525426369349
24.661061837599878,-0.880902328275065
24.67106183759988,-0.8819221317664235
24.68106183759988,-0.8829119520912071
24.691061837599882,-0.8838717882595954
24.701061837599884,-0.8848016393117526
24.711061837599885,-0.8857015043178275
24.721061837599887,-0.8865713823779552
24.73106183759989,-0.8874112726222577
24.74106183759989,-0.8882211742108449
24.75106183759989,-0.8890010863338152
24.761061837599893,-0.8897510082112566
24.771061837599895,-0.8904709390932473
24.781061837599896,-0.8911608782598563
24.791061837599898,-0.8918208250211448
24.8010618375999,-0.8924507787171658
24.8110618375999,-0.8930507387179658
24.821061837599903,-0.8936207044235849
24.831061837599904,-0.8941606752640573
24.841061837599906,-0.8946706506994122
24.851061837599907,-0.8951506302196743
24.86106183759991,-0.8956006133448642
24.87106183759991,-0.8960205996249986
24.881061837599912,-0.8964105886400914
24.891061837599914,-0.8967705800001535
24.901061837599915,-0.8971005733451938
24.911061837599917,-0.8974005683452188
24.921061837599918,-0.8976705647002335
24.93106183759992,-0.8979105621402418
24.94106183759992,-0.898120560425246
24.951061837599923,-0.898300559345248
24.961061837599924,-0.8984505587202488
24.971061837599926,-0.898570558400249
24.981061837599928,-0.898660558265249
24.99106183759993,-0.8987205582252491
25.00106183759993,-0.8987505582202491
30.0,-0.8987505582202491
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
