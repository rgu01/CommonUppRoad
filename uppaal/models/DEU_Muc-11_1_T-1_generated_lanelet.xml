<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Generated scenario starts
const int P = 1;
const uint8_t MAXTIME = 10;
const int MAXP = 12;
const int NONE = -1;
const int MAXL = 23;
const int MAXSO = 1;
const int MAXDO = 5;
const int MAXTP = 199;
const int MAXPRE = 3;
const int MAXSUC = 3;
const double SCALE = 100.0;
const int THRESHOLD = 200;
const double TIMESTEPSIZE = 0.1;

typedef int[-1,65535] id_t;

typedef struct {
    int32_t x;
    int32_t y;
}ST_DPOINT;

typedef struct {
    double x;
    double y;
}ST_CPOINT;

typedef struct {
    ST_DPOINT ends[2];
}ST_DLINE;

typedef struct {
    ST_DPOINT points[MAXP];
    bool dashLine;
}ST_BOUND;

typedef struct {
    id_t ID;
    ST_BOUND left;
    ST_BOUND right;
    id_t predecessor[MAXPRE];
    id_t successor[MAXSUC];
    id_t adjLeft;
    bool dirLeft;
    id_t adjRight;
    bool dirRight;
}ST_LANE;

typedef struct {
    bool collide; // collision
    bool outside; // outside road
    bool reach;   // reach the goal
}ST_DETECTION;

typedef struct {
    ST_CPOINT position;
    double velocity;
    double orientation;
    double acceleration;
    double yawRate;
}ST_CSTATE;

typedef struct {
    ST_DPOINT position;
    int16_t velocity;
    int16_t orientation;
    int16_t acceleration;
    int16_t yawRate;
    ST_DETECTION detection;
}ST_DSTATE;

typedef struct {
    hybrid clock x;
    hybrid clock y;
    hybrid clock velocity;
    hybrid clock orientation;
    hybrid clock acceleration;
    hybrid clock yawRate;
}ST_VARIABLES;

typedef struct {
    ST_DPOINT center;
    int16_t width;
    int16_t length;
    int16_t orientation;
}ST_RECTANGLE;

typedef struct {
    int maxVelocity;
    int minVelocity;
    int maxOrientation;
    int minOrientation;
}ST_RULES;

typedef struct {
    ST_DPOINT goal;
}ST_PLANNING;

typedef struct {
    int32_t time;
    ST_CSTATE cState;
}ST_PAIR;
const ST_BOUND leftLane1 = {{{8757, 1735}, {8359, 1745}, {6007, 1763}, {4702, 1788}, {3698, 1840}, {2795, 1922}, {2387, 1979}, {2033, 2063}, {1690, 2185}, {1406, 2326}, {1191, 2470}, {NONE, NONE}}, false};
const ST_BOUND rightLane1 = {{{8764, 1985}, {8361, 1995}, {6011, 2013}, {4715, 2037}, {3720, 2089}, {2829, 2170}, {2444, 2222}, {2117, 2298}, {1800, 2409}, {1545, 2533}, {1343, 2668}, {NONE, NONE}}, false};
const ST_LANE lane1 = {29, leftLane1, rightLane1, {NONE, NONE, NONE}, {43, 49, NONE}, 30, false, NONE, false};

const ST_BOUND leftLane2 = {{{1191, 2470}, {1406, 2326}, {1690, 2185}, {2033, 2063}, {2387, 1979}, {2795, 1922}, {3698, 1840}, {4702, 1788}, {6007, 1763}, {8359, 1745}, {8757, 1735}, {NONE, NONE}}, false};
const ST_BOUND rightLane2 = {{{1035, 2275}, {1267, 2117}, {1552, 1972}, {1899, 1843}, {2257, 1749}, {2669, 1685}, {3589, 1597}, {4613, 1541}, {5943, 1513}, {8341, 1495}, {8750, 1485}, {NONE, NONE}}, false};
const ST_LANE lane2 = {30, leftLane2, rightLane2, {44, 50, NONE}, {NONE, NONE, NONE}, 29, false, NONE, false};

const ST_BOUND leftLane3 = {{{1772, 6081}, {1381, 4990}, {990, 3899}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane3 = {{{1537, 6165}, {1146, 5075}, {755, 3985}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane3 = {31, leftLane3, rightLane3, {NONE, NONE, NONE}, {44, 45, 39}, NONE, false, NONE, false};

const ST_BOUND leftLane4 = {{{-2572, 4617}, {-2559, 4621}, {-2550, 4625}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane4 = {{{-2489, 4381}, {-2476, 4386}, {-2468, 4389}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane4 = {32, leftLane4, rightLane4, {NONE, NONE, NONE}, {48, 46, NONE}, 33, false, NONE, false};

const ST_BOUND leftLane5 = {{{-2550, 4625}, {-2559, 4621}, {-2572, 4617}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane5 = {{{-2627, 4862}, {-2643, 4857}, {-2655, 4853}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane5 = {33, leftLane5, rightLane5, {40, 42, NONE}, {NONE, NONE, NONE}, 32, false, NONE, false};

const ST_BOUND leftLane6 = {{{-1311, 4349}, {-931, 4190}, {-417, 3954}, {-15, 3734}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane6 = {{{-1407, 4118}, {-1036, 3963}, {-537, 3734}, {-144, 3520}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane6 = {34, leftLane6, rightLane6, {47, 48, NONE}, {50, 51, NONE}, 35, false, NONE, false};

const ST_BOUND leftLane7 = {{{-15, 3734}, {-417, 3954}, {-931, 4190}, {-1311, 4349}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane7 = {{{114, 3947}, {-307, 4178}, {-831, 4419}, {-1215, 4579}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane7 = {35, leftLane7, rightLane7, {43, 45, NONE}, {40, 41, NONE}, 34, false, NONE, false};

const ST_BOUND leftLane8 = {{{-1748, 5319}, {-1444, 6106}, {-1142, 6889}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane8 = {{{-1513, 5234}, {-1211, 6016}, {-909, 6799}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane8 = {36, leftLane8, rightLane8, {46, 41, NONE}, {NONE, NONE, NONE}, 37, false, NONE, false};

const ST_BOUND leftLane9 = {{{-1142, 6889}, {-1444, 6106}, {-1748, 5319}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane9 = {{{-1375, 6979}, {-1677, 6197}, {-1979, 5414}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane9 = {37, leftLane9, rightLane9, {NONE, NONE, NONE}, {47, 42, NONE}, 36, false, NONE, false};

const ST_BOUND leftLane10 = {{{439, 2260}, {-304, -139}, {-1990, -5722}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane10 = {{{201, 2334}, {-544, -67}, {-2229, -5650}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane10 = {38, leftLane10, rightLane10, {49, 51, 39}, {NONE, NONE, NONE}, NONE, false, NONE, false};

const ST_BOUND leftLane11 = {{{990, 3899}, {579, 2696}, {439, 2260}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane11 = {{{755, 3985}, {341, 2773}, {201, 2334}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane11 = {39, leftLane11, rightLane11, {31, NONE, NONE}, {38, NONE, NONE}, NONE, false, NONE, false};

const ST_BOUND leftLane12 = {{{-1311, 4349}, {-1764, 4518}, {-2110, 4613}, {-2339, 4646}, {-2441, 4646}, {-2550, 4625}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane12 = {{{-1215, 4579}, {-1699, 4759}, {-2077, 4861}, {-2343, 4896}, {-2491, 4891}, {-2627, 4862}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane12 = {40, leftLane12, rightLane12, {35, NONE, NONE}, {33, NONE, NONE}, 48, false, NONE, false};

const ST_BOUND leftLane13 = {{{-1311, 4349}, {-1431, 4406}, {-1543, 4476}, {-1646, 4567}, {-1732, 4681}, {-1789, 4812}, {-1813, 4949}, {-1808, 5083}, {-1783, 5209}, {-1748, 5319}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane13 = {{{-1215, 4579}, {-1300, 4619}, {-1381, 4667}, {-1450, 4723}, {-1505, 4786}, {-1543, 4860}, {-1563, 4944}, {-1563, 5037}, {-1545, 5133}, {-1513, 5234}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane13 = {41, leftLane13, rightLane13, {35, NONE, NONE}, {36, NONE, NONE}, 47, false, NONE, false};

const ST_BOUND leftLane14 = {{{-1748, 5319}, {-1802, 5204}, {-1869, 5098}, {-1946, 5001}, {-2034, 4915}, {-2129, 4839}, {-2229, 4773}, {-2337, 4714}, {-2550, 4625}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane14 = {{{-1979, 5414}, {-2015, 5335}, {-2064, 5253}, {-2123, 5178}, {-2191, 5109}, {-2267, 5047}, {-2350, 4992}, {-2435, 4945}, {-2627, 4862}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane14 = {42, leftLane14, rightLane14, {37, NONE, NONE}, {33, NONE, NONE}, 46, false, NONE, false};

const ST_BOUND leftLane15 = {{{1191, 2470}, {1010, 2633}, {785, 2886}, {449, 3315}, {310, 3471}, {160, 3610}, {-15, 3734}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane15 = {{{1343, 2668}, {1197, 2799}, {981, 3041}, {635, 3482}, {479, 3655}, {304, 3815}, {114, 3947}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane15 = {43, leftLane15, rightLane15, {29, NONE, NONE}, {35, NONE, NONE}, 50, false, NONE, false};

const ST_BOUND leftLane16 = {{{990, 3899}, {901, 3605}, {858, 3351}, {851, 3149}, {868, 3003}, {904, 2863}, {963, 2732}, {1044, 2613}, {1150, 2504}, {1191, 2470}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane16 = {{{755, 3985}, {655, 3646}, {608, 3357}, {603, 3119}, {626, 2937}, {677, 2758}, {758, 2589}, {866, 2438}, {991, 2311}, {1035, 2275}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane16 = {44, leftLane16, rightLane16, {31, NONE, NONE}, {30, NONE, NONE}, NONE, false, NONE, false};

const ST_BOUND leftLane17 = {{{990, 3899}, {920, 3757}, {870, 3692}, {807, 3634}, {733, 3589}, {643, 3559}, {489, 3547}, {344, 3572}, {155, 3643}, {-15, 3734}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane17 = {{{755, 3985}, {719, 3906}, {696, 3872}, {671, 3844}, {642, 3822}, {617, 3808}, {528, 3794}, {430, 3807}, {273, 3864}, {114, 3947}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane17 = {45, leftLane17, rightLane17, {31, NONE, NONE}, {35, NONE, NONE}, NONE, false, NONE, false};

const ST_BOUND leftLane18 = {{{-2550, 4625}, {-2337, 4714}, {-2229, 4773}, {-2129, 4839}, {-2034, 4915}, {-1946, 5001}, {-1869, 5098}, {-1802, 5204}, {-1748, 5319}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane18 = {{{-2468, 4389}, {-2198, 4504}, {-2072, 4576}, {-1952, 4658}, {-1839, 4753}, {-1737, 4860}, {-1647, 4978}, {-1571, 5105}, {-1513, 5234}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane18 = {46, leftLane18, rightLane18, {32, NONE, NONE}, {36, NONE, NONE}, 42, false, NONE, false};

const ST_BOUND leftLane19 = {{{-1748, 5319}, {-1783, 5209}, {-1808, 5083}, {-1813, 4949}, {-1789, 4812}, {-1732, 4681}, {-1646, 4567}, {-1543, 4476}, {-1431, 4406}, {-1311, 4349}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane19 = {{{-1979, 5414}, {-2034, 5243}, {-2066, 5067}, {-2068, 4884}, {-2030, 4700}, {-1949, 4532}, {-1835, 4391}, {-1700, 4277}, {-1554, 4187}, {-1407, 4118}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane19 = {47, leftLane19, rightLane19, {37, NONE, NONE}, {34, NONE, NONE}, 41, false, NONE, false};

const ST_BOUND leftLane20 = {{{-2550, 4625}, {-2441, 4646}, {-2339, 4646}, {-2110, 4613}, {-1764, 4518}, {-1311, 4349}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane20 = {{{-2468, 4389}, {-2404, 4401}, {-2312, 4398}, {-2112, 4362}, {-1809, 4271}, {-1407, 4118}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane20 = {48, leftLane20, rightLane20, {32, NONE, NONE}, {34, NONE, NONE}, 40, false, NONE, false};

const ST_BOUND leftLane21 = {{{1191, 2470}, {1047, 2571}, {950, 2623}, {846, 2656}, {800, 2662}, {757, 2661}, {716, 2653}, {675, 2635}, {641, 2614}, {570, 2539}, {483, 2380}, {439, 2260}}, false};
const ST_BOUND rightLane21 = {{{1343, 2668}, {1160, 2794}, {1021, 2862}, {870, 2905}, {783, 2912}, {694, 2903}, {607, 2878}, {528, 2838}, {454, 2780}, {349, 2657}, {248, 2465}, {201, 2334}}, false};
const ST_LANE lane21 = {49, leftLane21, rightLane21, {29, NONE, NONE}, {38, NONE, NONE}, NONE, false, NONE, false};

const ST_BOUND leftLane22 = {{{-15, 3734}, {160, 3610}, {310, 3471}, {449, 3315}, {785, 2886}, {1010, 2633}, {1191, 2470}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane22 = {{{-144, 3520}, {15, 3408}, {166, 3270}, {305, 3114}, {642, 2678}, {868, 2424}, {1035, 2275}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane22 = {50, leftLane22, rightLane22, {34, NONE, NONE}, {30, NONE, NONE}, 43, false, NONE, false};

const ST_BOUND leftLane23 = {{{-15, 3734}, {147, 3620}, {285, 3487}, {396, 3330}, {475, 3155}, {518, 2970}, {530, 2782}, {508, 2540}, {439, 2260}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_BOUND rightLane23 = {{{-144, 3520}, {-24, 3438}, {83, 3340}, {169, 3225}, {232, 3095}, {269, 2952}, {281, 2804}, {265, 2599}, {201, 2334}, {NONE, NONE}, {NONE, NONE}, {NONE, NONE}}, false};
const ST_LANE lane23 = {51, leftLane23, rightLane23, {34, NONE, NONE}, {38, NONE, NONE}, NONE, false, NONE, false};

const ST_LANE laneNet[MAXL] = {lane1, lane2, lane3, lane4, lane5, lane6, lane7, lane8, lane9, lane10, lane11, lane12, lane13, lane14, lane15, lane16, lane17, lane18, lane19, lane20, lane21, lane22, lane23};

const bool staticObsExists = false;
const ST_RECTANGLE staticObs[MAXSO] = {{{NONE, NONE}, NONE, NONE, NONE}};

const ST_PLANNING planning = {{-901, -1692}};


// Generated scenario ends

broadcast chan chooseEgo, chooseObs, begin, update;

ST_DSTATE dStateEgo;       // discrete variables
ST_VARIABLES varsEgo;      // continuous variables
ST_RECTANGLE shapeEgo;     // shape of ego vehicle
hybrid clock D;            /// "cost" of distance used in strategy optimization
clock time;                // global time

double i2d(const int32_t i) {
    double v = i/SCALE;
    return v;
}

int32_t d2i(const double i) {
    int32_t v = fint(i*SCALE);
    return v;
}

double mTimeStep(const double value) {
    return value*TIMESTEPSIZE;
}

int32_t getDisP2P(const ST_DPOINT &amp;p1, const ST_DPOINT &amp;p2) {
    double distance = 0.0;
    double rx1 = i2d(p1.x), ry1 = i2d(p1.y);
    double rx2 = i2d(p2.x), ry2 = i2d(p2.y);
    distance = sqrt(pow(rx1 - rx2, 2) + pow(ry1 - ry2, 2));

    return d2i(distance);
}

// Function to calculate the corner points of a rectangle
void calculateCornerPoints(ST_RECTANGLE veh_state, ST_DPOINT &amp;corners[4]) {
    double halfLength = i2d(veh_state.length)/2.0;
    double halfWidth = i2d(veh_state.width)/2.0;
    double angle = i2d(veh_state.orientation);

    // Calculate the coordinates of each corner point based on the center, length, width, and orientation
    corners[0].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) - halfWidth*sin(angle));
    corners[0].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) + halfWidth*cos(angle));

    corners[1].x = d2i(i2d(veh_state.center.x) + halfLength*cos(angle) + halfWidth*sin(angle));
    corners[1].y = d2i(i2d(veh_state.center.y) + halfLength*sin(angle) - halfWidth*cos(angle));

    corners[2].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) + halfWidth*sin(angle));
    corners[2].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) - halfWidth*cos(angle));

    corners[3].x = d2i(i2d(veh_state.center.x) - halfLength*cos(angle) - halfWidth*sin(angle));
    corners[3].y = d2i(i2d(veh_state.center.y) - halfLength*sin(angle) + halfWidth*cos(angle));
}

// Function to check if all elements in the vector (size=4) have the same sign
bool same_sign(int32_t vec[4]) {
    int i = 0;
    int sign = (vec[0] &gt;= 0) ? 1 : -1; // Get the sign of the first element
    for (i = 1; i &lt; 4; i++) {
        if ((vec[i] &gt;= 0) != (sign &gt;= 0)) {
            return false; // Different signs found
        }
    }
    return true; // All elements have the same sign
}

// check if pt1 is on the same line defined by pt2-pt3
bool check_online(ST_DPOINT pt1, ST_DPOINT pt2, ST_DPOINT pt3) {
    double dis12, dis13, dis23;

    dis12 = sqrt(pow(pt1.x - pt2.x, 2) + pow(pt1.y - pt2.y, 2));
    dis13 = sqrt(pow(pt1.x - pt3.x, 2) + pow(pt1.y - pt3.y, 2));
    dis23 = sqrt(pow(pt2.x - pt3.x, 2) + pow(pt2.y - pt3.y, 2));
    if (dis12 + dis13 == dis23)
        return true;
    else
        return false; 
}

// Check if any corner of box2 is outside box1
int check_coverage(ST_DPOINT box1[4], ST_DPOINT box2[4]) {
    int i = 0, j = 0;
    int32_t abx = 0, aby = 0, apx = 0, apy = 0;
    int32_t cross_prod[4];
    int inside_sum = 0;
    int is_online = 0;
    // Check if all corners of box2 fall outside the bounding box of box1   
    for (i = 0; i &lt; 4; i++) {
        // get the x y coordinate of the test points
        for (j = 0; j &lt; 4; j++) {
            abx = box1[(j+1)%4].x - box1[j].x; // when j+1=4, back to the first one
            aby = box1[(j+1)%4].y - box1[j].y;
            apx = box2[i].x - box1[j].x;
            apy = box2[i].y - box1[j].y;
            // cross product of ab and ap
            cross_prod[j] = abx*apy - apx*aby;
            // check if on the line
            if (check_online(box2[i], box1[j], box1[(j+1)%4]) == 1)
                is_online = 1;
        }
        // if all the cross production have the same sign, then the test point is within the box1
        if (same_sign(cross_prod) || is_online == 1)
            inside_sum++;
    }
    return inside_sum;
}

// Function to count non-zero elements in a 2D array
int check_pts_num(ST_DPOINT lane_pts[MAXP]) {
    uint16_t count = 0;
    // NONE or 0?
    while (count &lt; MAXP &amp;&amp; (lane_pts[count].x != NONE || lane_pts[count].y != NONE)){
        count++;
    }
    return count;
}

// check if veh_state are not covered by laneNet, or if vehicle rectangle touches laneNet
// can this function call check_inlane_lane_single?
bool check_inlane_laneNet(ST_RECTANGLE veh_state, int &amp;lane, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t i_lane = 0;
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;
    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];

    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);
    for(i_lane = 0; i_lane &lt; MAXL; i_lane++){
        // check the number of points in each lane
        num_box = check_pts_num(laneNet[i_lane].left.points) - 1;
        for (i_box = 0; i_box &lt; num_box; i_box++){
            // define the corner of the road box
            box_corners[0] = laneNet[i_lane].right.points[i_box];
            box_corners[1] = laneNet[i_lane].right.points[i_box + 1];
            box_corners[2] = laneNet[i_lane].left.points[i_box + 1];
            box_corners[3] = laneNet[i_lane].left.points[i_box];
            // check if the inlane status of the vehicle box to the current box
            inlane_pts_num += check_coverage(box_corners, veh_corners);    
        }
    }
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

// check if veh_state are not covered by a single lane, or if vehicle rectangle touches the edge of the lane
bool check_inlane_lane_single(const ST_LANE lane, ST_RECTANGLE veh_state, ST_DPOINT &amp;veh_corners[4], ST_DPOINT &amp;box_corners[4]) {
    uint8_t num_box = 0;
    uint8_t i_box = 0;
    uint8_t inlane_pts_num = 0;

    //ST_DPOINT veh_corners[4];
    //ST_DPOINT box_corners[4];
    // Calculate the corner points
    calculateCornerPoints(veh_state, veh_corners);

    // check the number of points in the lane
    num_box = check_pts_num(lane.left.points) - 1;
    for (i_box = 0; i_box &lt; num_box; i_box++){
        // define the corner of the road box
        box_corners[0] = lane.right.points[i_box];
        box_corners[1] = lane.right.points[i_box + 1];
        box_corners[2] = lane.left.points[i_box + 1];
        box_corners[3] = lane.left.points[i_box];
        // check if the inlane status of the vehicle box to the current box
        inlane_pts_num += check_coverage(box_corners, veh_corners);         
    }
    
    if(inlane_pts_num &lt; 4) {
        return false;
    }
    else {
        return true;
    }
}

int32_t compute_approximating_circle_radius(int ego_length, int ego_width) {
    double length = i2d(ego_length);
    double width = i2d(ego_width);
    double square_length, diagonal_square, approx_radius;

    if (length &lt;= 0 || width &lt;= 0) {
        return -1;
    }

    if (fabs(length) &lt; 1e-6 &amp;&amp; fabs(width) &lt; 1e-6) {
        return 0;
    }
    // Divide rectangle into 3 smaller rectangles
    square_length = length/3.0;
    // Calculate minimum radius
    diagonal_square = sqrt(pow(square_length/2.0, 2) + pow(width/2.0, 2));
    // Round up value
    approx_radius = round(diagonal_square*10.0) / 10.0 + 0.1;

    return d2i(approx_radius);
}

void compute_centers_of_approximation_circles(ST_RECTANGLE veh_rect, ST_DPOINT &amp;centers[2]) {
    double disc_radius, distance_centers, veh_cent_x_double, veh_cent_y_double;

    disc_radius = i2d(compute_approximating_circle_radius(veh_rect.length, veh_rect.width));
    distance_centers = disc_radius/2.0;

    // Compute the center position of first circle (front)
    veh_cent_x_double = i2d(veh_rect.center.x);
    veh_cent_y_double = i2d(veh_rect.center.y);
    centers[0].x = d2i(veh_cent_x_double + (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[0].y = d2i(veh_cent_y_double + (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));

    // Compute the center position of second circle (rear)
    centers[1].x = d2i(veh_cent_x_double - (distance_centers/2.0)*cos(i2d(veh_rect.orientation)));
    centers[1].y = d2i(veh_cent_y_double - (distance_centers/2.0)*sin(i2d(veh_rect.orientation)));
}



bool check_collision(ST_RECTANGLE veh_st_rect1, ST_RECTANGLE veh_st_rect2, int dis_thres) {    
    // define two vehicles' circle tuple (front and rear)
    ST_DPOINT veh_circle_tuple1[2] = {{0, 0}, {0, 0}};
    ST_DPOINT veh_circle_tuple2[2] = {{0, 0}, {0, 0}};
    double min_dis = FLT_MAX, dis = 0;
    int i, j;    
    //int32_t temp[2][2];
    
    // calculate the centers of the vehicles' circles
    compute_centers_of_approximation_circles(veh_st_rect1, veh_circle_tuple1);
    compute_centers_of_approximation_circles(veh_st_rect2, veh_circle_tuple2);

    for (i = 0; i &lt; 2; ++i) {
        for (j = 0; j &lt; 2; ++j) {
            dis = sqrt(pow(veh_circle_tuple1[i].x - veh_circle_tuple2[j].x, 2) + pow(veh_circle_tuple1[i].y - veh_circle_tuple2[j].y, 2));
            //temp[i][j] = d2i(dis);
            min_dis = fmin(min_dis, dis);
        }
    }
    if (dis_thres &gt; min_dis)
        return true;
    else
        return false;
}
   
</declaration>
	<template>
		<name x="5" y="5">MovingObs</name>
		<parameter>const id_t ID, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_PAIR &amp;trajectory[MAXTP]</parameter>
		<declaration>ST_VARIABLES vars;  // continuous variables
ST_DSTATE dState;   // discrete state
uint8_t pc = 0;     // policy counter
uint8_t tc = 0;     // time counter
ST_RECTANGLE self;

void decisionMaking() {
    if(pc &lt; MAXTP &amp;&amp; tc == trajectory[pc].time) {
        // predefined trajectory starts
        vars.x = trajectory[pc].cState.position.x;
        vars.y = trajectory[pc].cState.position.y;
        vars.velocity = mTimeStep(trajectory[pc].cState.velocity);

        vars.acceleration = mTimeStep(trajectory[pc].cState.acceleration);
        vars.yawRate = mTimeStep(trajectory[pc].cState.yawRate);

        dState.acceleration = d2i(mTimeStep(trajectory[pc].cState.acceleration));
        dState.yawRate = d2i(mTimeStep(trajectory[pc].cState.yawRate));
        pc++;
    }
    else if(pc &lt; MAXTP) {
        tc++;
    }
    else if(pc &gt;= MAXTP - 1) {
        vars.velocity = 0;
        vars.acceleration = 0;
        vars.yawRate = 0;
        dState.velocity = 0;
        dState.acceleration = 0;
        dState.yawRate = 0;
    }
}

void initCon(ST_VARIABLES &amp;vars, const ST_CSTATE &amp;initCS) {
    vars.x = initCS.position.x;
    vars.y = initCS.position.y;
    vars.velocity = mTimeStep(initCS.velocity);
    vars.orientation = initCS.orientation;
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);
    time = 0;  
}

void initDis(ST_DSTATE &amp;dState, const ST_CSTATE &amp;initCS) {
    dState.position.x = d2i(initCS.position.x);
    dState.position.y = d2i(initCS.position.y);
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.orientation = d2i(initCS.orientation);
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;

    dStateEgo.detection.collide |= check_collision(shapeEgo, shape, THRESHOLD);
    dState.detection.collide = dStateEgo.detection.collide;
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}

void initialize() {
    pc = 0;
    tc = 0;
    initCon(vars,initCS);
    initDis(dState,initCS);
    self = shape;
}









</declaration>
		<location id="id0" x="-102" y="-34">
			<name x="-76" y="-34">Move</name>
			<label kind="invariant" x="-255" y="-17">vars.x' == vars.velocity*cos(vars.orientation) &amp;&amp;
vars.y' == vars.velocity*sin(vars.orientation) &amp;&amp;
vars.velocity' == vars.acceleration &amp;&amp;
vars.orientation' == vars.yawRate &amp;&amp;
vars.yawRate' == 0 &amp;&amp;
vars.acceleration' == 0</label>
		</location>
		<init ref="id0"/>
		<transition id="id1" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-161" y="-119">update?</label>
			<label kind="assignment" x="-161" y="-102">updateDis(dState,self)</label>
			<nail x="-136" y="-102"/>
			<nail x="-68" y="-102"/>
		</transition>
		<transition id="id2" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-246" y="-68">begin?</label>
			<label kind="assignment" x="-246" y="-51">initialize()</label>
			<nail x="-170" y="-68"/>
			<nail x="-170" y="-34"/>
		</transition>
		<transition id="id3" controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-34" y="-68">chooseObs?</label>
			<label kind="assignment" x="-42" y="-51">decisionMaking()</label>
			<nail x="-34" y="-34"/>
			<nail x="-34" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS, const ST_RECTANGLE &amp;shape, const ST_RULES &amp;rules</parameter>
		<declaration>typedef int[0,0] BRAKE_t;    // 1 gear of brake force
typedef int[0,0] PUSH_t;     // 1 gear of push force
typedef int[0,1] TURN_t;     // 2 speeds of turning 

const int8_t Brake[3] = {d2i(-0.1), d2i(-0.2), d2i(-0.3)};
const int8_t Push[3] = {d2i(0.1), d2i(0.2), d2i(0.3)};
const int8_t Turn[2] = {d2i(0.1), d2i(-0.1)};
const bool CONSTANTSPEED = true;

void opConst() {
    dStateEgo.acceleration = 0;
    varsEgo.acceleration = 0;
}

void opAcc(int gear) {
    dStateEgo.acceleration = Push[gear];
    varsEgo.acceleration = i2d(Push[gear]);
}

void opBrake(int gear) {
    dStateEgo.acceleration = Brake[gear];
    varsEgo.acceleration = i2d(Brake[gear]);
}

void opTurn(int dir) {
    int nr = Turn[dir];
    int no = dStateEgo.orientation;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(no);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int nx = shapeEgo.center.x + d2i(vx) * P;
    int ny = shapeEgo.center.y + d2i(vy) * P;

    dStateEgo.yawRate = Turn[dir];
    varsEgo.yawRate = i2d(Turn[dir]);
}

void keep() {
    dStateEgo.yawRate = 0;
    varsEgo.yawRate = 0.0;
}

bool canAcc(int gear) {
    int nextAcc = Push[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextAcc &lt;= rules.maxVelocity) 
        return true;
    return false;
}

bool canDec(int gear) {
    int nextDec = Brake[gear];
    if(!CONSTANTSPEED &amp;&amp; dStateEgo.velocity + P*nextDec &gt;= rules.minVelocity) 
        return true;
    return false;
}

bool canTurn(int dir) {
    int nextRate = Turn[dir];
    int nextOrientation = dStateEgo.orientation + P*nextRate;
    ST_RECTANGLE nextShape = shape;
    double rVelocity = i2d(dStateEgo.velocity);
    double rOrientation = i2d(nextOrientation);
    double vx = rVelocity*cos(rOrientation);
    double vy = rVelocity*sin(rOrientation);
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    bool outroad = false;

    nextShape.center.x = shapeEgo.center.x + d2i(vx) * P;
    nextShape.center.y = shapeEgo.center.y + d2i(vy) * P;
    nextShape.orientation = nextOrientation;
    outroad = !check_inlane_laneNet(nextShape, lane, veh_corners, box_corners);

    if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation &amp;&amp; !outroad) 
    //if(nextOrientation &gt;= rules.minOrientation &amp;&amp; nextOrientation &lt;= rules.maxOrientation)
        return true;
    return false;
}

void updateDis(ST_DSTATE &amp;dState, ST_RECTANGLE &amp;shape) {
    // real numbers of the current state
    double rVelocity = 0.0, vx = 0.0, vy = 0.0;
    double rOrientation = 0.0, rAcceleration = 0.0, rYawRate = 0.0;
    // int/real numbers of velocity on X and Y axes
    int dVx = 0, dVy = 0;
    uint8_t i = 0;
    int lane = 0;
    ST_DPOINT veh_corners[4];
    ST_DPOINT box_corners[4];
    uint8_t inlane_pts_num = 0;

    // update discrete velocity and orientation
    dState.velocity = dState.velocity + dState.acceleration * P;
    dState.orientation = dState.orientation + dState.yawRate * P;
    // conversion to real numbers
    rVelocity = i2d(dState.velocity);
    rOrientation = i2d(dState.orientation);
    rAcceleration = i2d(dState.acceleration);
    rYawRate = i2d(dState.yawRate);
    // velocity projection
    vx = rVelocity*cos(rOrientation);
    vy = rVelocity*sin(rOrientation);
    dVx = d2i(vx);
    dVy = d2i(vy);
    // update other discrete varaibles
    dState.position.x = dState.position.x + dVx * P;
    dState.position.y = dState.position.y + dVy * P;
    shape.center.x = dState.position.x;
    shape.center.y = dState.position.y;
    shape.orientation = dState.orientation;
    dState.detection.outside = !check_inlane_laneNet(shape, lane, veh_corners, box_corners);
    dState.detection.reach = (getDisP2P(shape.center, planning.goal) &lt;= THRESHOLD);
    if(staticObsExists) {
        for(i = 0; i &lt; MAXSO; i++) {
            dState.detection.collide |= check_collision(shape, staticObs[i], THRESHOLD);
        }
    }
}

void initDis(ST_DSTATE &amp;dState) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    if(initCS.position.x == NONE || initCS.position.y == NONE) {
        dState.position = middleDStart;
    } else {
        dState.position.x = d2i(initCS.position.x);
        dState.position.y = d2i(initCS.position.y);
    }
    dState.acceleration = d2i(mTimeStep(initCS.acceleration));
    dState.velocity = d2i(mTimeStep(initCS.velocity));
    dState.yawRate = d2i(mTimeStep(initCS.yawRate));
    dState.orientation = d2i(angle);

    dState.detection.collide = false;
    dState.detection.outside = false;
    dState.detection.reach = false;
}

void initialize() {
    initDis(dStateEgo);
    shapeEgo = shape;
    shapeEgo.center = dStateEgo.position;
}









</declaration>
		<location id="id4" x="-340" y="-136">
			<name x="-433" y="-161">Turn_Const</name>
			<label kind="comments" x="-34" y="-51">One cannot turn and 
acc or brake 
simutaneously.</label>
		</location>
		<location id="id5" x="-68" y="136">
			<name x="-187" y="136">Straight_Dec</name>
		</location>
		<location id="id6" x="-68" y="-136">
			<name x="-51" y="-170">Straight_Acc</name>
		</location>
		<location id="id7" x="-204" y="0">
			<name x="-289" y="-17">Choose</name>
			<committed/>
		</location>
		<location id="id8" x="-340" y="136">
			<name x="-476" y="161">Straight_Const</name>
		</location>
		<init ref="id8"/>
		<transition id="id9" controllable="false">
			<source ref="id5"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-280" y="187">begin?</label>
			<label kind="assignment" x="-195" y="187">initialize()</label>
			<nail x="-68" y="204"/>
			<nail x="-340" y="204"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-424" y="-221">begin?</label>
			<label kind="assignment" x="-424" y="-204">initialize()</label>
			<nail x="-68" y="-204"/>
			<nail x="-442" y="-204"/>
			<nail x="-442" y="0"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id4"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-433" y="-34">begin?</label>
			<label kind="assignment" x="-433" y="-17">initialize()</label>
			<nail x="-408" y="-136"/>
			<nail x="-408" y="0"/>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-306" y="144">update?</label>
			<label kind="assignment" x="-306" y="161">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-331" y="170"/>
			<nail x="-306" y="170"/>
		</transition>
		<transition id="id13" controllable="false">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-25" y="93">update?</label>
			<label kind="assignment" x="-25" y="119">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="102"/>
			<nail x="-34" y="136"/>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-42" y="-144">update?</label>
			<label kind="assignment" x="-42" y="-127">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-34" y="-136"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-314" y="-187">update?</label>
			<label kind="assignment" x="-314" y="-170">updateDis(dStateEgo,shapeEgo)</label>
			<nail x="-306" y="-170"/>
			<nail x="-340" y="-170"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-357" y="-68">chooseEgo?</label>
			<label kind="assignment" x="-357" y="-51">keep()</label>
			<label kind="comments" x="-34" y="25">Keeps moving with 
this angle</label>
			<nail x="-340" y="-68"/>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-467" y="102">begin?</label>
			<label kind="assignment" x="-467" y="119">initialize()</label>
			<nail x="-374" y="102"/>
			<nail x="-374" y="127"/>
		</transition>
		<transition id="id18">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="select" x="-263" y="-93">d:TURN_t</label>
			<label kind="guard" x="-263" y="-76">canTurn(d)</label>
			<label kind="assignment" x="-263" y="-59">opTurn(d)</label>
			<nail x="-272" y="-136"/>
		</transition>
		<transition id="id19">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="102">chooseEgo?</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition id="id20">
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="select" x="-144" y="17">f:BRAKE_t</label>
			<label kind="guard" x="-144" y="34">canDec(f)</label>
			<label kind="assignment" x="-144" y="51">opBrake(f)</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition id="id21">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-195" y="-119">chooseEgo?</label>
			<nail x="-136" y="-136"/>
		</transition>
		<transition id="id22">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-136" y="-76">f:PUSH_t</label>
			<label kind="guard" x="-136" y="-59">canAcc(f)</label>
			<label kind="assignment" x="-136" y="-42">opAcc(f)</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition id="id23">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="-340" y="51">opConst()</label>
			<nail x="-340" y="68"/>
		</transition>
		<transition id="id24">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-314" y="102">chooseEgo?</label>
			<nail x="-272" y="136"/>
		</transition>
	</template>
	<template>
		<name>Decisions</name>
		<declaration>clock timer;
int counter = 0;</declaration>
		<location id="id25" x="102" y="68">
			<name x="110" y="42">Idle</name>
			<label kind="invariant" x="85" y="85">timer&lt;=P</label>
		</location>
		<location id="id26" x="102" y="-34">
			<name x="92" y="-68">Done</name>
			<urgent/>
		</location>
		<location id="id27" x="-68" y="-34">
			<name x="-78" y="-68">ObsGo</name>
			<urgent/>
		</location>
		<location id="id28" x="-204" y="-34">
			<name x="-214" y="-68">EgoGo</name>
			<urgent/>
		</location>
		<location id="id29" x="-340" y="-34">
			<name x="-350" y="-68">Start</name>
			<urgent/>
		</location>
		<init ref="id29"/>
		<transition id="id30" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-348" y="51">counter==MAXTIME</label>
			<label kind="synchronisation" x="-348" y="68">begin!</label>
			<label kind="assignment" x="-348" y="85">timer=0,counter=0</label>
			<nail x="68" y="102"/>
			<nail x="-340" y="102"/>
			<nail x="-340" y="0"/>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-280" y="-59">begin!</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="guard" x="-170" y="0">timer==P&amp;&amp;
counter!=MAXTIME</label>
			<label kind="synchronisation" x="-170" y="42">update!</label>
			<label kind="assignment" x="-102" y="42">timer=0,counter++</label>
			<nail x="-204" y="68"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="59" y="-8">timer=0</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-34" y="-59">chooseObs!</label>
		</transition>
		<transition id="id35" controllable="false">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-170" y="-59">chooseEgo!</label>
		</transition>
	</template>
	<template>
		<name>Dynamics</name>
		<parameter>const id_t ID, const int[0,MAXL] initLane, const ST_CSTATE &amp;initCS</parameter>
		<declaration>void initCon(ST_VARIABLES &amp;vars) {
    ST_DPOINT leftTop = laneNet[initLane].left.points[0];
    ST_DPOINT rightTop = laneNet[initLane].left.points[1];
    ST_DPOINT rightDown = laneNet[initLane].right.points[1];
    ST_DPOINT leftDown = laneNet[initLane].right.points[0];
    ST_DPOINT middleDStart, middleDEnd;
    int16_t diffX = 0, diffY = 0;
    double xs, ys, xe, ye, angle;

    diffX = leftDown.x - leftTop.x;
    diffY = leftDown.y - leftTop.y;
    middleDStart.x = leftTop.x + diffX/2;
    middleDStart.y = leftTop.y + diffY/2;
    diffX = rightDown.x - rightTop.x;
    diffY = rightDown.y - rightTop.y;
    middleDEnd.x = rightTop.x + diffX/2;
    middleDEnd.y = rightTop.y + diffY/2;
    
    xs = i2d(middleDStart.x);
    ys = i2d(middleDStart.y);
    xe = i2d(middleDEnd.x);
    ye = i2d(middleDEnd.y);

    angle = atan2(ye-ys,xe-xs);

    if(initCS.position.x == NONE || initCS.position.y == NONE) {
        vars.x = i2d(middleDStart.x);
        vars.y = i2d(middleDStart.y);
    } else {
        vars.x = initCS.position.x;
        vars.y = initCS.position.y;
    }
    vars.velocity = mTimeStep(initCS.velocity);
    vars.orientation = angle;
    vars.acceleration = mTimeStep(initCS.acceleration);
    vars.yawRate = mTimeStep(initCS.yawRate);

    time = 0;
    if(dStateEgo.detection.reach) 
        D = 0; // only reset the reward function when reaching the goal
    if(dStateEgo.detection.collide || dStateEgo.detection.outside)
        D = D + 100; // punish the ego when it collides or goes outside the road    
}

void updateCon(ST_VARIABLES &amp;vars) {
    vars.acceleration = i2d(dStateEgo.acceleration);
    vars.yawRate = i2d(dStateEgo.yawRate);
}</declaration>
		<location id="id36" x="0" y="0">
			<name x="-59" y="-8">Move</name>
			<label kind="invariant" x="-161" y="17">varsEgo.x' == varsEgo.velocity*cos(varsEgo.orientation) &amp;&amp;
varsEgo.y' == varsEgo.velocity*sin(varsEgo.orientation) &amp;&amp;
varsEgo.velocity' == varsEgo.acceleration &amp;&amp;
varsEgo.orientation' == varsEgo.yawRate &amp;&amp;
varsEgo.yawRate' == 0 &amp;&amp;
varsEgo.acceleration' == 0 &amp;&amp;
D' == getDisP2P(dStateEgo.position, planning.goal) 
      - dStateEgo.detection.reach * 100 
      + dStateEgo.detection.collide * 50 
      + dStateEgo.detection.outside * 50</label>
		</location>
		<init ref="id36"/>
		<transition id="id37" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="68" y="-68">update?</label>
			<label kind="assignment" x="68" y="-51">updateCon(varsEgo)</label>
			<nail x="68" y="-68"/>
			<nail x="68" y="-34"/>
		</transition>
		<transition id="id38" controllable="false">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-161" y="-68">begin?</label>
			<label kind="assignment" x="-161" y="-51">initCon(varsEgo)</label>
			<nail x="-68" y="-34"/>
			<nail x="-68" y="-68"/>
		</transition>
	</template>
	<system>// Generated moving obstacles starts
const ST_CSTATE initCS52 = {{-12.2531, 63.2824}, 2.8845, 1.2027, -0.3022, 0.0};
const ST_RECTANGLE shapeObs52 = {{-1225, 6328}, 180, 500, 0};
const ST_PAIR PHOLDER = {NONE,{{NONE,NONE},NONE,NONE,NONE,NONE}};
const ST_PAIR trajectory52[MAXTP] = {{1, {{-12.1503, 63.549}, 2.8575, 1.2027, -0.2697, 0}}, {2, {{-12.0473, 63.8161}, 2.8638, 1.2027, 0.0631, 0}}, {3, {{-11.9431, 64.0862}, 2.895, 1.2027, 0.3114, 0}}, {4, {{-11.8411, 64.3508}, 2.8361, 1.2027, -0.5886, 0}}, {5, {{-11.7393, 64.6145}, 2.8274, 1.2027, -0.0874, 0}}, {6, {{-11.6366, 64.8808}, 2.8543, 1.2027, 0.2693, 0}}, {7, {{-11.5329, 65.1498}, 2.884, 1.2027, 0.2972, 0}}, {8, {{-11.4271, 65.424}, 2.9393, 1.2027, 0.5526, 0}}, {9, {{-11.3241, 65.6911}, 2.8637, 1.2027, -0.7559, 0}}, {10, {{-11.2205, 65.9597}, 2.8796, 1.2027, 0.1593, 0}}};
obs52 = MovingObs(52, initCS52, shapeObs52, trajectory52);
const ST_CSTATE initCS53 = {{-7.5219, -11.8977}, 5.0876, -1.8641, -0.6731, 0.0};
const ST_RECTANGLE shapeObs53 = {{-752, -1189}, 180, 500, 0};
const ST_PAIR trajectory53[MAXTP] = {{1, {{-7.6702, -12.3886}, 5.128, -1.8641, 0.4039, 0}}, {2, {{-7.8183, -12.8793}, 5.1251, -1.8641, -0.0294, 0}}, {3, {{-7.9666, -13.3702}, 5.128, -1.8641, 0.0296, 0}}, {4, {{-8.1152, -13.8622}, 5.1402, -1.8641, 0.122, 0}}, {5, {{-8.2639, -14.3548}, 5.1455, -1.8641, 0.0531, 0}}, {6, {{-8.4112, -14.8424}, 5.0934, -1.8641, -0.521, 0}}, {7, {{-8.5619, -15.3414}, 5.2122, -1.8641, 1.1878, 0}}, {8, {{-8.7092, -15.8292}, 5.0952, -1.8641, -1.1698, 0}}, {9, {{-8.8588, -16.3245}, 5.1745, -1.8641, 0.7928, 0}}, {10, {{-9.0077, -16.8177}, 5.1518, -1.8641, -0.2277, 0}}, {11, {{-9.155, -17.3056}, 5.0971, -1.8641, -0.5468, 0}}, {12, {{-9.3027, -17.7945}, 5.1065, -1.8641, 0.0944, 0}}, {13, {{-9.453, -18.2923}, 5.2, -1.8641, 0.9349, 0}}, {14, {{-9.6034, -18.7903}, 5.2023, -1.8641, 0.0227, 0}}, {15, {{-9.7539, -19.2886}, 5.206, -1.8641, 0.0368, 0}}, {16, {{-9.9043, -19.7868}, 5.2036, -1.8641, -0.0238, 0}}, {17, {{-10.0532, -20.2797}, 5.1487, -1.8641, -0.5491, 0}}, {18, {{-10.2009, -20.7688}, 5.1091, -1.8641, -0.3952, 0}}, {19, {{-10.3504, -21.2639}, 5.1723, -1.8641, 0.6311, 0}}, {20, {{-10.5011, -21.763}, 5.2139, -1.8641, 0.4162, 0}}, {21, {{-10.6496, -22.2546}, 5.1355, -1.8641, -0.7838, 0}}, {22, {{-10.7987, -22.7484}, 5.1576, -1.8641, 0.2207, 0}}, {23, {{-10.9481, -23.2431}, 5.1678, -1.8641, 0.1021, 0}}, {24, {{-11.097, -23.7361}, 5.1499, -1.8641, -0.1784, 0}}, {25, {{-11.2473, -24.2339}, 5.1998, -1.8641, 0.4982, 0}}, {26, {{-11.3953, -24.7239}, 5.119, -1.8641, -0.8073, 0}}, {27, {{-11.545, -25.2196}, 5.1783, -1.8641, 0.5931, 0}}, {28, {{-11.6924, -25.7077}, 5.0983, -1.8641, -0.8004, 0}}, {29, {{-11.8426, -26.2051}, 5.1958, -1.8641, 0.9746, 0}}, {30, {{-11.9919, -26.6995}, 5.1646, -1.8641, -0.3116, 0}}, {31, {{-12.141, -27.1934}, 5.1599, -1.8641, -0.0467, 0}}, {32, {{-12.2897, -27.6855}, 5.1405, -1.8641, -0.1944, 0}}, {33, {{-12.439, -28.1801}, 5.1661, -1.8641, 0.2562, 0}}, {34, {{-12.5886, -28.6754}, 5.174, -1.8641, 0.0794, 0}}, {35, {{-12.7388, -29.1727}, 5.1948, -1.8641, 0.2076, 0}}, {36, {{-12.8868, -29.6628}, 5.1193, -1.8641, -0.7548, 0}}, {37, {{-13.0349, -30.1534}, 5.1255, -1.8641, 0.0617, 0}}, {38, {{-13.1851, -30.6505}, 5.193, -1.8641, 0.675, 0}}, {39, {{-13.3343, -31.1447}, 5.1622, -1.8641, -0.3081, 0}}, {40, {{-13.4826, -31.636}, 5.1319, -1.8641, -0.3027, 0}}, {41, {{-13.6309, -32.1269}, 5.1281, -1.8641, -0.0379, 0}}, {42, {{-13.7787, -32.6163}, 5.1118, -1.8641, -0.163, 0}}, {43, {{-13.9286, -33.1128}, 5.187, -1.8641, 0.752, 0}}, {44, {{-14.0779, -33.6072}, 5.164, -1.8641, -0.2298, 0}}, {45, {{-14.2264, -34.0988}, 5.1358, -1.8641, -0.2823, 0}}, {46, {{-14.3757, -34.5933}, 5.1653, -1.8641, 0.2944, 0}}, {47, {{-14.5242, -35.085}, 5.1368, -1.8641, -0.2843, 0}}, {48, {{-14.674, -35.5811}, 5.1823, -1.8641, 0.4551, 0}}, {49, {{-14.8215, -36.0695}, 5.1013, -1.8641, -0.8101, 0}}, {50, {{-14.9708, -36.564}, 5.1654, -1.8641, 0.6413, 0}}, {51, {{-15.1201, -37.0584}, 5.1648, -1.8641, -0.0064, 0}}, {52, {{-15.2705, -37.5561}, 5.1996, -1.8641, 0.3477, 0}}, {53, {{-15.4185, -38.0464}, 5.121, -1.8641, -0.7861, 0}}, {54, {{-15.568, -38.5414}, 5.1709, -1.8641, 0.4991, 0}}, {55, {{-15.717, -39.0349}, 5.1549, -1.8641, -0.1596, 0}}, {56, {{-15.8677, -39.5339}, 5.2131, -1.8641, 0.5818, 0}}, {57, {{-16.0151, -40.0221}, 5.0994, -1.8641, -1.1372, 0}}, {58, {{-16.1632, -40.5122}, 5.1203, -1.8641, 0.2097, 0}}, {59, {{-16.3113, -41.0029}, 5.1254, -1.8641, 0.0506, 0}}, {60, {{-16.4617, -41.5008}, 5.2016, -1.8641, 0.7622, 0}}, {61, {{-16.6105, -41.9935}, 5.1464, -1.8641, -0.5521, 0}}, {62, {{-16.7604, -42.4898}, 5.1845, -1.8641, 0.3807, 0}}, {63, {{-16.9101, -42.9855}, 5.178, -1.8641, -0.0651, 0}}, {64, {{-17.0583, -43.4762}, 5.1263, -1.8641, -0.5165, 0}}, {65, {{-17.2069, -43.9683}, 5.1404, -1.8641, 0.1407, 0}}, {66, {{-17.3567, -44.4644}, 5.1815, -1.8641, 0.4109, 0}}, {67, {{-17.5042, -44.953}, 5.1042, -1.8641, -0.7725, 0}}, {68, {{-17.6516, -45.441}, 5.0976, -1.8641, -0.0667, 0}}, {69, {{-17.8022, -45.9396}, 5.2088, -1.8641, 1.1124, 0}}, {70, {{-17.9522, -46.4363}, 5.1887, -1.8641, -0.2008, 0}}, {71, {{-18.1029, -46.9353}, 5.2123, -1.8641, 0.2361, 0}}, {72, {{-18.2528, -47.4319}, 5.1873, -1.8641, -0.2505, 0}}, {73, {{-18.4013, -47.9235}, 5.1352, -1.8641, -0.5213, 0}}, {74, {{-18.5512, -48.42}, 5.1872, -1.8641, 0.5207, 0}}, {75, {{-18.6995, -48.9111}, 5.1301, -1.8641, -0.5715, 0}}, {76, {{-18.8483, -49.4038}, 5.1459, -1.8641, 0.1584, 0}}, {77, {{-18.9955, -49.8913}, 5.0931, -1.8641, -0.5276, 0}}, {78, {{-19.1438, -50.3822}, 5.1275, -1.8641, 0.3439, 0}}, {79, {{-19.2929, -50.8759}, 5.1569, -1.8641, 0.2937, 0}}, {80, {{-19.4422, -51.3703}, 5.1651, -1.8641, 0.0823, 0}}, {81, {{-19.5919, -51.8663}, 5.1806, -1.8641, 0.1551, 0}}, {82, {{-19.7393, -52.3541}, 5.0963, -1.8641, -0.8435, 0}}, {83, {{-19.8891, -52.8502}, 5.1819, -1.8641, 0.8556, 0}}, {84, {{-20.0362, -53.3373}, 5.0888, -1.8641, -0.9303, 0}}, {85, {{-20.1834, -53.8247}, 5.091, -1.8641, 0.0222, 0}}, {86, {{-20.3332, -54.3208}, 5.1827, -1.8641, 0.9164, 0}}};
obs53 = MovingObs(53, initCS53, shapeObs53, trajectory53);
const ST_CSTATE initCS54 = {{23.583, 18.7003}, 5.579, -0.1888, 0.1089, 0.0};
const ST_RECTANGLE shapeObs54 = {{2358, 1870}, 180, 500, 0};
const ST_PAIR trajectory54[MAXTP] = {{1, {{24.1225, 18.5936}, 5.5028, -0.1784, -0.7618, 0}}, {2, {{24.6634, 18.4866}, 5.5142, -0.168, 0.1131, 0}}, {3, {{25.2093, 18.3888}, 5.5537, -0.1535, 0.3954, 0}}, {4, {{25.7616, 18.2981}, 5.6051, -0.1379, 0.5138, 0}}, {5, {{26.3143, 18.2312}, 5.5715, -0.1317, -0.3355, 0}}, {6, {{26.8612, 18.1649}, 5.513, -0.1257, -0.5851, 0}}, {7, {{27.4183, 18.0975}, 5.6143, -0.1195, 1.0124, 0}}, {8, {{27.968, 18.0309}, 5.5385, -0.1134, -0.758, 0}}, {9, {{28.5148, 17.9647}, 5.509, -0.1073, -0.2947, 0}}, {10, {{29.0685, 17.8977}, 5.5772, -0.1012, 0.6821, 0}}, {11, {{29.6134, 17.8317}, 5.4882, -0.0951, -0.8899, 0}}, {12, {{30.1611, 17.7752}, 5.506, -0.0929, 0.1782, 0}}, {13, {{30.7119, 17.7239}, 5.5328, -0.0929, 0.2681, 0}}, {14, {{31.2624, 17.6726}, 5.5283, -0.0929, -0.0457, 0}}, {15, {{31.8119, 17.6213}, 5.5194, -0.0929, -0.0886, 0}}, {16, {{32.3643, 17.5699}, 5.5484, -0.0929, 0.2898, 0}}, {17, {{32.9128, 17.5187}, 5.5086, -0.0929, -0.3978, 0}}, {18, {{33.4629, 17.4675}, 5.5257, -0.0929, 0.1706, 0}}, {19, {{34.0115, 17.4176}, 5.5091, -0.0924, -0.166, 0}}, {20, {{34.5602, 17.3774}, 5.5053, -0.0881, -0.038, 0}}, {21, {{35.117, 17.3366}, 5.5854, -0.0836, 0.8014, 0}}, {22, {{35.6736, 17.2959}, 5.5838, -0.0792, -0.0163, 0}}, {23, {{36.2306, 17.2551}, 5.5866, -0.0748, 0.0283, 0}}, {24, {{36.7888, 17.2143}, 5.5986, -0.0703, 0.1202, 0}}, {25, {{37.3413, 17.1738}, 5.5398, -0.0659, -0.5881, 0}}, {26, {{37.8991, 17.133}, 5.5933, -0.0615, 0.5352, 0}}, {27, {{38.4524, 17.0925}, 5.5486, -0.0571, -0.4476, 0}}, {28, {{39.003, 17.0535}, 5.5187, -0.0532, -0.2985, 0}}, {29, {{39.5638, 17.0236}, 5.6168, -0.0532, 0.9804, 0}}, {30, {{40.1127, 16.9944}, 5.4964, -0.0532, -1.2038, 0}}, {31, {{40.6689, 16.9648}, 5.5705, -0.0532, 0.7413, 0}}, {32, {{41.227, 16.9351}, 5.5898, -0.0532, 0.1931, 0}}, {33, {{41.7875, 16.9052}, 5.6128, -0.0532, 0.2298, 0}}, {34, {{42.3404, 16.8758}, 5.537, -0.0532, -0.7583, 0}}, {35, {{42.8949, 16.8462}, 5.5532, -0.0532, 0.1623, 0}}, {36, {{43.453, 16.8165}, 5.5895, -0.0532, 0.3632, 0}}, {37, {{44.0136, 16.7867}, 5.6136, -0.0532, 0.2402, 0}}, {38, {{44.5646, 16.7654}, 5.5174, -0.05, -0.962, 0}}, {39, {{45.1256, 16.7449}, 5.6156, -0.0462, 0.9824, 0}}, {40, {{45.6823, 16.7246}, 5.572, -0.0425, -0.4365, 0}}, {41, {{46.2387, 16.7043}, 5.5692, -0.0388, -0.0274, 0}}, {42, {{46.7922, 16.6841}, 5.5399, -0.0351, -0.2936, 0}}, {43, {{47.3439, 16.664}, 5.5221, -0.0314, -0.1778, 0}}, {44, {{47.903, 16.6436}, 5.5953, -0.0276, 0.7322, 0}}, {45, {{48.4537, 16.6235}, 5.5108, -0.0239, -0.8448, 0}}, {46, {{49.015, 16.603}, 5.6163, -0.0202, 1.055, 0}}, {47, {{49.5709, 16.591}, 5.5607, -0.0197, -0.5558, 0}}, {48, {{50.1239, 16.58}, 5.5305, -0.0197, -0.3025, 0}}, {49, {{50.6779, 16.5691}, 5.5415, -0.0197, 0.1101, 0}}, {50, {{51.2306, 16.5582}, 5.5292, -0.0197, -0.1231, 0}}, {51, {{51.7846, 16.5473}, 5.5414, -0.0197, 0.1218, 0}}, {52, {{52.3457, 16.5362}, 5.6122, -0.0197, 0.7086, 0}}, {53, {{52.9052, 16.5251}, 5.5961, -0.0197, -0.1617, 0}}, {54, {{53.4549, 16.5143}, 5.4983, -0.0197, -0.9782, 0}}, {55, {{54.0068, 16.5034}, 5.5203, -0.0197, 0.2205, 0}}, {56, {{54.5674, 16.4923}, 5.6082, -0.0197, 0.8788, 0}}, {57, {{55.1176, 16.4815}, 5.5027, -0.0197, -1.0551, 0}}, {58, {{55.6676, 16.4706}, 5.5014, -0.0197, -0.0128, 0}}, {59, {{56.228, 16.4595}, 5.6053, -0.0197, 1.0396, 0}}, {60, {{56.7886, 16.4485}, 5.6082, -0.0197, 0.029, 0}}, {61, {{57.3408, 16.4381}, 5.5234, -0.0195, -0.8489, 0}}, {62, {{57.8939, 16.4304}, 5.5311, -0.0182, 0.0776, 0}}, {63, {{58.4462, 16.4228}, 5.5247, -0.0169, -0.064, 0}}, {64, {{59.0043, 16.415}, 5.5816, -0.0156, 0.5693, 0}}, {65, {{59.5593, 16.4073}, 5.5514, -0.0143, -0.3021, 0}}, {66, {{60.1206, 16.3995}, 5.6136, -0.013, 0.6213, 0}}, {67, {{60.6797, 16.3918}, 5.5919, -0.0117, -0.2165, 0}}, {68, {{61.2404, 16.384}, 5.6083, -0.0104, 0.1635, 0}}, {69, {{61.7965, 16.3763}, 5.562, -0.0091, -0.4631, 0}}, {70, {{62.3508, 16.3692}, 5.5434, -0.008, -0.1857, 0}}, {71, {{62.9018, 16.3648}, 5.5108, -0.008, -0.3263, 0}}, {72, {{63.462, 16.3603}, 5.6019, -0.008, 0.9117, 0}}, {73, {{64.0201, 16.3559}, 5.5817, -0.008, -0.2027, 0}}, {74, {{64.5792, 16.3514}, 5.592, -0.008, 0.1031, 0}}, {75, {{65.1409, 16.3469}, 5.617, -0.008, 0.2505, 0}}, {76, {{65.6931, 16.3425}, 5.5227, -0.008, -0.9428, 0}}, {77, {{66.2432, 16.3381}, 5.501, -0.008, -0.2173, 0}}, {78, {{66.8024, 16.3336}, 5.5927, -0.008, 0.9175, 0}}, {79, {{67.3614, 16.3291}, 5.5908, -0.008, -0.0194, 0}}, {80, {{67.9147, 16.3247}, 5.5337, -0.008, -0.5712, 0}}, {81, {{68.4649, 16.3203}, 5.5019, -0.008, -0.3176, 0}}, {82, {{69.0245, 16.3158}, 5.5967, -0.008, 0.9476, 0}}, {83, {{69.5739, 16.3114}, 5.4945, -0.008, -1.0223, 0}}, {84, {{70.1284, 16.307}, 5.5458, -0.008, 0.5138, 0}}, {85, {{70.6786, 16.3026}, 5.5024, -0.008, -0.4342, 0}}, {86, {{71.2353, 16.2982}, 5.5675, -0.008, 0.6503, 0}}, {87, {{71.7858, 16.2938}, 5.5053, -0.008, -0.6218, 0}}, {88, {{72.3416, 16.2893}, 5.5582, -0.008, 0.5294, 0}}, {89, {{72.9021, 16.2848}, 5.6055, -0.008, 0.4727, 0}}, {90, {{73.4592, 16.2804}, 5.5717, -0.008, -0.3379, 0}}, {91, {{74.0197, 16.2759}, 5.6058, -0.008, 0.3411, 0}}, {92, {{74.5777, 16.2714}, 5.5806, -0.008, -0.2516, 0}}, {93, {{75.1314, 16.267}, 5.5373, -0.008, -0.4332, 0}}, {94, {{75.6855, 16.2626}, 5.5413, -0.008, 0.0401, 0}}, {95, {{76.2348, 16.2582}, 5.4934, -0.008, -0.4788, 0}}, {96, {{76.7947, 16.2537}, 5.5995, -0.008, 1.0606, 0}}, {97, {{77.3487, 16.2493}, 5.5411, -0.008, -0.5842, 0}}, {98, {{77.9064, 16.2448}, 5.5771, -0.008, 0.3601, 0}}, {99, {{78.4677, 16.2403}, 5.6138, -0.008, 0.3673, 0}}, {100, {{79.0245, 16.2359}, 5.5684, -0.008, -0.4537, 0}}, {101, {{79.585, 16.2314}, 5.6051, -0.008, 0.3665, 0}}, {102, {{80.1428, 16.2269}, 5.579, -0.008, -0.2607, 0}}, {103, {{80.6924, 16.2225}, 5.4966, -0.008, -0.8243, 0}}, {104, {{81.2477, 16.2161}, 5.5533, -0.0088, 0.567, 0}}, {105, {{81.8011, 16.207}, 5.5362, -0.0107, -0.1712, 0}}, {106, {{82.3523, 16.198}, 5.513, -0.0125, -0.2321, 0}}, {107, {{82.9075, 16.1889}, 5.5539, -0.0144, 0.4096, 0}}, {108, {{83.4632, 16.1798}, 5.558, -0.0162, 0.0412, 0}}, {109, {{84.0224, 16.1706}, 5.5929, -0.0181, 0.3488, 0}}, {110, {{84.5817, 16.1614}, 5.5945, -0.02, 0.0153, 0}}};
obs54 = MovingObs(54, initCS54, shapeObs54, trajectory54);
const ST_CSTATE initCS55 = {{2.1134, 36.9746}, 5.9293, -3.8373, -0.1254, 0.0};
const ST_RECTANGLE shapeObs55 = {{211, 3697}, 180, 500, 0};
const ST_PAIR trajectory55[MAXTP] = {{1, {{1.6515, 37.3408}, 5.988, -3.7966, 0.587, 0}}, {2, {{1.1854, 37.7014}, 5.9479, -3.7591, -0.4017, 0}}, {3, {{0.7057, 38.0456}, 5.9363, -3.7301, -0.1155, 0}}, {4, {{0.2271, 38.3888}, 5.9008, -3.7012, -0.3554, 0}}, {5, {{-0.2629, 38.7349}, 5.9932, -3.6737, 0.9238, 0}}, {6, {{-0.7754, 39.0477}, 6.0062, -3.6621, 0.1305, 0}}, {7, {{-1.283, 39.3575}, 5.9456, -3.6507, -0.6059, 0}}, {8, {{-1.8017, 39.6506}, 5.9694, -3.6357, 0.2376, 0}}, {9, {{-2.3318, 39.917}, 5.9427, -3.6276, -0.2665, 0}}, {10, {{-2.8589, 40.1819}, 5.9077, -3.6195, -0.35, 0}}, {11, {{-3.3845, 40.4461}, 5.8897, -3.6115, -0.1808, 0}}, {12, {{-3.9188, 40.7147}, 5.985, -3.6033, 0.9538, 0}}, {13, {{-4.4469, 40.9801}, 5.9142, -3.5952, -0.7086, 0}}, {14, {{-4.9735, 41.2447}, 5.8949, -3.5871, -0.1932, 0}}, {15, {{-5.5044, 41.5116}, 5.9423, -3.579, 0.4747, 0}}, {16, {{-6.0434, 41.776}, 6.004, -3.5731, 0.6173, 0}}, {17, {{-6.5794, 42.0219}, 5.8992, -3.5728, -1.0484, 0}}, {18, {{-7.1225, 42.2599}, 5.9344, -3.5684, 0.3521, 0}}, {19, {{-7.6643, 42.4973}, 5.9187, -3.564, -0.1575, 0}}, {20, {{-8.2044, 42.734}, 5.9009, -3.5596, -0.1777, 0}}, {21, {{-8.7439, 42.9704}, 5.8928, -3.5553, -0.0809, 0}}, {22, {{-9.2748, 43.203}, 5.7987, -3.551, -0.9409, 0}}, {23, {{-9.7645, 43.4176}, 5.3487, -3.547, -4.5, 0}}, {24, {{-10.2131, 43.6142}, 4.8987, -3.5433, -4.5, 0}}, {25, {{-10.6167, 43.8014}, 4.4487, -3.5438, -4.5, 0}}, {26, {{-11.0168, 43.991}, 4.4254, -3.5458, -0.2331, 0}}, {27, {{-11.4211, 44.1755}, 4.4442, -3.5503, 0.1884, 0}}, {28, {{-11.811, 44.3729}, 4.4034, -3.5633, -0.408, 0}}, {29, {{-12.1968, 44.5783}, 4.4108, -3.58, 0.0737, 0}}, {30, {{-12.5854, 44.785}, 4.4356, -3.5968, 0.2477, 0}}, {31, {{-12.953, 45.0187}, 4.4914, -3.6273, 0.5579, 0}}, {32, {{-13.3172, 45.2506}, 4.43, -3.658, -0.6141, 0}}, {33, {{-13.6659, 45.4985}, 4.4906, -3.698, 0.6061, 0}}, {34, {{-13.9983, 45.7587}, 4.4841, -3.7466, -0.0643, 0}}, {35, {{-14.3228, 46.0234}, 4.467, -3.7991, -0.1716, 0}}, {36, {{-14.6098, 46.3064}, 4.4637, -3.8631, -0.0325, 0}}, {37, {{-14.8991, 46.5986}, 4.4427, -3.9249, -0.2101, 0}}, {38, {{-15.1389, 46.8975}, 4.4423, -4.0049, -0.0041, 0}}, {39, {{-15.3774, 47.2111}, 4.3906, -4.0797, -0.5172, 0}}, {40, {{-15.5774, 47.5421}, 4.4906, -4.1628, 1.0002, 0}}, {41, {{-15.7727, 47.8821}, 4.454, -4.2503, -0.3658, 0}}, {42, {{-15.9353, 48.2369}, 4.3996, -4.3319, -0.5449, 0}}, {43, {{-16.0739, 48.6075}, 4.5022, -4.4217, 1.0267, 0}}, {44, {{-16.2049, 49.0011}, 4.5109, -4.5062, 0.0866, 0}}, {45, {{-16.2816, 49.3806}, 4.2853, -4.5843, -2.2558, 0}}, {46, {{-16.345, 49.7337}, 3.8786, -4.6573, -4.0673, 0}}, {47, {{-16.3748, 50.0568}, 3.4286, -4.7111, -4.5, 0}}, {48, {{-16.3921, 50.3416}, 2.9786, 1.5272, -4.5, 0}}, {49, {{-16.4022, 50.6189}, 2.8916, 1.4815, -0.8693, 0}}, {50, {{-16.3951, 50.8985}, 2.8837, 1.4425, -0.0798, 0}}, {51, {{-16.3738, 51.184}, 2.9289, 1.4085, 0.4523, 0}}, {52, {{-16.3515, 51.4739}, 2.9453, 1.3745, 0.1644, 0}}, {53, {{-16.3236, 51.7707}, 2.9971, 1.3418, 0.5178, 0}}, {54, {{-16.2717, 52.0585}, 2.9437, 1.3195, -0.534, 0}}, {55, {{-16.219, 52.3494}, 2.963, 1.2971, 0.1935, 0}}, {56, {{-16.1658, 52.6413}, 2.9619, 1.2749, -0.0117, 0}}, {57, {{-16.0992, 52.9275}, 2.937, 1.2584, -0.2489, 0}}, {58, {{-16.0218, 53.2116}, 2.9444, 1.2464, 0.0744, 0}}, {59, {{-15.9431, 53.5003}, 2.9893, 1.2342, 0.4487, 0}}, {60, {{-15.8657, 53.7838}, 2.9318, 1.2222, -0.5754, 0}}, {61, {{-15.7757, 54.0642}, 2.9436, 1.2154, 0.1183, 0}}, {62, {{-15.6772, 54.3437}, 2.963, 1.2119, 0.1936, 0}}, {63, {{-15.5787, 54.623}, 2.9621, 1.2084, -0.0086, 0}}, {64, {{-15.481, 54.9003}, 2.9399, 1.2049, -0.2221, 0}}, {65, {{-15.3787, 55.1827}, 3.0028, 1.2024, 0.6294, 0}}, {66, {{-15.2713, 55.4611}, 2.985, 1.2024, -0.1787, 0}}, {67, {{-15.1635, 55.7403}, 2.9933, 1.2024, 0.0838, 0}}, {68, {{-15.0573, 56.0153}, 2.9488, 1.2024, -0.4453, 0}}, {69, {{-14.9493, 56.2953}, 3.0019, 1.2024, 0.5312, 0}}, {70, {{-14.8455, 56.564}, 2.881, 1.2024, -1.2096, 0}}, {71, {{-14.7385, 56.8413}, 2.9731, 1.2024, 0.9213, 0}}, {72, {{-14.6336, 57.1131}, 2.913, 1.2024, -0.6005, 0}}, {73, {{-14.5293, 57.3833}, 2.8972, 1.2024, -0.1583, 0}}, {74, {{-14.4237, 57.6568}, 2.9328, 1.2024, 0.3562, 0}}, {75, {{-14.3198, 57.926}, 2.8861, 1.2024, -0.4668, 0}}, {76, {{-14.2148, 58.1982}, 2.9173, 1.2024, 0.3115, 0}}, {77, {{-14.107, 58.4774}, 2.9942, 1.2024, 0.7686, 0}}, {78, {{-14.0031, 58.7468}, 2.8876, 1.2025, -1.0653, 0}}, {79, {{-13.8976, 59.0203}, 2.9326, 1.2025, 0.4494, 0}}, {80, {{-13.7933, 59.2906}, 2.8971, 1.2025, -0.3549, 0}}, {81, {{-13.6863, 59.5678}, 2.9718, 1.2025, 0.7469, 0}}, {82, {{-13.5786, 59.8469}, 2.9929, 1.2025, 0.2111, 0}}, {83, {{-13.474, 60.118}, 2.9056, 1.2025, -0.8726, 0}}, {84, {{-13.3687, 60.3909}, 2.9263, 1.2025, 0.207, 0}}, {85, {{-13.2613, 60.6693}, 2.9845, 1.2026, 0.5816, 0}}, {86, {{-13.1541, 60.9472}, 2.979, 1.2026, -0.0546, 0}}, {87, {{-13.0502, 61.2164}, 2.8861, 1.2026, -0.9294, 0}}, {88, {{-12.9439, 61.492}, 2.9542, 1.2026, 0.6814, 0}}, {89, {{-12.8359, 61.7718}, 3.0001, 1.2026, 0.4587, 0}}, {90, {{-12.7302, 62.0459}, 2.9386, 1.2026, -0.6153, 0}}, {91, {{-12.6229, 62.324}, 2.9812, 1.2026, 0.4266, 0}}, {92, {{-12.516, 62.6009}, 2.9692, 1.2027, -0.1199, 0}}, {93, {{-12.4107, 62.8739}, 2.9262, 1.2027, -0.4307, 0}}, {94, {{-12.3034, 63.1522}, 2.9833, 1.2027, 0.571, 0}}, {95, {{-12.1988, 63.4233}, 2.9065, 1.2027, -0.7675, 0}}, {96, {{-12.0934, 63.6965}, 2.9293, 1.2027, 0.228, 0}}, {97, {{-11.9852, 63.9772}, 3.0083, 1.2027, 0.7898, 0}}, {98, {{-11.8797, 64.2506}, 2.9308, 1.2027, -0.775, 0}}, {99, {{-11.7738, 64.5251}, 2.9437, 1.2027, 0.1288, 0}}, {100, {{-11.6664, 64.8036}, 2.9853, 1.2027, 0.4167, 0}}, {101, {{-11.5625, 65.0729}, 2.8865, 1.2027, -0.9887, 0}}, {102, {{-11.4572, 65.3459}, 2.9265, 1.2027, 0.4006, 0}}, {103, {{-11.35, 65.6239}, 2.9806, 1.2027, 0.5412, 0}}, {104, {{-11.2448, 65.8967}, 2.924, 1.2027, -0.5669, 0}}};
obs55 = MovingObs(55, initCS55, shapeObs55, trajectory55);
const ST_CSTATE initCS56 = {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0.0};
const ST_RECTANGLE shapeObs56 = {{993, 4278}, 180, 500, 0};
const ST_PAIR trajectory56[MAXTP] = {{1, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {2, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {3, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {4, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {5, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {6, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {7, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {8, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {9, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {10, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {11, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {12, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {13, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {14, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {15, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {16, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {17, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {18, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {19, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {20, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {21, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {22, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {23, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {24, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {25, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {26, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {27, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {28, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {29, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {30, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {31, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {32, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {33, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {34, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {35, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {36, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {37, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {38, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {39, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {40, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {41, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {42, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {43, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {44, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {45, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {46, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {47, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {48, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {49, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {50, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {51, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {52, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {53, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {54, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {55, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {56, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {57, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {58, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {59, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {60, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {61, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {62, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {63, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {64, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {65, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {66, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {67, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {68, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {69, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {70, {{9.9375, 42.7885}, 0.0, -1.9149, 0.0, 0}}, {71, {{9.9287, 42.7641}, 0.26, -1.9149, 2.6, 0}}, {72, {{9.9111, 42.7151}, 0.52, -1.9149, 2.6, 0}}, {73, {{9.8857, 42.6414}, 0.78, -1.9145, 2.6, 0}}, {74, {{9.8527, 42.5442}, 1.0272, -1.9138, 2.4725, 0}}, {75, {{9.8129, 42.4269}, 1.2391, -1.913, 2.118, 0}}, {76, {{9.7648, 42.2852}, 1.497, -1.912, 2.5795, 0}}, {77, {{9.7101, 42.1238}, 1.7047, -1.9108, 2.0772, 0}}, {78, {{9.6479, 41.9405}, 1.9367, -1.9095, 2.3194, 0}}, {79, {{9.5808, 41.743}, 2.0872, -1.9081, 1.505, 0}}, {80, {{9.5062, 41.5232}, 2.3215, -1.9065, 2.3432, 0}}, {81, {{9.4251, 41.2842}, 2.5247, -1.9048, 2.0324, 0}}, {82, {{9.337, 41.0245}, 2.7436, -1.903, 2.1889, 0}}, {83, {{9.2415, 40.7431}, 2.9719, -1.901, 2.2831, 0}}, {84, {{9.1406, 40.446}, 3.1391, -1.8988, 1.6722, 0}}, {85, {{9.0327, 40.1281}, 3.3578, -1.8966, 2.1862, 0}}, {86, {{8.929, 39.7848}, 3.5972, -1.8893, 2.3945, 0}}, {87, {{8.8223, 39.4262}, 3.7524, -1.8811, 1.5525, 0}}, {88, {{8.7082, 39.0429}, 4.0087, -1.8723, 2.5621, 0}}, {89, {{8.5869, 38.6354}, 4.261, -1.8629, 2.5234, 0}}, {90, {{8.4615, 38.2137}, 4.4061, -1.8532, 1.4508, 0}}, {91, {{8.3316, 37.7668}, 4.6578, -1.8442, 2.5172, 0}}, {92, {{8.2224, 37.2984}, 4.8439, -1.8285, 1.8613, 0}}, {93, {{8.1116, 36.8073}, 5.0662, -1.8105, 2.2228, 0}}, {94, {{7.9966, 36.2973}, 5.2536, -1.7919, 1.8737, 0}}, {95, {{7.8764, 35.7645}, 5.4789, -1.7725, 2.2535, 0}}, {96, {{7.7707, 35.2083}, 5.7094, -1.7464, 2.3045, 0}}, {97, {{7.6995, 34.6506}, 5.6778, -1.722, -0.3152, 0}}, {98, {{7.6273, 34.0867}, 5.725, -1.6974, 0.4711, 0}}, {99, {{7.555, 33.5218}, 5.7212, -1.6728, -0.0372, 0}}, {100, {{7.5223, 32.9638}, 5.7043, -1.6327, -0.1696, 0}}, {101, {{7.5119, 32.4119}, 5.5989, -1.6007, -1.0534, 0}}, {102, {{7.5091, 31.8449}, 5.7262, -1.5712, 1.2726, 0}}, {103, {{7.5384, 31.2886}, 5.7226, -1.5285, -0.0358, 0}}, {104, {{7.5813, 30.7417}, 5.6295, -1.4806, -0.9312, 0}}, {105, {{7.6482, 30.1896}, 5.6564, -1.4419, 0.2692, 0}}, {106, {{7.7548, 29.6535}, 5.6805, -1.3925, 0.2408, 0}}, {107, {{7.881, 29.1182}, 5.7221, -1.3344, 0.4164, 0}}, {108, {{8.012, 28.5876}, 5.6048, -1.2797, -1.1736, 0}}, {109, {{8.208, 28.0907}, 5.6279, -1.2226, 0.2315, 0}}, {110, {{8.4166, 27.5978}, 5.6115, -1.1595, -0.1647, 0}}, {111, {{8.6315, 27.0911}, 5.6647, -1.0959, 0.5328, 0}}, {112, {{8.9126, 26.6399}, 5.661, -1.0295, -0.0375, 0}}, {113, {{9.2093, 26.1907}, 5.6551, -0.9622, -0.0593, 0}}, {114, {{9.5135, 25.7316}, 5.6663, -0.8949, 0.1122, 0}}, {115, {{9.8702, 25.3094}, 5.7183, -0.8359, 0.5202, 0}}, {116, {{10.2399, 24.8953}, 5.6766, -0.7803, -0.4166, 0}}, {117, {{10.6181, 24.4736}, 5.7141, -0.7248, 0.3745, 0}}, {118, {{11.0284, 24.0914}, 5.638, -0.69, -0.7605, 0}}, {119, {{11.443, 23.7177}, 5.5993, -0.656, -0.3874, 0}}, {120, {{11.881, 23.3683}, 5.6784, -0.609, 0.7907, 0}}, {121, {{12.3566, 23.06}, 5.7167, -0.5839, 0.3834, 0}}, {122, {{12.825, 22.7563}, 5.6141, -0.5591, -1.0255, 0}}, {123, {{13.3031, 22.4477}, 5.7077, -0.5345, 0.9356, 0}}, {124, {{13.7949, 22.1594}, 5.7124, -0.5196, 0.0465, 0}}, {125, {{14.2902, 21.8876}, 5.6879, -0.4983, -0.2445, 0}}, {126, {{14.7918, 21.6309}, 5.686, -0.4704, -0.0192, 0}}, {127, {{15.2898, 21.3761}, 5.6256, -0.4429, -0.6042, 0}}, {128, {{15.7968, 21.1291}, 5.6565, -0.4196, 0.3094, 0}}, {129, {{16.312, 20.9066}, 5.6237, -0.4066, -0.3277, 0}}, {130, {{16.828, 20.6838}, 5.6275, -0.3937, 0.0382, 0}}, {131, {{17.3511, 20.458}, 5.7008, -0.3805, 0.7326, 0}}, {132, {{17.8763, 20.264}, 5.6433, -0.3554, -0.5746, 0}}, {133, {{18.4058, 20.0684}, 5.6733, -0.3302, 0.2996, 0}}, {134, {{18.9364, 19.8948}, 5.6009, -0.3136, -0.7238, 0}}, {135, {{19.4821, 19.7282}, 5.718, -0.3013, 1.1706, 0}}, {136, {{20.0274, 19.5617}, 5.709, -0.289, -0.0901, 0}}, {137, {{20.5669, 19.397}, 5.6452, -0.2768, -0.6379, 0}}, {138, {{21.1042, 19.2474}, 5.6001, -0.2592, -0.4508, 0}}, {139, {{21.6535, 19.1075}, 5.6969, -0.2362, 0.9677, 0}}, {140, {{22.2, 18.9738}, 5.6436, -0.2154, -0.5324, 0}}, {141, {{22.7485, 18.8653}, 5.6008, -0.2049, -0.4285, 0}}, {142, {{23.3051, 18.7552}, 5.6823, -0.1941, 0.8155, 0}}, {143, {{23.8592, 18.6457}, 5.6527, -0.1835, -0.2962, 0}}, {144, {{24.4083, 18.5371}, 5.5991, -0.1729, -0.5355, 0}}, {145, {{24.9697, 18.4294}, 5.7196, -0.1608, 1.2042, 0}}, {146, {{25.5216, 18.336}, 5.6073, -0.1441, -1.1229, 0}}, {147, {{26.0806, 18.2595}, 5.6484, -0.1343, 0.4113, 0}}, {148, {{26.6372, 18.1921}, 5.6106, -0.1282, -0.378, 0}}, {149, {{27.1962, 18.1244}, 5.6346, -0.1219, 0.2395, 0}}, {150, {{27.7604, 18.0561}, 5.6851, -0.1157, 0.505, 0}}, {151, {{28.3196, 17.9884}, 5.6336, -0.1095, -0.5142, 0}}, {152, {{28.8834, 17.9201}, 5.6798, -0.1032, 0.4618, 0}}, {153, {{29.4428, 17.8523}, 5.6346, -0.097, -0.4525, 0}}, {154, {{30.0032, 17.7899}, 5.6383, -0.0929, 0.0377, 0}}, {155, {{30.5696, 17.7371}, 5.6882, -0.0929, 0.4989, 0}}, {156, {{31.1348, 17.6845}, 5.677, -0.0929, -0.1121, 0}}, {157, {{31.6982, 17.6319}, 5.6588, -0.0929, -0.1822, 0}}, {158, {{32.266, 17.579}, 5.7029, -0.0929, 0.4406, 0}}, {159, {{32.8265, 17.5268}, 5.6292, -0.0929, -0.7363, 0}}, {160, {{33.3917, 17.4741}, 5.6777, -0.0929, 0.4851, 0}}, {161, {{33.9591, 17.4214}, 5.6982, -0.0929, 0.2047, 0}}, {162, {{34.5186, 17.3804}, 5.614, -0.0884, -0.8427, 0}}, {163, {{35.0866, 17.3389}, 5.6973, -0.0839, 0.8337, 0}}, {164, {{35.6476, 17.2978}, 5.6277, -0.0794, -0.6959, 0}}, {165, {{36.214, 17.2563}, 5.6809, -0.0749, 0.532, 0}}, {166, {{36.7835, 17.2146}, 5.7116, -0.0704, 0.3064, 0}}, {167, {{37.3475, 17.1734}, 5.6563, -0.0659, -0.5528, 0}}, {168, {{37.9137, 17.1319}, 5.6771, -0.0613, 0.2082, 0}}, {169, {{38.4814, 17.0904}, 5.692, -0.0568, 0.1484, 0}}, {170, {{39.0432, 17.0514}, 5.6321, -0.0532, -0.5983, 0}}, {171, {{39.6041, 17.0215}, 5.6167, -0.0532, -0.1543, 0}}, {172, {{40.167, 16.9915}, 5.637, -0.0532, 0.2028, 0}}, {173, {{40.7316, 16.9615}, 5.6544, -0.0532, 0.1746, 0}}, {174, {{41.3001, 16.9312}, 5.6938, -0.0532, 0.3934, 0}}, {175, {{41.8615, 16.9013}, 5.6224, -0.0532, -0.7136, 0}}, {176, {{42.4214, 16.8715}, 5.6068, -0.0532, -0.1559, 0}}, {177, {{42.9919, 16.8411}, 5.7138, -0.0532, 1.0692, 0}}, {178, {{43.5613, 16.8108}, 5.7019, -0.0532, -0.1187, 0}}, {179, {{44.1206, 16.7816}, 5.6019, -0.053, -1.0, 0}}, {180, {{44.6874, 16.7609}, 5.6736, -0.0492, 0.7169, 0}}, {181, {{45.2576, 16.7401}, 5.7079, -0.0453, 0.3436, 0}}, {182, {{45.8293, 16.7192}, 5.7231, -0.0415, 0.1518, 0}}, {183, {{46.3923, 16.6987}, 5.6354, -0.0377, -0.8768, 0}}, {184, {{46.9634, 16.6779}, 5.7157, -0.0339, 0.8025, 0}}, {185, {{47.5277, 16.6573}, 5.6473, -0.0301, -0.6843, 0}}, {186, {{48.0874, 16.6368}, 5.6006, -0.0264, -0.4665, 0}}, {187, {{48.6579, 16.616}, 5.7087, -0.0226, 1.0812, 0}}, {188, {{49.2265, 16.5978}, 5.6896, -0.0197, -0.1918, 0}}, {189, {{49.7979, 16.5865}, 5.715, -0.0197, 0.2544, 0}}, {190, {{50.3619, 16.5753}, 5.6417, -0.0197, -0.7333, 0}}, {191, {{50.9235, 16.5643}, 5.6178, -0.0197, -0.2389, 0}}, {192, {{51.4888, 16.5531}, 5.6544, -0.0197, 0.3664, 0}}, {193, {{52.0603, 16.5418}, 5.7158, -0.0197, 0.6142, 0}}, {194, {{52.63, 16.5306}, 5.699, -0.0197, -0.168, 0}}, {195, {{53.1947, 16.5194}, 5.6481, -0.0197, -0.5099, 0}}, {196, {{53.7603, 16.5082}, 5.6574, -0.0197, 0.0932, 0}}, {197, {{54.3275, 16.497}, 5.6738, -0.0197, 0.1639, 0}}, {198, {{54.8985, 16.4858}, 5.711, -0.0197, 0.3724, 0}}, {199, {{55.4678, 16.4745}, 5.6948, -0.0197, -0.1625, 0}}};
obs56 = MovingObs(56, initCS56, shapeObs56, trajectory56);

// Generated moving obstacles ends

// position, velocity, orientation, acceleration, yawRate
const ST_CSTATE initEgo = {{NONE, NONE}, 30.0, 0.0, 0.0, 0.0}; 
const ST_RECTANGLE initShapeEgo = {{NONE, NONE}, 100, 450, 0};
const ST_RULES rules = {4000, 0, 20, -20}; 
const int[0,MAXL] initLane = 0;
egoController = Controller(1, initLane, initEgo, initShapeEgo, rules);
egoDynamics = Dynamics(1, initLane, initEgo);

// Generated model instances start
system Decisions, egoController, egoDynamics, obs52, obs53, obs54, obs55, obs56;

// Generated model instances end
</system>
	<queries>
		<option key="--total-runs" value="50"/>
		<option key="--max-iterations" value="3"/>
		<option key="--good-runs" value="20"/>
		<option key="--eval-runs" value="10"/>
		<option key="--runs-pr-state" value="10"/>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>E&lt;&gt; dStateEgo.detection.reach</formula>
			<comment/>
		</query>
		<query>
			<formula>E[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy safe = control:A[] !dStateEgo.detection.collide &amp;&amp; !dStateEgo.detection.outside
</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:34 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>strategy reachSafe = minE(D) [&lt;=MAXTIME] {egoController.location}-&gt;{dStateEgo.position.x, dStateEgo.position.y, dStateEgo.velocity, dStateEgo.orientation, dStateEgo.acceleration, dStateEgo.yawRate}: &lt;&gt; time&gt;=MAXTIME under safe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:38 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=MAXTIME] { varsEgo.x, varsEgo.y, varsEgo.orientation, varsEgo.velocity, varsEgo.acceleration } under reachSafe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-05-17 10:01:41 +0200">
				<option key="--total-runs" value="50"/>
				<option key="--max-iterations" value="3"/>
				<option key="--good-runs" value="20"/>
				<option key="--eval-runs" value="10"/>
				<option key="--runs-pr-state" value="10"/>
				<option key="--diagnostic" value="0"/>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="varsEgo.x" type="l" color="0xff0000" encoding="csv">0.0,0.0
10.000002,30.000006
					</series>
					<series title="varsEgo.y" type="l" color="0xccff00" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<series title="varsEgo.orientation" type="l" color="0x00ff66" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<series title="varsEgo.velocity" type="l" color="0x0066ff" encoding="csv">0.0,0.0
0.0,3.0
10.000002,3.0
					</series>
					<series title="varsEgo.acceleration" type="l" color="0xcc00ff" encoding="csv">0.0,0.0
10.000002,0.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
